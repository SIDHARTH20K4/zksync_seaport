{"id":"c719ea5f5ad59bc6b02e4f91782a4f05","_format":"hh-sol-build-info-1","solcVersion":"0.8.14","solcLongVersion":"0.8.14+commit.80d49f37","input":{"language":"Solidity","sources":{"contracts/helpers/TransferHelper.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport { IERC721Receiver } from \"seaport-types/src/interfaces/IERC721Receiver.sol\";\n\nimport {\n    TransferHelperItem,\n    TransferHelperItemsWithRecipient\n} from \"seaport-types/src/helpers/TransferHelperStructs.sol\";\n\nimport { ConduitItemType } from \"seaport-types/src/conduit/lib/ConduitEnums.sol\";\n\nimport {\n    ConduitInterface\n} from \"seaport-types/src/interfaces/ConduitInterface.sol\";\n\nimport {\n    ConduitControllerInterface\n} from \"seaport-types/src/interfaces/ConduitControllerInterface.sol\";\n\nimport { ConduitTransfer } from \"seaport-types/src/conduit/lib/ConduitStructs.sol\";\n\nimport {\n    TransferHelperInterface\n} from \"seaport-types/src/interfaces/TransferHelperInterface.sol\";\n\nimport {\n    TransferHelperErrors\n} from \"seaport-types/src/interfaces/TransferHelperErrors.sol\";\n\n/**\n * @title TransferHelper\n * @author stephankmin, stuckinaboot, ryanio\n * @notice TransferHelper is a utility contract for transferring\n *         ERC20/ERC721/ERC1155 items in bulk to specific recipients.\n */\ncontract TransferHelper is TransferHelperInterface, TransferHelperErrors {\n    // Allow for interaction with the conduit controller.\n    ConduitControllerInterface internal immutable _CONDUIT_CONTROLLER;\n\n    // Set conduit creation code and runtime code hashes as immutable arguments.\n    bytes32 internal immutable _CONDUIT_CREATION_CODE_HASH;\n    bytes32 internal immutable _CONDUIT_RUNTIME_CODE_HASH;\n\n    /**\n     * @dev Set the supplied conduit controller and retrieve its\n     *      conduit creation code hash.\n     *\n     *\n     * @param conduitController A contract that deploys conduits, or proxies\n     *                          that may optionally be used to transfer approved\n     *                          ERC20/721/1155 tokens.\n     */\n    constructor(address conduitController) {\n        // Get the conduit creation code and runtime code hashes from the\n        // supplied conduit controller and set them as an immutable.\n        ConduitControllerInterface controller = ConduitControllerInterface(\n            conduitController\n        );\n        (_CONDUIT_CREATION_CODE_HASH, _CONDUIT_RUNTIME_CODE_HASH) = controller\n            .getConduitCodeHashes();\n\n        // Set the supplied conduit controller as an immutable.\n        _CONDUIT_CONTROLLER = controller;\n    }\n\n    /**\n     * @notice Transfer multiple ERC20/ERC721/ERC1155 items to\n     *         specified recipients.\n     *\n     * @param items      The items to transfer to an intended recipient.\n     * @param conduitKey A mandatory conduit key referring to a conduit through\n     *                   which the bulk transfer should occur.\n     *\n     * @return magicValue A value indicating that the transfers were successful.\n     */\n    function bulkTransfer(\n        TransferHelperItemsWithRecipient[] calldata items,\n        bytes32 conduitKey\n    ) external override returns (bytes4 magicValue) {\n        // Ensure that a conduit key has been supplied.\n        if (conduitKey == bytes32(0)) {\n            revert InvalidConduit(conduitKey, address(0));\n        }\n\n        // Use conduit derived from supplied conduit key to perform transfers.\n        _performTransfersWithConduit(items, conduitKey);\n\n        // Return a magic value indicating that the transfers were performed.\n        magicValue = this.bulkTransfer.selector;\n    }\n\n    /**\n     * @notice Perform multiple transfers to specified recipients via the\n     *         conduit derived from the provided conduit key.\n     *\n     * @param transfers  The items to transfer.\n     * @param conduitKey The conduit key referring to the conduit through\n     *                   which the bulk transfer should occur.\n     */\n    function _performTransfersWithConduit(\n        TransferHelperItemsWithRecipient[] calldata transfers,\n        bytes32 conduitKey\n    ) internal {\n        // Retrieve total number of transfers and place on stack.\n        uint256 numTransfers = transfers.length;\n\n        // Derive the conduit address from the deployer, conduit key\n        // and creation code hash.\n        address conduit = address(\n            uint160(\n                uint256(\n                    keccak256(\n                        abi.encodePacked(\n                            bytes1(0xff),\n                            address(_CONDUIT_CONTROLLER),\n                            conduitKey,\n                            _CONDUIT_CREATION_CODE_HASH\n                        )\n                    )\n                )\n            )\n        );\n\n        // Declare a variable to store the sum of all items across transfers.\n        uint256 sumOfItemsAcrossAllTransfers;\n\n        // Skip overflow checks: all for loops are indexed starting at zero.\n        unchecked {\n            // Iterate over each transfer.\n            for (uint256 i = 0; i < numTransfers; ++i) {\n                // Retrieve the transfer in question.\n                TransferHelperItemsWithRecipient calldata transfer = transfers[\n                    i\n                ];\n\n                // Increment totalItems by the number of items in the transfer.\n                sumOfItemsAcrossAllTransfers += transfer.items.length;\n            }\n        }\n\n        // Declare a new array in memory with length totalItems to populate with\n        // each conduit transfer.\n        ConduitTransfer[] memory conduitTransfers = new ConduitTransfer[](\n            sumOfItemsAcrossAllTransfers\n        );\n\n        // Declare an index for storing ConduitTransfers in conduitTransfers.\n        uint256 itemIndex;\n\n        // Skip overflow checks: all for loops are indexed starting at zero.\n        unchecked {\n            // Iterate over each transfer.\n            for (uint256 i = 0; i < numTransfers; ++i) {\n                // Retrieve the transfer in question.\n                TransferHelperItemsWithRecipient calldata transfer = transfers[\n                    i\n                ];\n\n                // Retrieve the items of the transfer in question.\n                TransferHelperItem[] calldata transferItems = transfer.items;\n\n                // Ensure recipient is not the zero address.\n                _checkRecipientIsNotZeroAddress(transfer.recipient);\n\n                // Create a boolean indicating whether validateERC721Receiver\n                // is true and recipient is a contract.\n                bool callERC721Receiver = transfer.validateERC721Receiver &&\n                    transfer.recipient.code.length != 0;\n\n                // Retrieve the total number of items in the transfer and\n                // place on stack.\n                uint256 numItemsInTransfer = transferItems.length;\n\n                // Iterate over each item in the transfer to create a\n                // corresponding ConduitTransfer.\n                for (uint256 j = 0; j < numItemsInTransfer; ++j) {\n                    // Retrieve the item from the transfer.\n                    TransferHelperItem calldata item = transferItems[j];\n\n                    if (item.itemType == ConduitItemType.ERC20) {\n                        // Ensure that the identifier of an ERC20 token is 0.\n                        if (item.identifier != 0) {\n                            revert InvalidERC20Identifier();\n                        }\n                    }\n\n                    // If the item is an ERC721 token and\n                    // callERC721Receiver is true...\n                    if (item.itemType == ConduitItemType.ERC721) {\n                        if (callERC721Receiver) {\n                            // Check if the recipient implements\n                            // onERC721Received for the given tokenId.\n                            _checkERC721Receiver(\n                                conduit,\n                                transfer.recipient,\n                                item.identifier\n                            );\n                        }\n                    }\n\n                    // Create a ConduitTransfer corresponding to each\n                    // TransferHelperItem.\n                    conduitTransfers[itemIndex] = ConduitTransfer(\n                        item.itemType,\n                        item.token,\n                        msg.sender,\n                        transfer.recipient,\n                        item.identifier,\n                        item.amount\n                    );\n\n                    // Increment the index for storing ConduitTransfers.\n                    ++itemIndex;\n                }\n            }\n        }\n\n        // Attempt the external call to transfer tokens via the derived conduit.\n        try ConduitInterface(conduit).execute(conduitTransfers) returns (\n            bytes4 conduitMagicValue\n        ) {\n            // Check if the value returned from the external call matches\n            // the conduit `execute` selector.\n            if (conduitMagicValue != ConduitInterface.execute.selector) {\n                // If the external call fails, revert with the conduit key\n                // and conduit address.\n                revert InvalidConduit(conduitKey, conduit);\n            }\n        } catch Error(string memory reason) {\n            // Catch reverts with a provided reason string and\n            // revert with the reason, conduit key and conduit address.\n            revert ConduitErrorRevertString(reason, conduitKey, conduit);\n        } catch (bytes memory data) {\n            // Conduits will throw a custom error when attempting to transfer\n            // native token item types or an ERC721 item amount other than 1.\n            // Bubble up these custom errors when encountered. Note that the\n            // conduit itself will bubble up revert reasons from transfers as\n            // well, meaning that these errors are not necessarily indicative of\n            // an issue with the item type or amount in cases where the same\n            // custom error signature is encountered during a conduit transfer.\n\n            // Set initial value of first four bytes of revert data to the mask.\n            bytes4 customErrorSelector = bytes4(0xffffffff);\n\n            // Utilize assembly to read first four bytes (if present) directly.\n            assembly {\n                // Combine original mask with first four bytes of revert data.\n                customErrorSelector := and(\n                    mload(add(data, 0x20)), // Data begins after length offset.\n                    customErrorSelector\n                )\n            }\n\n            // Pass through the custom error in question if the revert data is\n            // the correct length and matches an expected custom error selector.\n            if (\n                data.length == 4 &&\n                customErrorSelector == InvalidItemType.selector\n            ) {\n                // \"Bubble up\" the revert reason.\n                assembly {\n                    revert(add(data, 0x20), 0x04)\n                }\n            } else if (\n                data.length == 36 &&\n                customErrorSelector == InvalidERC721TransferAmount.selector\n            ) {\n                // \"Bubble up\" the revert reason.\n                assembly {\n                    revert(add(data, 0x20), 0x24)\n                }\n            }\n\n            // Catch all other reverts from the external call to the conduit and\n            // include the conduit's raw revert reason as a data argument to a\n            // new custom error.\n            revert ConduitErrorRevertBytes(data, conduitKey, conduit);\n        }\n    }\n\n    /**\n     * @notice An internal function to check if a recipient address implements\n     *         onERC721Received for a given tokenId. Note that this check does\n     *         not adhere to the safe transfer specification and is only meant\n     *         to provide an additional layer of assurance that the recipient\n     *         can receive the tokens — any hooks or post-transfer checks will\n     *         fail and the caller will be the transfer helper rather than the\n     *         ERC721 contract. Note that the conduit is set as the operator, as\n     *         it will be the caller once the transfer is performed.\n     *\n     * @param conduit   The conduit to provide as the operator when calling\n     *                  onERC721Received.\n     * @param recipient The ERC721 recipient on which to call onERC721Received.\n     * @param tokenId   The ERC721 tokenId of the token being transferred.\n     */\n    function _checkERC721Receiver(\n        address conduit,\n        address recipient,\n        uint256 tokenId\n    ) internal {\n        // Check if recipient can receive ERC721 tokens.\n        try\n            IERC721Receiver(recipient).onERC721Received(\n                conduit,\n                msg.sender,\n                tokenId,\n                \"\"\n            )\n        returns (bytes4 selector) {\n            // Check if onERC721Received selector is valid.\n            if (selector != IERC721Receiver.onERC721Received.selector) {\n                // Revert if recipient cannot accept\n                // ERC721 tokens.\n                revert InvalidERC721Recipient(recipient);\n            }\n        } catch (bytes memory data) {\n            // \"Bubble up\" recipient's revert reason.\n            revert ERC721ReceiverErrorRevertBytes(\n                data,\n                recipient,\n                msg.sender,\n                tokenId\n            );\n        } catch Error(string memory reason) {\n            // \"Bubble up\" recipient's revert reason.\n            revert ERC721ReceiverErrorRevertString(\n                reason,\n                recipient,\n                msg.sender,\n                tokenId\n            );\n        }\n    }\n\n    /**\n     * @notice An internal function that reverts if the passed-in recipient\n     *         is the zero address.\n     *\n     * @param recipient The recipient on which to perform the check.\n     */\n    function _checkRecipientIsNotZeroAddress(address recipient) internal pure {\n        // Revert if the recipient is the zero address.\n        if (recipient == address(0x0)) {\n            revert RecipientCannotBeZeroAddress();\n        }\n    }\n}\n"},"seaport-types/src/conduit/lib/ConduitEnums.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nenum ConduitItemType {\n    NATIVE, // unused\n    ERC20,\n    ERC721,\n    ERC1155\n}\n"},"seaport-types/src/conduit/lib/ConduitStructs.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport { ConduitItemType } from \"./ConduitEnums.sol\";\n\n/**\n * @dev A ConduitTransfer is a struct that contains the information needed for a\n *      conduit to transfer an item from one address to another.\n */\nstruct ConduitTransfer {\n    ConduitItemType itemType;\n    address token;\n    address from;\n    address to;\n    uint256 identifier;\n    uint256 amount;\n}\n\n/**\n * @dev A ConduitBatch1155Transfer is a struct that contains the information\n *      needed for a conduit to transfer a batch of ERC-1155 tokens from one\n *      address to another.\n */\nstruct ConduitBatch1155Transfer {\n    address token;\n    address from;\n    address to;\n    uint256[] ids;\n    uint256[] amounts;\n}\n"},"seaport-types/src/helpers/TransferHelperStructs.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport { ConduitItemType } from \"../conduit/lib/ConduitEnums.sol\";\n\n/**\n * @dev A TransferHelperItem specifies the itemType (ERC20/ERC721/ERC1155),\n *      token address, token identifier, and amount of the token to be\n *      transferred via the TransferHelper. For ERC20 tokens, identifier\n *      must be 0. For ERC721 tokens, amount must be 1.\n */\nstruct TransferHelperItem {\n    ConduitItemType itemType;\n    address token;\n    uint256 identifier;\n    uint256 amount;\n}\n\n/**\n * @dev A TransferHelperItemsWithRecipient specifies the tokens to transfer\n *      via the TransferHelper, their intended recipient, and a boolean flag\n *      indicating whether onERC721Received should be called on a recipient\n *      contract.\n */\nstruct TransferHelperItemsWithRecipient {\n    TransferHelperItem[] items;\n    address recipient;\n    bool validateERC721Receiver;\n}\n"},"seaport-types/src/interfaces/ConduitControllerInterface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\n/**\n * @title ConduitControllerInterface\n * @author 0age\n * @notice ConduitControllerInterface contains all external function interfaces,\n *         structs, events, and errors for the conduit controller.\n */\ninterface ConduitControllerInterface {\n    /**\n     * @dev Track the conduit key, current owner, new potential owner, and open\n     *      channels for each deployed conduit.\n     */\n    struct ConduitProperties {\n        bytes32 key;\n        address owner;\n        address potentialOwner;\n        address[] channels;\n        mapping(address => uint256) channelIndexesPlusOne;\n    }\n\n    /**\n     * @dev Emit an event whenever a new conduit is created.\n     *\n     * @param conduit    The newly created conduit.\n     * @param conduitKey The conduit key used to create the new conduit.\n     */\n    event NewConduit(address conduit, bytes32 conduitKey);\n\n    /**\n     * @dev Emit an event whenever conduit ownership is transferred.\n     *\n     * @param conduit       The conduit for which ownership has been\n     *                      transferred.\n     * @param previousOwner The previous owner of the conduit.\n     * @param newOwner      The new owner of the conduit.\n     */\n    event OwnershipTransferred(\n        address indexed conduit,\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Emit an event whenever a conduit owner registers a new potential\n     *      owner for that conduit.\n     *\n     * @param newPotentialOwner The new potential owner of the conduit.\n     */\n    event PotentialOwnerUpdated(address indexed newPotentialOwner);\n\n    /**\n     * @dev Revert with an error when attempting to create a new conduit using a\n     *      conduit key where the first twenty bytes of the key do not match the\n     *      address of the caller.\n     */\n    error InvalidCreator();\n\n    /**\n     * @dev Revert with an error when attempting to create a new conduit when no\n     *      initial owner address is supplied.\n     */\n    error InvalidInitialOwner();\n\n    /**\n     * @dev Revert with an error when attempting to set a new potential owner\n     *      that is already set.\n     */\n    error NewPotentialOwnerAlreadySet(\n        address conduit,\n        address newPotentialOwner\n    );\n\n    /**\n     * @dev Revert with an error when attempting to cancel ownership transfer\n     *      when no new potential owner is currently set.\n     */\n    error NoPotentialOwnerCurrentlySet(address conduit);\n\n    /**\n     * @dev Revert with an error when attempting to interact with a conduit that\n     *      does not yet exist.\n     */\n    error NoConduit();\n\n    /**\n     * @dev Revert with an error when attempting to create a conduit that\n     *      already exists.\n     */\n    error ConduitAlreadyExists(address conduit);\n\n    /**\n     * @dev Revert with an error when attempting to update channels or transfer\n     *      ownership of a conduit when the caller is not the owner of the\n     *      conduit in question.\n     */\n    error CallerIsNotOwner(address conduit);\n\n    /**\n     * @dev Revert with an error when attempting to register a new potential\n     *      owner and supplying the null address.\n     */\n    error NewPotentialOwnerIsZeroAddress(address conduit);\n\n    /**\n     * @dev Revert with an error when attempting to claim ownership of a conduit\n     *      with a caller that is not the current potential owner for the\n     *      conduit in question.\n     */\n    error CallerIsNotNewPotentialOwner(address conduit);\n\n    /**\n     * @dev Revert with an error when attempting to retrieve a channel using an\n     *      index that is out of range.\n     */\n    error ChannelOutOfRange(address conduit);\n\n    /**\n     * @notice Deploy a new conduit using a supplied conduit key and assigning\n     *         an initial owner for the deployed conduit. Note that the first\n     *         twenty bytes of the supplied conduit key must match the caller\n     *         and that a new conduit cannot be created if one has already been\n     *         deployed using the same conduit key.\n     *\n     * @param conduitKey   The conduit key used to deploy the conduit. Note that\n     *                     the first twenty bytes of the conduit key must match\n     *                     the caller of this contract.\n     * @param initialOwner The initial owner to set for the new conduit.\n     *\n     * @return conduit The address of the newly deployed conduit.\n     */\n    function createConduit(\n        bytes32 conduitKey,\n        address initialOwner\n    ) external returns (address conduit);\n\n    /**\n     * @notice Open or close a channel on a given conduit, thereby allowing the\n     *         specified account to execute transfers against that conduit.\n     *         Extreme care must be taken when updating channels, as malicious\n     *         or vulnerable channels can transfer any ERC20, ERC721 and ERC1155\n     *         tokens where the token holder has granted the conduit approval.\n     *         Only the owner of the conduit in question may call this function.\n     *\n     * @param conduit The conduit for which to open or close the channel.\n     * @param channel The channel to open or close on the conduit.\n     * @param isOpen  A boolean indicating whether to open or close the channel.\n     */\n    function updateChannel(\n        address conduit,\n        address channel,\n        bool isOpen\n    ) external;\n\n    /**\n     * @notice Initiate conduit ownership transfer by assigning a new potential\n     *         owner for the given conduit. Once set, the new potential owner\n     *         may call `acceptOwnership` to claim ownership of the conduit.\n     *         Only the owner of the conduit in question may call this function.\n     *\n     * @param conduit The conduit for which to initiate ownership transfer.\n     * @param newPotentialOwner The new potential owner of the conduit.\n     */\n    function transferOwnership(\n        address conduit,\n        address newPotentialOwner\n    ) external;\n\n    /**\n     * @notice Clear the currently set potential owner, if any, from a conduit.\n     *         Only the owner of the conduit in question may call this function.\n     *\n     * @param conduit The conduit for which to cancel ownership transfer.\n     */\n    function cancelOwnershipTransfer(address conduit) external;\n\n    /**\n     * @notice Accept ownership of a supplied conduit. Only accounts that the\n     *         current owner has set as the new potential owner may call this\n     *         function.\n     *\n     * @param conduit The conduit for which to accept ownership.\n     */\n    function acceptOwnership(address conduit) external;\n\n    /**\n     * @notice Retrieve the current owner of a deployed conduit.\n     *\n     * @param conduit The conduit for which to retrieve the associated owner.\n     *\n     * @return owner The owner of the supplied conduit.\n     */\n    function ownerOf(address conduit) external view returns (address owner);\n\n    /**\n     * @notice Retrieve the conduit key for a deployed conduit via reverse\n     *         lookup.\n     *\n     * @param conduit The conduit for which to retrieve the associated conduit\n     *                key.\n     *\n     * @return conduitKey The conduit key used to deploy the supplied conduit.\n     */\n    function getKey(address conduit) external view returns (bytes32 conduitKey);\n\n    /**\n     * @notice Derive the conduit associated with a given conduit key and\n     *         determine whether that conduit exists (i.e. whether it has been\n     *         deployed).\n     *\n     * @param conduitKey The conduit key used to derive the conduit.\n     *\n     * @return conduit The derived address of the conduit.\n     * @return exists  A boolean indicating whether the derived conduit has been\n     *                 deployed or not.\n     */\n    function getConduit(\n        bytes32 conduitKey\n    ) external view returns (address conduit, bool exists);\n\n    /**\n     * @notice Retrieve the potential owner, if any, for a given conduit. The\n     *         current owner may set a new potential owner via\n     *         `transferOwnership` and that owner may then accept ownership of\n     *         the conduit in question via `acceptOwnership`.\n     *\n     * @param conduit The conduit for which to retrieve the potential owner.\n     *\n     * @return potentialOwner The potential owner, if any, for the conduit.\n     */\n    function getPotentialOwner(\n        address conduit\n    ) external view returns (address potentialOwner);\n\n    /**\n     * @notice Retrieve the status (either open or closed) of a given channel on\n     *         a conduit.\n     *\n     * @param conduit The conduit for which to retrieve the channel status.\n     * @param channel The channel for which to retrieve the status.\n     *\n     * @return isOpen The status of the channel on the given conduit.\n     */\n    function getChannelStatus(\n        address conduit,\n        address channel\n    ) external view returns (bool isOpen);\n\n    /**\n     * @notice Retrieve the total number of open channels for a given conduit.\n     *\n     * @param conduit The conduit for which to retrieve the total channel count.\n     *\n     * @return totalChannels The total number of open channels for the conduit.\n     */\n    function getTotalChannels(\n        address conduit\n    ) external view returns (uint256 totalChannels);\n\n    /**\n     * @notice Retrieve an open channel at a specific index for a given conduit.\n     *         Note that the index of a channel can change as a result of other\n     *         channels being closed on the conduit.\n     *\n     * @param conduit      The conduit for which to retrieve the open channel.\n     * @param channelIndex The index of the channel in question.\n     *\n     * @return channel The open channel, if any, at the specified channel index.\n     */\n    function getChannel(\n        address conduit,\n        uint256 channelIndex\n    ) external view returns (address channel);\n\n    /**\n     * @notice Retrieve all open channels for a given conduit. Note that calling\n     *         this function for a conduit with many channels will revert with\n     *         an out-of-gas error.\n     *\n     * @param conduit The conduit for which to retrieve open channels.\n     *\n     * @return channels An array of open channels on the given conduit.\n     */\n    function getChannels(\n        address conduit\n    ) external view returns (address[] memory channels);\n\n    /**\n     * @dev Retrieve the conduit creation code and runtime code hashes.\n     */\n    function getConduitCodeHashes()\n        external\n        view\n        returns (bytes32 creationCodeHash, bytes32 runtimeCodeHash);\n}\n"},"seaport-types/src/interfaces/ConduitInterface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport {\n    ConduitBatch1155Transfer,\n    ConduitTransfer\n} from \"../conduit/lib/ConduitStructs.sol\";\n\n/**\n * @title ConduitInterface\n * @author 0age\n * @notice ConduitInterface contains all external function interfaces, events,\n *         and errors for conduit contracts.\n */\ninterface ConduitInterface {\n    /**\n     * @dev Revert with an error when attempting to execute transfers using a\n     *      caller that does not have an open channel.\n     */\n    error ChannelClosed(address channel);\n\n    /**\n     * @dev Revert with an error when attempting to update a channel to the\n     *      current status of that channel.\n     */\n    error ChannelStatusAlreadySet(address channel, bool isOpen);\n\n    /**\n     * @dev Revert with an error when attempting to execute a transfer for an\n     *      item that does not have an ERC20/721/1155 item type.\n     */\n    error InvalidItemType();\n\n    /**\n     * @dev Revert with an error when attempting to update the status of a\n     *      channel from a caller that is not the conduit controller.\n     */\n    error InvalidController();\n\n    /**\n     * @dev Emit an event whenever a channel is opened or closed.\n     *\n     * @param channel The channel that has been updated.\n     * @param open    A boolean indicating whether the conduit is open or not.\n     */\n    event ChannelUpdated(address indexed channel, bool open);\n\n    /**\n     * @notice Execute a sequence of ERC20/721/1155 transfers. Only a caller\n     *         with an open channel can call this function.\n     *\n     * @param transfers The ERC20/721/1155 transfers to perform.\n     *\n     * @return magicValue A magic value indicating that the transfers were\n     *                    performed successfully.\n     */\n    function execute(\n        ConduitTransfer[] calldata transfers\n    ) external returns (bytes4 magicValue);\n\n    /**\n     * @notice Execute a sequence of batch 1155 transfers. Only a caller with an\n     *         open channel can call this function.\n     *\n     * @param batch1155Transfers The 1155 batch transfers to perform.\n     *\n     * @return magicValue A magic value indicating that the transfers were\n     *                    performed successfully.\n     */\n    function executeBatch1155(\n        ConduitBatch1155Transfer[] calldata batch1155Transfers\n    ) external returns (bytes4 magicValue);\n\n    /**\n     * @notice Execute a sequence of transfers, both single and batch 1155. Only\n     *         a caller with an open channel can call this function.\n     *\n     * @param standardTransfers  The ERC20/721/1155 transfers to perform.\n     * @param batch1155Transfers The 1155 batch transfers to perform.\n     *\n     * @return magicValue A magic value indicating that the transfers were\n     *                    performed successfully.\n     */\n    function executeWithBatch1155(\n        ConduitTransfer[] calldata standardTransfers,\n        ConduitBatch1155Transfer[] calldata batch1155Transfers\n    ) external returns (bytes4 magicValue);\n\n    /**\n     * @notice Open or close a given channel. Only callable by the controller.\n     *\n     * @param channel The channel to open or close.\n     * @param isOpen  The status of the channel (either open or closed).\n     */\n    function updateChannel(address channel, bool isOpen) external;\n}\n"},"seaport-types/src/interfaces/IERC721Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n *      from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an ERC721 token is transferred to this contract via\n     *      safeTransferFrom, this function is called.\n     *\n     * @param operator  The address of the operator.\n     * @param from      The address of the sender.\n     * @param tokenId   The ID of the ERC721.\n     * @param data      Additional data.\n     *\n     * @return bytes4 The magic value, unless throwing.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"},"seaport-types/src/interfaces/TransferHelperErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\n/**\n * @title TransferHelperErrors\n */\ninterface TransferHelperErrors {\n    /**\n     * @dev Revert with an error when attempting to execute transfers with a\n     *      NATIVE itemType.\n     */\n    error InvalidItemType();\n\n    /**\n     * @dev Revert with an error when an ERC721 transfer with amount other than\n     *      one is attempted.\n     *\n     * @param amount The amount of the ERC721 tokens to transfer.\n     */\n    error InvalidERC721TransferAmount(uint256 amount);\n\n    /**\n     * @dev Revert with an error when attempting to execute an ERC721 transfer\n     *      to an invalid recipient.\n     */\n    error InvalidERC721Recipient(address recipient);\n\n    /**\n     * @dev Revert with an error when a call to an ERC721 receiver reverts with\n     *      bytes data.\n     */\n    error ERC721ReceiverErrorRevertBytes(\n        bytes reason,\n        address receiver,\n        address sender,\n        uint256 identifier\n    );\n\n    /**\n     * @dev Revert with an error when a call to an ERC721 receiver reverts with\n     *      string reason.\n     */\n    error ERC721ReceiverErrorRevertString(\n        string reason,\n        address receiver,\n        address sender,\n        uint256 identifier\n    );\n\n    /**\n     * @dev Revert with an error when an ERC20 token has an invalid identifier.\n     */\n    error InvalidERC20Identifier();\n\n    /**\n     * @dev Revert with an error if the recipient is the zero address.\n     */\n    error RecipientCannotBeZeroAddress();\n\n    /**\n     * @dev Revert with an error when attempting to fill an order referencing an\n     *      invalid conduit (i.e. one that has not been deployed).\n     */\n    error InvalidConduit(bytes32 conduitKey, address conduit);\n\n    /**\n     * @dev Revert with an error when a call to a conduit reverts with a\n     *      reason string.\n     */\n    error ConduitErrorRevertString(\n        string reason,\n        bytes32 conduitKey,\n        address conduit\n    );\n\n    /**\n     * @dev Revert with an error when a call to a conduit reverts with bytes\n     *      data.\n     */\n    error ConduitErrorRevertBytes(\n        bytes reason,\n        bytes32 conduitKey,\n        address conduit\n    );\n}\n"},"seaport-types/src/interfaces/TransferHelperInterface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport {\n    TransferHelperItemsWithRecipient\n} from \"../helpers/TransferHelperStructs.sol\";\n\ninterface TransferHelperInterface {\n    /**\n     * @notice Transfer multiple items to a single recipient.\n     *\n     * @param items The items to transfer.\n     * @param conduitKey  The key of the conduit performing the bulk transfer.\n     */\n    function bulkTransfer(\n        TransferHelperItemsWithRecipient[] calldata items,\n        bytes32 conduitKey\n    ) external returns (bytes4);\n}\n"}},"settings":{"viaIR":true,"optimizer":{"enabled":true,"mode":"3"},"outputSelection":{"*":{"*":["abi","evm.methodIdentifiers","metadata"],"":["ast"]}},"libraries":{}}},"output":{"errors":[],"version":"0.8.14","long_version":"0.8.14+commit.80d49f37.Darwin.appleclang","zk_version":"1.3.16","sources":{"contracts/helpers/TransferHelper.sol":{"id":0,"ast":{"absolutePath":"contracts/helpers/TransferHelper.sol","exportedSymbols":{"ConduitControllerInterface":[735],"ConduitInterface":[809],"ConduitItemType":[477],"ConduitTransfer":[495],"IERC721Receiver":[827],"TransferHelper":[470],"TransferHelperErrors":[897],"TransferHelperInterface":[914],"TransferHelperItem":[522],"TransferHelperItemsWithRecipient":[531]},"id":471,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".13"],"nodeType":"PragmaDirective","src":"32:24:0"},{"absolutePath":"seaport-types/src/interfaces/IERC721Receiver.sol","file":"seaport-types/src/interfaces/IERC721Receiver.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":471,"sourceUnit":828,"src":"58:83:0","symbolAliases":[{"foreign":{"id":2,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":827,"src":"67:15:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"seaport-types/src/helpers/TransferHelperStructs.sol","file":"seaport-types/src/helpers/TransferHelperStructs.sol","id":6,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":471,"sourceUnit":532,"src":"143:131:0","symbolAliases":[{"foreign":{"id":4,"name":"TransferHelperItem","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":522,"src":"156:18:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":5,"name":"TransferHelperItemsWithRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":531,"src":"180:32:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"seaport-types/src/conduit/lib/ConduitEnums.sol","file":"seaport-types/src/conduit/lib/ConduitEnums.sol","id":8,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":471,"sourceUnit":478,"src":"276:81:0","symbolAliases":[{"foreign":{"id":7,"name":"ConduitItemType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":477,"src":"285:15:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"seaport-types/src/interfaces/ConduitInterface.sol","file":"seaport-types/src/interfaces/ConduitInterface.sol","id":10,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":471,"sourceUnit":810,"src":"359:89:0","symbolAliases":[{"foreign":{"id":9,"name":"ConduitInterface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":809,"src":"372:16:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"seaport-types/src/interfaces/ConduitControllerInterface.sol","file":"seaport-types/src/interfaces/ConduitControllerInterface.sol","id":12,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":471,"sourceUnit":736,"src":"450:109:0","symbolAliases":[{"foreign":{"id":11,"name":"ConduitControllerInterface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":735,"src":"463:26:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"seaport-types/src/conduit/lib/ConduitStructs.sol","file":"seaport-types/src/conduit/lib/ConduitStructs.sol","id":14,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":471,"sourceUnit":509,"src":"561:83:0","symbolAliases":[{"foreign":{"id":13,"name":"ConduitTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":495,"src":"570:15:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"seaport-types/src/interfaces/TransferHelperInterface.sol","file":"seaport-types/src/interfaces/TransferHelperInterface.sol","id":16,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":471,"sourceUnit":915,"src":"646:103:0","symbolAliases":[{"foreign":{"id":15,"name":"TransferHelperInterface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":914,"src":"659:23:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"seaport-types/src/interfaces/TransferHelperErrors.sol","file":"seaport-types/src/interfaces/TransferHelperErrors.sol","id":18,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":471,"sourceUnit":898,"src":"751:97:0","symbolAliases":[{"foreign":{"id":17,"name":"TransferHelperErrors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":897,"src":"764:20:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":20,"name":"TransferHelperInterface","nodeType":"IdentifierPath","referencedDeclaration":914,"src":"1090:23:0"},"id":21,"nodeType":"InheritanceSpecifier","src":"1090:23:0"},{"baseName":{"id":22,"name":"TransferHelperErrors","nodeType":"IdentifierPath","referencedDeclaration":897,"src":"1115:20:0"},"id":23,"nodeType":"InheritanceSpecifier","src":"1115:20:0"}],"canonicalName":"TransferHelper","contractDependencies":[],"contractKind":"contract","documentation":{"id":19,"nodeType":"StructuredDocumentation","src":"850:212:0","text":" @title TransferHelper\n @author stephankmin, stuckinaboot, ryanio\n @notice TransferHelper is a utility contract for transferring\n         ERC20/ERC721/ERC1155 items in bulk to specific recipients."},"fullyImplemented":true,"id":470,"linearizedBaseContracts":[470,897,914],"name":"TransferHelper","nameLocation":"1072:14:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":26,"mutability":"immutable","name":"_CONDUIT_CONTROLLER","nameLocation":"1246:19:0","nodeType":"VariableDeclaration","scope":470,"src":"1200:65:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ConduitControllerInterface_$735","typeString":"contract ConduitControllerInterface"},"typeName":{"id":25,"nodeType":"UserDefinedTypeName","pathNode":{"id":24,"name":"ConduitControllerInterface","nodeType":"IdentifierPath","referencedDeclaration":735,"src":"1200:26:0"},"referencedDeclaration":735,"src":"1200:26:0","typeDescriptions":{"typeIdentifier":"t_contract$_ConduitControllerInterface_$735","typeString":"contract ConduitControllerInterface"}},"visibility":"internal"},{"constant":false,"id":28,"mutability":"immutable","name":"_CONDUIT_CREATION_CODE_HASH","nameLocation":"1380:27:0","nodeType":"VariableDeclaration","scope":470,"src":"1353:54:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":27,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1353:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":30,"mutability":"immutable","name":"_CONDUIT_RUNTIME_CODE_HASH","nameLocation":"1440:26:0","nodeType":"VariableDeclaration","scope":470,"src":"1413:53:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":29,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1413:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"body":{"id":55,"nodeType":"Block","src":"1860:490:0","statements":[{"assignments":[38],"declarations":[{"constant":false,"id":38,"mutability":"mutable","name":"controller","nameLocation":"2040:10:0","nodeType":"VariableDeclaration","scope":55,"src":"2013:37:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ConduitControllerInterface_$735","typeString":"contract ConduitControllerInterface"},"typeName":{"id":37,"nodeType":"UserDefinedTypeName","pathNode":{"id":36,"name":"ConduitControllerInterface","nodeType":"IdentifierPath","referencedDeclaration":735,"src":"2013:26:0"},"referencedDeclaration":735,"src":"2013:26:0","typeDescriptions":{"typeIdentifier":"t_contract$_ConduitControllerInterface_$735","typeString":"contract ConduitControllerInterface"}},"visibility":"internal"}],"id":42,"initialValue":{"arguments":[{"id":40,"name":"conduitController","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":33,"src":"2093:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":39,"name":"ConduitControllerInterface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":735,"src":"2053:26:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ConduitControllerInterface_$735_$","typeString":"type(contract ConduitControllerInterface)"}},"id":41,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2053:67:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ConduitControllerInterface_$735","typeString":"contract ConduitControllerInterface"}},"nodeType":"VariableDeclarationStatement","src":"2013:107:0"},{"expression":{"id":49,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":43,"name":"_CONDUIT_CREATION_CODE_HASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":28,"src":"2131:27:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":44,"name":"_CONDUIT_RUNTIME_CODE_HASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":30,"src":"2160:26:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":45,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"2130:57:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bytes32_$_t_bytes32_$","typeString":"tuple(bytes32,bytes32)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":46,"name":"controller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38,"src":"2190:10:0","typeDescriptions":{"typeIdentifier":"t_contract$_ConduitControllerInterface_$735","typeString":"contract ConduitControllerInterface"}},"id":47,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getConduitCodeHashes","nodeType":"MemberAccess","referencedDeclaration":734,"src":"2190:44:0","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_bytes32_$_t_bytes32_$","typeString":"function () view external returns (bytes32,bytes32)"}},"id":48,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2190:46:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bytes32_$_t_bytes32_$","typeString":"tuple(bytes32,bytes32)"}},"src":"2130:106:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":50,"nodeType":"ExpressionStatement","src":"2130:106:0"},{"expression":{"id":53,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":51,"name":"_CONDUIT_CONTROLLER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":26,"src":"2311:19:0","typeDescriptions":{"typeIdentifier":"t_contract$_ConduitControllerInterface_$735","typeString":"contract ConduitControllerInterface"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":52,"name":"controller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38,"src":"2333:10:0","typeDescriptions":{"typeIdentifier":"t_contract$_ConduitControllerInterface_$735","typeString":"contract ConduitControllerInterface"}},"src":"2311:32:0","typeDescriptions":{"typeIdentifier":"t_contract$_ConduitControllerInterface_$735","typeString":"contract ConduitControllerInterface"}},"id":54,"nodeType":"ExpressionStatement","src":"2311:32:0"}]},"documentation":{"id":31,"nodeType":"StructuredDocumentation","src":"1473:343:0","text":" @dev Set the supplied conduit controller and retrieve its\n      conduit creation code hash.\n @param conduitController A contract that deploys conduits, or proxies\n                          that may optionally be used to transfer approved\n                          ERC20/721/1155 tokens."},"id":56,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":34,"nodeType":"ParameterList","parameters":[{"constant":false,"id":33,"mutability":"mutable","name":"conduitController","nameLocation":"1841:17:0","nodeType":"VariableDeclaration","scope":56,"src":"1833:25:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":32,"name":"address","nodeType":"ElementaryTypeName","src":"1833:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1832:27:0"},"returnParameters":{"id":35,"nodeType":"ParameterList","parameters":[],"src":"1860:0:0"},"scope":470,"src":"1821:529:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[913],"body":{"id":96,"nodeType":"Block","src":"2944:437:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":74,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":69,"name":"conduitKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":63,"src":"3014:10:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":72,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3036:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":71,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3028:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":70,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3028:7:0","typeDescriptions":{}}},"id":73,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3028:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3014:24:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":84,"nodeType":"IfStatement","src":"3010:100:0","trueBody":{"id":83,"nodeType":"Block","src":"3040:70:0","statements":[{"errorCall":{"arguments":[{"id":76,"name":"conduitKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":63,"src":"3076:10:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"hexValue":"30","id":79,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3096:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":78,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3088:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":77,"name":"address","nodeType":"ElementaryTypeName","src":"3088:7:0","typeDescriptions":{}}},"id":80,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3088:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":75,"name":"InvalidConduit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":878,"src":"3061:14:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address) pure"}},"id":81,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3061:38:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":82,"nodeType":"RevertStatement","src":"3054:45:0"}]}},{"expression":{"arguments":[{"id":86,"name":"items","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":61,"src":"3228:5:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TransferHelperItemsWithRecipient_$531_calldata_ptr_$dyn_calldata_ptr","typeString":"struct TransferHelperItemsWithRecipient calldata[] calldata"}},{"id":87,"name":"conduitKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":63,"src":"3235:10:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_struct$_TransferHelperItemsWithRecipient_$531_calldata_ptr_$dyn_calldata_ptr","typeString":"struct TransferHelperItemsWithRecipient calldata[] calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":85,"name":"_performTransfersWithConduit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":387,"src":"3199:28:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_array$_t_struct$_TransferHelperItemsWithRecipient_$531_calldata_ptr_$dyn_calldata_ptr_$_t_bytes32_$returns$__$","typeString":"function (struct TransferHelperItemsWithRecipient calldata[] calldata,bytes32)"}},"id":88,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3199:47:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":89,"nodeType":"ExpressionStatement","src":"3199:47:0"},{"expression":{"id":94,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":90,"name":"magicValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67,"src":"3335:10:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"expression":{"id":91,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3348:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_TransferHelper_$470","typeString":"contract TransferHelper"}},"id":92,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"bulkTransfer","nodeType":"MemberAccess","referencedDeclaration":97,"src":"3348:17:0","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_array$_t_struct$_TransferHelperItemsWithRecipient_$531_memory_ptr_$dyn_memory_ptr_$_t_bytes32_$returns$_t_bytes4_$","typeString":"function (struct TransferHelperItemsWithRecipient memory[] memory,bytes32) external returns (bytes4)"}},"id":93,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"3348:26:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"3335:39:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":95,"nodeType":"ExpressionStatement","src":"3335:39:0"}]},"documentation":{"id":57,"nodeType":"StructuredDocumentation","src":"2356:422:0","text":" @notice Transfer multiple ERC20/ERC721/ERC1155 items to\n         specified recipients.\n @param items      The items to transfer to an intended recipient.\n @param conduitKey A mandatory conduit key referring to a conduit through\n                   which the bulk transfer should occur.\n @return magicValue A value indicating that the transfers were successful."},"functionSelector":"32389b71","id":97,"implemented":true,"kind":"function","modifiers":[],"name":"bulkTransfer","nameLocation":"2792:12:0","nodeType":"FunctionDefinition","overrides":{"id":65,"nodeType":"OverrideSpecifier","overrides":[],"src":"2907:8:0"},"parameters":{"id":64,"nodeType":"ParameterList","parameters":[{"constant":false,"id":61,"mutability":"mutable","name":"items","nameLocation":"2858:5:0","nodeType":"VariableDeclaration","scope":97,"src":"2814:49:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TransferHelperItemsWithRecipient_$531_calldata_ptr_$dyn_calldata_ptr","typeString":"struct TransferHelperItemsWithRecipient[]"},"typeName":{"baseType":{"id":59,"nodeType":"UserDefinedTypeName","pathNode":{"id":58,"name":"TransferHelperItemsWithRecipient","nodeType":"IdentifierPath","referencedDeclaration":531,"src":"2814:32:0"},"referencedDeclaration":531,"src":"2814:32:0","typeDescriptions":{"typeIdentifier":"t_struct$_TransferHelperItemsWithRecipient_$531_storage_ptr","typeString":"struct TransferHelperItemsWithRecipient"}},"id":60,"nodeType":"ArrayTypeName","src":"2814:34:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TransferHelperItemsWithRecipient_$531_storage_$dyn_storage_ptr","typeString":"struct TransferHelperItemsWithRecipient[]"}},"visibility":"internal"},{"constant":false,"id":63,"mutability":"mutable","name":"conduitKey","nameLocation":"2881:10:0","nodeType":"VariableDeclaration","scope":97,"src":"2873:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":62,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2873:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2804:93:0"},"returnParameters":{"id":68,"nodeType":"ParameterList","parameters":[{"constant":false,"id":67,"mutability":"mutable","name":"magicValue","nameLocation":"2932:10:0","nodeType":"VariableDeclaration","scope":97,"src":"2925:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":66,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2925:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2924:19:0"},"scope":470,"src":"2783:598:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":386,"nodeType":"Block","src":"3875:7613:0","statements":[{"assignments":[108],"declarations":[{"constant":false,"id":108,"mutability":"mutable","name":"numTransfers","nameLocation":"3959:12:0","nodeType":"VariableDeclaration","scope":386,"src":"3951:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":107,"name":"uint256","nodeType":"ElementaryTypeName","src":"3951:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":111,"initialValue":{"expression":{"id":109,"name":"transfers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":102,"src":"3974:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TransferHelperItemsWithRecipient_$531_calldata_ptr_$dyn_calldata_ptr","typeString":"struct TransferHelperItemsWithRecipient calldata[] calldata"}},"id":110,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"3974:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3951:39:0"},{"assignments":[113],"declarations":[{"constant":false,"id":113,"mutability":"mutable","name":"conduit","nameLocation":"4113:7:0","nodeType":"VariableDeclaration","scope":386,"src":"4105:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":112,"name":"address","nodeType":"ElementaryTypeName","src":"4105:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":138,"initialValue":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"hexValue":"30786666","id":125,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4286:4:0","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"0xff"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"}],"id":124,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4279:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes1_$","typeString":"type(bytes1)"},"typeName":{"id":123,"name":"bytes1","nodeType":"ElementaryTypeName","src":"4279:6:0","typeDescriptions":{}}},"id":126,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4279:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},{"arguments":[{"id":129,"name":"_CONDUIT_CONTROLLER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":26,"src":"4329:19:0","typeDescriptions":{"typeIdentifier":"t_contract$_ConduitControllerInterface_$735","typeString":"contract ConduitControllerInterface"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ConduitControllerInterface_$735","typeString":"contract ConduitControllerInterface"}],"id":128,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4321:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":127,"name":"address","nodeType":"ElementaryTypeName","src":"4321:7:0","typeDescriptions":{}}},"id":130,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4321:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":131,"name":"conduitKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":104,"src":"4379:10:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":132,"name":"_CONDUIT_CREATION_CODE_HASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":28,"src":"4419:27:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":121,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4233:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":122,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"4233:16:0","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":133,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4233:239:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":120,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"4198:9:0","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":134,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4198:296:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":119,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4169:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":118,"name":"uint256","nodeType":"ElementaryTypeName","src":"4169:7:0","typeDescriptions":{}}},"id":135,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4169:343:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":117,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4144:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":116,"name":"uint160","nodeType":"ElementaryTypeName","src":"4144:7:0","typeDescriptions":{}}},"id":136,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4144:382:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":115,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4123:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":114,"name":"address","nodeType":"ElementaryTypeName","src":"4123:7:0","typeDescriptions":{}}},"id":137,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4123:413:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4105:431:0"},{"assignments":[140],"declarations":[{"constant":false,"id":140,"mutability":"mutable","name":"sumOfItemsAcrossAllTransfers","nameLocation":"4633:28:0","nodeType":"VariableDeclaration","scope":386,"src":"4625:36:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":139,"name":"uint256","nodeType":"ElementaryTypeName","src":"4625:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":141,"nodeType":"VariableDeclarationStatement","src":"4625:36:0"},{"id":167,"nodeType":"UncheckedBlock","src":"4749:462:0","statements":[{"body":{"id":165,"nodeType":"Block","src":"4859:342:0","statements":[{"assignments":[154],"declarations":[{"constant":false,"id":154,"mutability":"mutable","name":"transfer","nameLocation":"4973:8:0","nodeType":"VariableDeclaration","scope":165,"src":"4931:50:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_TransferHelperItemsWithRecipient_$531_calldata_ptr","typeString":"struct TransferHelperItemsWithRecipient"},"typeName":{"id":153,"nodeType":"UserDefinedTypeName","pathNode":{"id":152,"name":"TransferHelperItemsWithRecipient","nodeType":"IdentifierPath","referencedDeclaration":531,"src":"4931:32:0"},"referencedDeclaration":531,"src":"4931:32:0","typeDescriptions":{"typeIdentifier":"t_struct$_TransferHelperItemsWithRecipient_$531_storage_ptr","typeString":"struct TransferHelperItemsWithRecipient"}},"visibility":"internal"}],"id":158,"initialValue":{"baseExpression":{"id":155,"name":"transfers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":102,"src":"4984:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TransferHelperItemsWithRecipient_$531_calldata_ptr_$dyn_calldata_ptr","typeString":"struct TransferHelperItemsWithRecipient calldata[] calldata"}},"id":157,"indexExpression":{"id":156,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":143,"src":"5015:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4984:50:0","typeDescriptions":{"typeIdentifier":"t_struct$_TransferHelperItemsWithRecipient_$531_calldata_ptr","typeString":"struct TransferHelperItemsWithRecipient calldata"}},"nodeType":"VariableDeclarationStatement","src":"4931:103:0"},{"expression":{"id":163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":159,"name":"sumOfItemsAcrossAllTransfers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":140,"src":"5133:28:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"expression":{"expression":{"id":160,"name":"transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":154,"src":"5165:8:0","typeDescriptions":{"typeIdentifier":"t_struct$_TransferHelperItemsWithRecipient_$531_calldata_ptr","typeString":"struct TransferHelperItemsWithRecipient calldata"}},"id":161,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"items","nodeType":"MemberAccess","referencedDeclaration":526,"src":"5165:14:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TransferHelperItem_$522_calldata_ptr_$dyn_calldata_ptr","typeString":"struct TransferHelperItem calldata[] calldata"}},"id":162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"5165:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5133:53:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":164,"nodeType":"ExpressionStatement","src":"5133:53:0"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":148,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":146,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":143,"src":"4836:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":147,"name":"numTransfers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":108,"src":"4840:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4836:16:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":166,"initializationExpression":{"assignments":[143],"declarations":[{"constant":false,"id":143,"mutability":"mutable","name":"i","nameLocation":"4829:1:0","nodeType":"VariableDeclaration","scope":166,"src":"4821:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":142,"name":"uint256","nodeType":"ElementaryTypeName","src":"4821:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":145,"initialValue":{"hexValue":"30","id":144,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4833:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"4821:13:0"},"loopExpression":{"expression":{"id":150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"4854:3:0","subExpression":{"id":149,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":143,"src":"4856:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":151,"nodeType":"ExpressionStatement","src":"4854:3:0"},"nodeType":"ForStatement","src":"4816:385:0"}]},{"assignments":[172],"declarations":[{"constant":false,"id":172,"mutability":"mutable","name":"conduitTransfers","nameLocation":"5361:16:0","nodeType":"VariableDeclaration","scope":386,"src":"5336:41:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ConduitTransfer_$495_memory_ptr_$dyn_memory_ptr","typeString":"struct ConduitTransfer[]"},"typeName":{"baseType":{"id":170,"nodeType":"UserDefinedTypeName","pathNode":{"id":169,"name":"ConduitTransfer","nodeType":"IdentifierPath","referencedDeclaration":495,"src":"5336:15:0"},"referencedDeclaration":495,"src":"5336:15:0","typeDescriptions":{"typeIdentifier":"t_struct$_ConduitTransfer_$495_storage_ptr","typeString":"struct ConduitTransfer"}},"id":171,"nodeType":"ArrayTypeName","src":"5336:17:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ConduitTransfer_$495_storage_$dyn_storage_ptr","typeString":"struct ConduitTransfer[]"}},"visibility":"internal"}],"id":179,"initialValue":{"arguments":[{"id":177,"name":"sumOfItemsAcrossAllTransfers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":140,"src":"5415:28:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":176,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"5380:21:0","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_ConduitTransfer_$495_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (struct ConduitTransfer memory[] memory)"},"typeName":{"baseType":{"id":174,"nodeType":"UserDefinedTypeName","pathNode":{"id":173,"name":"ConduitTransfer","nodeType":"IdentifierPath","referencedDeclaration":495,"src":"5384:15:0"},"referencedDeclaration":495,"src":"5384:15:0","typeDescriptions":{"typeIdentifier":"t_struct$_ConduitTransfer_$495_storage_ptr","typeString":"struct ConduitTransfer"}},"id":175,"nodeType":"ArrayTypeName","src":"5384:17:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ConduitTransfer_$495_storage_$dyn_storage_ptr","typeString":"struct ConduitTransfer[]"}}},"id":178,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5380:73:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ConduitTransfer_$495_memory_ptr_$dyn_memory_ptr","typeString":"struct ConduitTransfer memory[] memory"}},"nodeType":"VariableDeclarationStatement","src":"5336:117:0"},{"assignments":[181],"declarations":[{"constant":false,"id":181,"mutability":"mutable","name":"itemIndex","nameLocation":"5550:9:0","nodeType":"VariableDeclaration","scope":386,"src":"5542:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":180,"name":"uint256","nodeType":"ElementaryTypeName","src":"5542:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":182,"nodeType":"VariableDeclarationStatement","src":"5542:17:0"},{"id":307,"nodeType":"UncheckedBlock","src":"5647:2856:0","statements":[{"body":{"id":305,"nodeType":"Block","src":"5757:2736:0","statements":[{"assignments":[195],"declarations":[{"constant":false,"id":195,"mutability":"mutable","name":"transfer","nameLocation":"5871:8:0","nodeType":"VariableDeclaration","scope":305,"src":"5829:50:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_TransferHelperItemsWithRecipient_$531_calldata_ptr","typeString":"struct TransferHelperItemsWithRecipient"},"typeName":{"id":194,"nodeType":"UserDefinedTypeName","pathNode":{"id":193,"name":"TransferHelperItemsWithRecipient","nodeType":"IdentifierPath","referencedDeclaration":531,"src":"5829:32:0"},"referencedDeclaration":531,"src":"5829:32:0","typeDescriptions":{"typeIdentifier":"t_struct$_TransferHelperItemsWithRecipient_$531_storage_ptr","typeString":"struct TransferHelperItemsWithRecipient"}},"visibility":"internal"}],"id":199,"initialValue":{"baseExpression":{"id":196,"name":"transfers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":102,"src":"5882:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TransferHelperItemsWithRecipient_$531_calldata_ptr_$dyn_calldata_ptr","typeString":"struct TransferHelperItemsWithRecipient calldata[] calldata"}},"id":198,"indexExpression":{"id":197,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":184,"src":"5913:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5882:50:0","typeDescriptions":{"typeIdentifier":"t_struct$_TransferHelperItemsWithRecipient_$531_calldata_ptr","typeString":"struct TransferHelperItemsWithRecipient calldata"}},"nodeType":"VariableDeclarationStatement","src":"5829:103:0"},{"assignments":[204],"declarations":[{"constant":false,"id":204,"mutability":"mutable","name":"transferItems","nameLocation":"6048:13:0","nodeType":"VariableDeclaration","scope":305,"src":"6018:43:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TransferHelperItem_$522_calldata_ptr_$dyn_calldata_ptr","typeString":"struct TransferHelperItem[]"},"typeName":{"baseType":{"id":202,"nodeType":"UserDefinedTypeName","pathNode":{"id":201,"name":"TransferHelperItem","nodeType":"IdentifierPath","referencedDeclaration":522,"src":"6018:18:0"},"referencedDeclaration":522,"src":"6018:18:0","typeDescriptions":{"typeIdentifier":"t_struct$_TransferHelperItem_$522_storage_ptr","typeString":"struct TransferHelperItem"}},"id":203,"nodeType":"ArrayTypeName","src":"6018:20:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TransferHelperItem_$522_storage_$dyn_storage_ptr","typeString":"struct TransferHelperItem[]"}},"visibility":"internal"}],"id":207,"initialValue":{"expression":{"id":205,"name":"transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":195,"src":"6064:8:0","typeDescriptions":{"typeIdentifier":"t_struct$_TransferHelperItemsWithRecipient_$531_calldata_ptr","typeString":"struct TransferHelperItemsWithRecipient calldata"}},"id":206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"items","nodeType":"MemberAccess","referencedDeclaration":526,"src":"6064:14:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TransferHelperItem_$522_calldata_ptr_$dyn_calldata_ptr","typeString":"struct TransferHelperItem calldata[] calldata"}},"nodeType":"VariableDeclarationStatement","src":"6018:60:0"},{"expression":{"arguments":[{"expression":{"id":209,"name":"transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":195,"src":"6190:8:0","typeDescriptions":{"typeIdentifier":"t_struct$_TransferHelperItemsWithRecipient_$531_calldata_ptr","typeString":"struct TransferHelperItemsWithRecipient calldata"}},"id":210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"recipient","nodeType":"MemberAccess","referencedDeclaration":528,"src":"6190:18:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":208,"name":"_checkRecipientIsNotZeroAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":469,"src":"6158:31:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":211,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6158:51:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":212,"nodeType":"ExpressionStatement","src":"6158:51:0"},{"assignments":[214],"declarations":[{"constant":false,"id":214,"mutability":"mutable","name":"callERC721Receiver","nameLocation":"6367:18:0","nodeType":"VariableDeclaration","scope":305,"src":"6362:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":213,"name":"bool","nodeType":"ElementaryTypeName","src":"6362:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":224,"initialValue":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":215,"name":"transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":195,"src":"6388:8:0","typeDescriptions":{"typeIdentifier":"t_struct$_TransferHelperItemsWithRecipient_$531_calldata_ptr","typeString":"struct TransferHelperItemsWithRecipient calldata"}},"id":216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"validateERC721Receiver","nodeType":"MemberAccess","referencedDeclaration":530,"src":"6388:31:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":222,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"expression":{"id":217,"name":"transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":195,"src":"6443:8:0","typeDescriptions":{"typeIdentifier":"t_struct$_TransferHelperItemsWithRecipient_$531_calldata_ptr","typeString":"struct TransferHelperItemsWithRecipient calldata"}},"id":218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"recipient","nodeType":"MemberAccess","referencedDeclaration":528,"src":"6443:18:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"code","nodeType":"MemberAccess","src":"6443:23:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"6443:30:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":221,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6477:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6443:35:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6388:90:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"6362:116:0"},{"assignments":[226],"declarations":[{"constant":false,"id":226,"mutability":"mutable","name":"numItemsInTransfer","nameLocation":"6614:18:0","nodeType":"VariableDeclaration","scope":305,"src":"6606:26:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":225,"name":"uint256","nodeType":"ElementaryTypeName","src":"6606:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":229,"initialValue":{"expression":{"id":227,"name":"transferItems","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":204,"src":"6635:13:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TransferHelperItem_$522_calldata_ptr_$dyn_calldata_ptr","typeString":"struct TransferHelperItem calldata[] calldata"}},"id":228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"6635:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6606:49:0"},{"body":{"id":303,"nodeType":"Block","src":"6843:1636:0","statements":[{"assignments":[242],"declarations":[{"constant":false,"id":242,"mutability":"mutable","name":"item","nameLocation":"6953:4:0","nodeType":"VariableDeclaration","scope":303,"src":"6925:32:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_TransferHelperItem_$522_calldata_ptr","typeString":"struct TransferHelperItem"},"typeName":{"id":241,"nodeType":"UserDefinedTypeName","pathNode":{"id":240,"name":"TransferHelperItem","nodeType":"IdentifierPath","referencedDeclaration":522,"src":"6925:18:0"},"referencedDeclaration":522,"src":"6925:18:0","typeDescriptions":{"typeIdentifier":"t_struct$_TransferHelperItem_$522_storage_ptr","typeString":"struct TransferHelperItem"}},"visibility":"internal"}],"id":246,"initialValue":{"baseExpression":{"id":243,"name":"transferItems","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":204,"src":"6960:13:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TransferHelperItem_$522_calldata_ptr_$dyn_calldata_ptr","typeString":"struct TransferHelperItem calldata[] calldata"}},"id":245,"indexExpression":{"id":244,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":231,"src":"6974:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6960:16:0","typeDescriptions":{"typeIdentifier":"t_struct$_TransferHelperItem_$522_calldata_ptr","typeString":"struct TransferHelperItem calldata"}},"nodeType":"VariableDeclarationStatement","src":"6925:51:0"},{"condition":{"commonType":{"typeIdentifier":"t_enum$_ConduitItemType_$477","typeString":"enum ConduitItemType"},"id":251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":247,"name":"item","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":242,"src":"7003:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_TransferHelperItem_$522_calldata_ptr","typeString":"struct TransferHelperItem calldata"}},"id":248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"itemType","nodeType":"MemberAccess","referencedDeclaration":515,"src":"7003:13:0","typeDescriptions":{"typeIdentifier":"t_enum$_ConduitItemType_$477","typeString":"enum ConduitItemType"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":249,"name":"ConduitItemType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":477,"src":"7020:15:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_ConduitItemType_$477_$","typeString":"type(enum ConduitItemType)"}},"id":250,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"ERC20","nodeType":"MemberAccess","referencedDeclaration":474,"src":"7020:21:0","typeDescriptions":{"typeIdentifier":"t_enum$_ConduitItemType_$477","typeString":"enum ConduitItemType"}},"src":"7003:38:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":262,"nodeType":"IfStatement","src":"6999:284:0","trueBody":{"id":261,"nodeType":"Block","src":"7043:240:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":252,"name":"item","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":242,"src":"7151:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_TransferHelperItem_$522_calldata_ptr","typeString":"struct TransferHelperItem calldata"}},"id":253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"identifier","nodeType":"MemberAccess","referencedDeclaration":519,"src":"7151:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":254,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7170:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7151:20:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":260,"nodeType":"IfStatement","src":"7147:114:0","trueBody":{"id":259,"nodeType":"Block","src":"7173:88:0","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":256,"name":"InvalidERC20Identifier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":868,"src":"7210:22:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":257,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7210:24:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":258,"nodeType":"RevertStatement","src":"7203:31:0"}]}}]}},{"condition":{"commonType":{"typeIdentifier":"t_enum$_ConduitItemType_$477","typeString":"enum ConduitItemType"},"id":267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":263,"name":"item","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":242,"src":"7420:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_TransferHelperItem_$522_calldata_ptr","typeString":"struct TransferHelperItem calldata"}},"id":264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"itemType","nodeType":"MemberAccess","referencedDeclaration":515,"src":"7420:13:0","typeDescriptions":{"typeIdentifier":"t_enum$_ConduitItemType_$477","typeString":"enum ConduitItemType"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":265,"name":"ConduitItemType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":477,"src":"7437:15:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_ConduitItemType_$477_$","typeString":"type(enum ConduitItemType)"}},"id":266,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"ERC721","nodeType":"MemberAccess","referencedDeclaration":475,"src":"7437:22:0","typeDescriptions":{"typeIdentifier":"t_enum$_ConduitItemType_$477","typeString":"enum ConduitItemType"}},"src":"7420:39:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":280,"nodeType":"IfStatement","src":"7416:502:0","trueBody":{"id":279,"nodeType":"Block","src":"7461:457:0","statements":[{"condition":{"id":268,"name":"callERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":214,"src":"7491:18:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":278,"nodeType":"IfStatement","src":"7487:409:0","trueBody":{"id":277,"nodeType":"Block","src":"7511:385:0","statements":[{"expression":{"arguments":[{"id":270,"name":"conduit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":113,"src":"7731:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":271,"name":"transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":195,"src":"7772:8:0","typeDescriptions":{"typeIdentifier":"t_struct$_TransferHelperItemsWithRecipient_$531_calldata_ptr","typeString":"struct TransferHelperItemsWithRecipient calldata"}},"id":272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"recipient","nodeType":"MemberAccess","referencedDeclaration":528,"src":"7772:18:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":273,"name":"item","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":242,"src":"7824:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_TransferHelperItem_$522_calldata_ptr","typeString":"struct TransferHelperItem calldata"}},"id":274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"identifier","nodeType":"MemberAccess","referencedDeclaration":519,"src":"7824:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":269,"name":"_checkERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":451,"src":"7677:20:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":275,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7677:192:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":276,"nodeType":"ExpressionStatement","src":"7677:192:0"}]}}]}},{"expression":{"id":298,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":281,"name":"conduitTransfers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":172,"src":"8053:16:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ConduitTransfer_$495_memory_ptr_$dyn_memory_ptr","typeString":"struct ConduitTransfer memory[] memory"}},"id":283,"indexExpression":{"id":282,"name":"itemIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":181,"src":"8070:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8053:27:0","typeDescriptions":{"typeIdentifier":"t_struct$_ConduitTransfer_$495_memory_ptr","typeString":"struct ConduitTransfer memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":285,"name":"item","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":242,"src":"8124:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_TransferHelperItem_$522_calldata_ptr","typeString":"struct TransferHelperItem calldata"}},"id":286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"itemType","nodeType":"MemberAccess","referencedDeclaration":515,"src":"8124:13:0","typeDescriptions":{"typeIdentifier":"t_enum$_ConduitItemType_$477","typeString":"enum ConduitItemType"}},{"expression":{"id":287,"name":"item","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":242,"src":"8163:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_TransferHelperItem_$522_calldata_ptr","typeString":"struct TransferHelperItem calldata"}},"id":288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"token","nodeType":"MemberAccess","referencedDeclaration":517,"src":"8163:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":289,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"8199:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":290,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"8199:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":291,"name":"transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":195,"src":"8235:8:0","typeDescriptions":{"typeIdentifier":"t_struct$_TransferHelperItemsWithRecipient_$531_calldata_ptr","typeString":"struct TransferHelperItemsWithRecipient calldata"}},"id":292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"recipient","nodeType":"MemberAccess","referencedDeclaration":528,"src":"8235:18:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":293,"name":"item","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":242,"src":"8279:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_TransferHelperItem_$522_calldata_ptr","typeString":"struct TransferHelperItem calldata"}},"id":294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"identifier","nodeType":"MemberAccess","referencedDeclaration":519,"src":"8279:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":295,"name":"item","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":242,"src":"8320:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_TransferHelperItem_$522_calldata_ptr","typeString":"struct TransferHelperItem calldata"}},"id":296,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":521,"src":"8320:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_ConduitItemType_$477","typeString":"enum ConduitItemType"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":284,"name":"ConduitTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":495,"src":"8083:15:0","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_ConduitTransfer_$495_storage_ptr_$","typeString":"type(struct ConduitTransfer storage pointer)"}},"id":297,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8083:270:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ConduitTransfer_$495_memory_ptr","typeString":"struct ConduitTransfer memory"}},"src":"8053:300:0","typeDescriptions":{"typeIdentifier":"t_struct$_ConduitTransfer_$495_memory_ptr","typeString":"struct ConduitTransfer memory"}},"id":299,"nodeType":"ExpressionStatement","src":"8053:300:0"},{"expression":{"id":301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"8449:11:0","subExpression":{"id":300,"name":"itemIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":181,"src":"8451:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":302,"nodeType":"ExpressionStatement","src":"8449:11:0"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":234,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":231,"src":"6814:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":235,"name":"numItemsInTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":226,"src":"6818:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6814:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":304,"initializationExpression":{"assignments":[231],"declarations":[{"constant":false,"id":231,"mutability":"mutable","name":"j","nameLocation":"6807:1:0","nodeType":"VariableDeclaration","scope":304,"src":"6799:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":230,"name":"uint256","nodeType":"ElementaryTypeName","src":"6799:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":233,"initialValue":{"hexValue":"30","id":232,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6811:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"6799:13:0"},"loopExpression":{"expression":{"id":238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"6838:3:0","subExpression":{"id":237,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":231,"src":"6840:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":239,"nodeType":"ExpressionStatement","src":"6838:3:0"},"nodeType":"ForStatement","src":"6794:1685:0"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":189,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":187,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":184,"src":"5734:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":188,"name":"numTransfers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":108,"src":"5738:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5734:16:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":306,"initializationExpression":{"assignments":[184],"declarations":[{"constant":false,"id":184,"mutability":"mutable","name":"i","nameLocation":"5727:1:0","nodeType":"VariableDeclaration","scope":306,"src":"5719:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":183,"name":"uint256","nodeType":"ElementaryTypeName","src":"5719:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":186,"initialValue":{"hexValue":"30","id":185,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5731:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5719:13:0"},"loopExpression":{"expression":{"id":191,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"5752:3:0","subExpression":{"id":190,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":184,"src":"5754:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":192,"nodeType":"ExpressionStatement","src":"5752:3:0"},"nodeType":"ForStatement","src":"5714:2779:0"}]},{"clauses":[{"block":{"id":329,"nodeType":"Block","src":"8707:395:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":317,"name":"conduitMagicValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":315,"src":"8846:17:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"expression":{"id":318,"name":"ConduitInterface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":809,"src":"8867:16:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ConduitInterface_$809_$","typeString":"type(contract ConduitInterface)"}},"id":319,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"execute","nodeType":"MemberAccess","referencedDeclaration":776,"src":"8867:24:0","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_array$_t_struct$_ConduitTransfer_$495_calldata_ptr_$dyn_calldata_ptr_$returns$_t_bytes4_$","typeString":"function ConduitInterface.execute(struct ConduitTransfer calldata[] calldata) returns (bytes4)"}},"id":320,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"8867:33:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"8846:54:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":328,"nodeType":"IfStatement","src":"8842:250:0","trueBody":{"id":327,"nodeType":"Block","src":"8902:190:0","statements":[{"errorCall":{"arguments":[{"id":323,"name":"conduitKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":104,"src":"9057:10:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":324,"name":"conduit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":113,"src":"9069:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":322,"name":"InvalidConduit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":878,"src":"9042:14:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address) pure"}},"id":325,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9042:35:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":326,"nodeType":"RevertStatement","src":"9035:42:0"}]}}]},"errorName":"","id":330,"nodeType":"TryCatchClause","parameters":{"id":316,"nodeType":"ParameterList","parameters":[{"constant":false,"id":315,"mutability":"mutable","name":"conduitMagicValue","nameLocation":"8679:17:0","nodeType":"VariableDeclaration","scope":330,"src":"8672:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":314,"name":"bytes4","nodeType":"ElementaryTypeName","src":"8672:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"8658:48:0"},"src":"8650:452:0"},{"block":{"id":340,"nodeType":"Block","src":"9137:220:0","statements":[{"errorCall":{"arguments":[{"id":335,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":332,"src":"9318:6:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":336,"name":"conduitKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":104,"src":"9326:10:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":337,"name":"conduit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":113,"src":"9338:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":334,"name":"ConduitErrorRevertString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":887,"src":"9293:24:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_string_memory_ptr_$_t_bytes32_$_t_address_$returns$__$","typeString":"function (string memory,bytes32,address) pure"}},"id":338,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9293:53:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":339,"nodeType":"RevertStatement","src":"9286:60:0"}]},"errorName":"Error","id":341,"nodeType":"TryCatchClause","parameters":{"id":333,"nodeType":"ParameterList","parameters":[{"constant":false,"id":332,"mutability":"mutable","name":"reason","nameLocation":"9129:6:0","nodeType":"VariableDeclaration","scope":341,"src":"9115:20:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":331,"name":"string","nodeType":"ElementaryTypeName","src":"9115:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"9114:22:0"},"src":"9103:254:0"},{"block":{"id":383,"nodeType":"Block","src":"9384:2098:0","statements":[{"assignments":[346],"declarations":[{"constant":false,"id":346,"mutability":"mutable","name":"customErrorSelector","nameLocation":"10036:19:0","nodeType":"VariableDeclaration","scope":383,"src":"10029:26:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":345,"name":"bytes4","nodeType":"ElementaryTypeName","src":"10029:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"id":351,"initialValue":{"arguments":[{"hexValue":"30786666666666666666","id":349,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10065:10:0","typeDescriptions":{"typeIdentifier":"t_rational_4294967295_by_1","typeString":"int_const 4294967295"},"value":"0xffffffff"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_4294967295_by_1","typeString":"int_const 4294967295"}],"id":348,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10058:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes4_$","typeString":"type(bytes4)"},"typeName":{"id":347,"name":"bytes4","nodeType":"ElementaryTypeName","src":"10058:6:0","typeDescriptions":{}}},"id":350,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10058:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"VariableDeclarationStatement","src":"10029:47:0"},{"AST":{"nodeType":"YulBlock","src":"10180:276:0","statements":[{"nodeType":"YulAssignment","src":"10277:165:0","value":{"arguments":[{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"10335:4:0"},{"kind":"number","nodeType":"YulLiteral","src":"10341:4:0","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10331:3:0"},"nodeType":"YulFunctionCall","src":"10331:15:0"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10325:5:0"},"nodeType":"YulFunctionCall","src":"10325:22:0"},{"name":"customErrorSelector","nodeType":"YulIdentifier","src":"10405:19:0"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10300:3:0"},"nodeType":"YulFunctionCall","src":"10300:142:0"},"variableNames":[{"name":"customErrorSelector","nodeType":"YulIdentifier","src":"10277:19:0"}]}]},"evmVersion":"london","externalReferences":[{"declaration":346,"isOffset":false,"isSlot":false,"src":"10277:19:0","valueSize":1},{"declaration":346,"isOffset":false,"isSlot":false,"src":"10405:19:0","valueSize":1},{"declaration":343,"isOffset":false,"isSlot":false,"src":"10335:4:0","valueSize":1}],"id":352,"nodeType":"InlineAssembly","src":"10171:285:0"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":361,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":353,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":343,"src":"10651:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"10651:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"34","id":355,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10666:1:0","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10651:16:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":357,"name":"customErrorSelector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":346,"src":"10687:19:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":358,"name":"InvalidItemType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":833,"src":"10710:15:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":359,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"10710:24:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"10687:47:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"10651:83:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":372,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":367,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":364,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":343,"src":"10936:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"10936:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"3336","id":366,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10951:2:0","typeDescriptions":{"typeIdentifier":"t_rational_36_by_1","typeString":"int_const 36"},"value":"36"},"src":"10936:17:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":371,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":368,"name":"customErrorSelector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":346,"src":"10973:19:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":369,"name":"InvalidERC721TransferAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":838,"src":"10996:27:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":370,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"10996:36:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"10973:59:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"10936:96:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":375,"nodeType":"IfStatement","src":"10915:292:0","trueBody":{"id":374,"nodeType":"Block","src":"11047:160:0","statements":[{"AST":{"nodeType":"YulBlock","src":"11124:69:0","statements":[{"expression":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"11157:4:0"},{"kind":"number","nodeType":"YulLiteral","src":"11163:4:0","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11153:3:0"},"nodeType":"YulFunctionCall","src":"11153:15:0"},{"kind":"number","nodeType":"YulLiteral","src":"11170:4:0","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11146:6:0"},"nodeType":"YulFunctionCall","src":"11146:29:0"},"nodeType":"YulExpressionStatement","src":"11146:29:0"}]},"evmVersion":"london","externalReferences":[{"declaration":343,"isOffset":false,"isSlot":false,"src":"11157:4:0","valueSize":1}],"id":373,"nodeType":"InlineAssembly","src":"11115:78:0"}]}},"id":376,"nodeType":"IfStatement","src":"10630:577:0","trueBody":{"id":363,"nodeType":"Block","src":"10749:160:0","statements":[{"AST":{"nodeType":"YulBlock","src":"10826:69:0","statements":[{"expression":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"10859:4:0"},{"kind":"number","nodeType":"YulLiteral","src":"10865:4:0","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10855:3:0"},"nodeType":"YulFunctionCall","src":"10855:15:0"},{"kind":"number","nodeType":"YulLiteral","src":"10872:4:0","type":"","value":"0x04"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10848:6:0"},"nodeType":"YulFunctionCall","src":"10848:29:0"},"nodeType":"YulExpressionStatement","src":"10848:29:0"}]},"evmVersion":"london","externalReferences":[{"declaration":343,"isOffset":false,"isSlot":false,"src":"10859:4:0","valueSize":1}],"id":362,"nodeType":"InlineAssembly","src":"10817:78:0"}]}},{"errorCall":{"arguments":[{"id":378,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":343,"src":"11445:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":379,"name":"conduitKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":104,"src":"11451:10:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":380,"name":"conduit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":113,"src":"11463:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":377,"name":"ConduitErrorRevertBytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":896,"src":"11421:23:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes_memory_ptr_$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes memory,bytes32,address) pure"}},"id":381,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11421:50:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":382,"nodeType":"RevertStatement","src":"11414:57:0"}]},"errorName":"","id":384,"nodeType":"TryCatchClause","parameters":{"id":344,"nodeType":"ParameterList","parameters":[{"constant":false,"id":343,"mutability":"mutable","name":"data","nameLocation":"9378:4:0","nodeType":"VariableDeclaration","scope":384,"src":"9365:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":342,"name":"bytes","nodeType":"ElementaryTypeName","src":"9365:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"9364:19:0"},"src":"9358:2124:0"}],"externalCall":{"arguments":[{"id":312,"name":"conduitTransfers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":172,"src":"8632:16:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ConduitTransfer_$495_memory_ptr_$dyn_memory_ptr","typeString":"struct ConduitTransfer memory[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_struct$_ConduitTransfer_$495_memory_ptr_$dyn_memory_ptr","typeString":"struct ConduitTransfer memory[] memory"}],"expression":{"arguments":[{"id":309,"name":"conduit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":113,"src":"8615:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":308,"name":"ConduitInterface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":809,"src":"8598:16:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ConduitInterface_$809_$","typeString":"type(contract ConduitInterface)"}},"id":310,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8598:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ConduitInterface_$809","typeString":"contract ConduitInterface"}},"id":311,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"execute","nodeType":"MemberAccess","referencedDeclaration":776,"src":"8598:33:0","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_array$_t_struct$_ConduitTransfer_$495_memory_ptr_$dyn_memory_ptr_$returns$_t_bytes4_$","typeString":"function (struct ConduitTransfer memory[] memory) external returns (bytes4)"}},"id":313,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8598:51:0","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":385,"nodeType":"TryStatement","src":"8594:2888:0"}]},"documentation":{"id":98,"nodeType":"StructuredDocumentation","src":"3387:339:0","text":" @notice Perform multiple transfers to specified recipients via the\n         conduit derived from the provided conduit key.\n @param transfers  The items to transfer.\n @param conduitKey The conduit key referring to the conduit through\n                   which the bulk transfer should occur."},"id":387,"implemented":true,"kind":"function","modifiers":[],"name":"_performTransfersWithConduit","nameLocation":"3740:28:0","nodeType":"FunctionDefinition","parameters":{"id":105,"nodeType":"ParameterList","parameters":[{"constant":false,"id":102,"mutability":"mutable","name":"transfers","nameLocation":"3822:9:0","nodeType":"VariableDeclaration","scope":387,"src":"3778:53:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TransferHelperItemsWithRecipient_$531_calldata_ptr_$dyn_calldata_ptr","typeString":"struct TransferHelperItemsWithRecipient[]"},"typeName":{"baseType":{"id":100,"nodeType":"UserDefinedTypeName","pathNode":{"id":99,"name":"TransferHelperItemsWithRecipient","nodeType":"IdentifierPath","referencedDeclaration":531,"src":"3778:32:0"},"referencedDeclaration":531,"src":"3778:32:0","typeDescriptions":{"typeIdentifier":"t_struct$_TransferHelperItemsWithRecipient_$531_storage_ptr","typeString":"struct TransferHelperItemsWithRecipient"}},"id":101,"nodeType":"ArrayTypeName","src":"3778:34:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TransferHelperItemsWithRecipient_$531_storage_$dyn_storage_ptr","typeString":"struct TransferHelperItemsWithRecipient[]"}},"visibility":"internal"},{"constant":false,"id":104,"mutability":"mutable","name":"conduitKey","nameLocation":"3849:10:0","nodeType":"VariableDeclaration","scope":387,"src":"3841:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":103,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3841:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3768:97:0"},"returnParameters":{"id":106,"nodeType":"ParameterList","parameters":[],"src":"3875:0:0"},"scope":470,"src":"3731:7757:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":450,"nodeType":"Block","src":"12537:1111:0","statements":[{"clauses":[{"block":{"id":421,"nodeType":"Block","src":"12810:303:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":410,"name":"selector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":408,"src":"12888:8:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"expression":{"id":411,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":827,"src":"12900:15:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$827_$","typeString":"type(contract IERC721Receiver)"}},"id":412,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":826,"src":"12900:32:0","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC721Receiver.onERC721Received(address,address,uint256,bytes calldata) returns (bytes4)"}},"id":413,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"12900:41:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"12888:53:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":420,"nodeType":"IfStatement","src":"12884:219:0","trueBody":{"id":419,"nodeType":"Block","src":"12943:160:0","statements":[{"errorCall":{"arguments":[{"id":416,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":392,"src":"13078:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":415,"name":"InvalidERC721Recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":843,"src":"13055:22:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":417,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13055:33:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":418,"nodeType":"RevertStatement","src":"13048:40:0"}]}}]},"errorName":"","id":422,"nodeType":"TryCatchClause","parameters":{"id":409,"nodeType":"ParameterList","parameters":[{"constant":false,"id":408,"mutability":"mutable","name":"selector","nameLocation":"12800:8:0","nodeType":"VariableDeclaration","scope":422,"src":"12793:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":407,"name":"bytes4","nodeType":"ElementaryTypeName","src":"12793:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"12792:17:0"},"src":"12784:329:0"},{"block":{"id":434,"nodeType":"Block","src":"13140:232:0","statements":[{"errorCall":{"arguments":[{"id":427,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":424,"src":"13263:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":428,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":392,"src":"13285:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":429,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"13312:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"13312:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":431,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":394,"src":"13340:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":426,"name":"ERC721ReceiverErrorRevertBytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":854,"src":"13215:30:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes_memory_ptr_$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (bytes memory,address,address,uint256) pure"}},"id":432,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13215:146:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":433,"nodeType":"RevertStatement","src":"13208:153:0"}]},"errorName":"","id":435,"nodeType":"TryCatchClause","parameters":{"id":425,"nodeType":"ParameterList","parameters":[{"constant":false,"id":424,"mutability":"mutable","name":"data","nameLocation":"13134:4:0","nodeType":"VariableDeclaration","scope":435,"src":"13121:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":423,"name":"bytes","nodeType":"ElementaryTypeName","src":"13121:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"13120:19:0"},"src":"13114:258:0"},{"block":{"id":447,"nodeType":"Block","src":"13407:235:0","statements":[{"errorCall":{"arguments":[{"id":440,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":437,"src":"13531:6:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":441,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":392,"src":"13555:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":442,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"13582:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"13582:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":444,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":394,"src":"13610:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":439,"name":"ERC721ReceiverErrorRevertString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":865,"src":"13482:31:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_string_memory_ptr_$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (string memory,address,address,uint256) pure"}},"id":445,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13482:149:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":446,"nodeType":"RevertStatement","src":"13475:156:0"}]},"errorName":"Error","id":448,"nodeType":"TryCatchClause","parameters":{"id":438,"nodeType":"ParameterList","parameters":[{"constant":false,"id":437,"mutability":"mutable","name":"reason","nameLocation":"13399:6:0","nodeType":"VariableDeclaration","scope":448,"src":"13385:20:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":436,"name":"string","nodeType":"ElementaryTypeName","src":"13385:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"13384:22:0"},"src":"13373:269:0"}],"externalCall":{"arguments":[{"id":401,"name":"conduit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":390,"src":"12681:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":402,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"12706:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":403,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"12706:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":404,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":394,"src":"12734:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":405,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12759:2:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"arguments":[{"id":398,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":392,"src":"12636:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":397,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":827,"src":"12620:15:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$827_$","typeString":"type(contract IERC721Receiver)"}},"id":399,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12620:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC721Receiver_$827","typeString":"contract IERC721Receiver"}},"id":400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":826,"src":"12620:43:0","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,bytes memory) external returns (bytes4)"}},"id":406,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12620:155:0","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":449,"nodeType":"TryStatement","src":"12604:1038:0"}]},"documentation":{"id":388,"nodeType":"StructuredDocumentation","src":"11494:916:0","text":" @notice An internal function to check if a recipient address implements\n         onERC721Received for a given tokenId. Note that this check does\n         not adhere to the safe transfer specification and is only meant\n         to provide an additional layer of assurance that the recipient\n         can receive the tokens — any hooks or post-transfer checks will\n         fail and the caller will be the transfer helper rather than the\n         ERC721 contract. Note that the conduit is set as the operator, as\n         it will be the caller once the transfer is performed.\n @param conduit   The conduit to provide as the operator when calling\n                  onERC721Received.\n @param recipient The ERC721 recipient on which to call onERC721Received.\n @param tokenId   The ERC721 tokenId of the token being transferred."},"id":451,"implemented":true,"kind":"function","modifiers":[],"name":"_checkERC721Receiver","nameLocation":"12424:20:0","nodeType":"FunctionDefinition","parameters":{"id":395,"nodeType":"ParameterList","parameters":[{"constant":false,"id":390,"mutability":"mutable","name":"conduit","nameLocation":"12462:7:0","nodeType":"VariableDeclaration","scope":451,"src":"12454:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":389,"name":"address","nodeType":"ElementaryTypeName","src":"12454:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":392,"mutability":"mutable","name":"recipient","nameLocation":"12487:9:0","nodeType":"VariableDeclaration","scope":451,"src":"12479:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":391,"name":"address","nodeType":"ElementaryTypeName","src":"12479:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":394,"mutability":"mutable","name":"tokenId","nameLocation":"12514:7:0","nodeType":"VariableDeclaration","scope":451,"src":"12506:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":393,"name":"uint256","nodeType":"ElementaryTypeName","src":"12506:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12444:83:0"},"returnParameters":{"id":396,"nodeType":"ParameterList","parameters":[],"src":"12537:0:0"},"scope":470,"src":"12415:1233:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":468,"nodeType":"Block","src":"13932:165:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":462,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":457,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":454,"src":"14002:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"307830","id":460,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14023:3:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0x0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":459,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14015:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":458,"name":"address","nodeType":"ElementaryTypeName","src":"14015:7:0","typeDescriptions":{}}},"id":461,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14015:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"14002:25:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":467,"nodeType":"IfStatement","src":"13998:93:0","trueBody":{"id":466,"nodeType":"Block","src":"14029:62:0","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":463,"name":"RecipientCannotBeZeroAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":871,"src":"14050:28:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":464,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14050:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":465,"nodeType":"RevertStatement","src":"14043:37:0"}]}}]},"documentation":{"id":452,"nodeType":"StructuredDocumentation","src":"13654:199:0","text":" @notice An internal function that reverts if the passed-in recipient\n         is the zero address.\n @param recipient The recipient on which to perform the check."},"id":469,"implemented":true,"kind":"function","modifiers":[],"name":"_checkRecipientIsNotZeroAddress","nameLocation":"13867:31:0","nodeType":"FunctionDefinition","parameters":{"id":455,"nodeType":"ParameterList","parameters":[{"constant":false,"id":454,"mutability":"mutable","name":"recipient","nameLocation":"13907:9:0","nodeType":"VariableDeclaration","scope":469,"src":"13899:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":453,"name":"address","nodeType":"ElementaryTypeName","src":"13899:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"13898:19:0"},"returnParameters":{"id":456,"nodeType":"ParameterList","parameters":[],"src":"13932:0:0"},"scope":470,"src":"13858:239:0","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":471,"src":"1063:13036:0","usedErrors":[833,838,843,854,865,868,871,878,887,896]}],"src":"32:14068:0"}},"seaport-types/src/conduit/lib/ConduitEnums.sol":{"id":1,"ast":{"absolutePath":"seaport-types/src/conduit/lib/ConduitEnums.sol","exportedSymbols":{"ConduitItemType":[477]},"id":478,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":472,"literals":["solidity","^","0.8",".13"],"nodeType":"PragmaDirective","src":"32:24:1"},{"canonicalName":"ConduitItemType","id":477,"members":[{"id":473,"name":"NATIVE","nameLocation":"85:6:1","nodeType":"EnumValue","src":"85:6:1"},{"id":474,"name":"ERC20","nameLocation":"107:5:1","nodeType":"EnumValue","src":"107:5:1"},{"id":475,"name":"ERC721","nameLocation":"118:6:1","nodeType":"EnumValue","src":"118:6:1"},{"id":476,"name":"ERC1155","nameLocation":"130:7:1","nodeType":"EnumValue","src":"130:7:1"}],"name":"ConduitItemType","nameLocation":"63:15:1","nodeType":"EnumDefinition","src":"58:81:1"}],"src":"32:108:1"}},"seaport-types/src/conduit/lib/ConduitStructs.sol":{"id":2,"ast":{"absolutePath":"seaport-types/src/conduit/lib/ConduitStructs.sol","exportedSymbols":{"ConduitBatch1155Transfer":[508],"ConduitItemType":[477],"ConduitTransfer":[495]},"id":509,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":479,"literals":["solidity","^","0.8",".13"],"nodeType":"PragmaDirective","src":"32:24:2"},{"absolutePath":"seaport-types/src/conduit/lib/ConduitEnums.sol","file":"./ConduitEnums.sol","id":481,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":509,"sourceUnit":478,"src":"58:53:2","symbolAliases":[{"foreign":{"id":480,"name":"ConduitItemType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":477,"src":"67:15:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"canonicalName":"ConduitTransfer","id":495,"members":[{"constant":false,"id":484,"mutability":"mutable","name":"itemType","nameLocation":"312:8:2","nodeType":"VariableDeclaration","scope":495,"src":"296:24:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_ConduitItemType_$477","typeString":"enum ConduitItemType"},"typeName":{"id":483,"nodeType":"UserDefinedTypeName","pathNode":{"id":482,"name":"ConduitItemType","nodeType":"IdentifierPath","referencedDeclaration":477,"src":"296:15:2"},"referencedDeclaration":477,"src":"296:15:2","typeDescriptions":{"typeIdentifier":"t_enum$_ConduitItemType_$477","typeString":"enum ConduitItemType"}},"visibility":"internal"},{"constant":false,"id":486,"mutability":"mutable","name":"token","nameLocation":"334:5:2","nodeType":"VariableDeclaration","scope":495,"src":"326:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":485,"name":"address","nodeType":"ElementaryTypeName","src":"326:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":488,"mutability":"mutable","name":"from","nameLocation":"353:4:2","nodeType":"VariableDeclaration","scope":495,"src":"345:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":487,"name":"address","nodeType":"ElementaryTypeName","src":"345:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":490,"mutability":"mutable","name":"to","nameLocation":"371:2:2","nodeType":"VariableDeclaration","scope":495,"src":"363:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":489,"name":"address","nodeType":"ElementaryTypeName","src":"363:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":492,"mutability":"mutable","name":"identifier","nameLocation":"387:10:2","nodeType":"VariableDeclaration","scope":495,"src":"379:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":491,"name":"uint256","nodeType":"ElementaryTypeName","src":"379:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":494,"mutability":"mutable","name":"amount","nameLocation":"411:6:2","nodeType":"VariableDeclaration","scope":495,"src":"403:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":493,"name":"uint256","nodeType":"ElementaryTypeName","src":"403:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"ConduitTransfer","nameLocation":"274:15:2","nodeType":"StructDefinition","scope":509,"src":"267:153:2","visibility":"public"},{"canonicalName":"ConduitBatch1155Transfer","id":508,"members":[{"constant":false,"id":497,"mutability":"mutable","name":"token","nameLocation":"658:5:2","nodeType":"VariableDeclaration","scope":508,"src":"650:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":496,"name":"address","nodeType":"ElementaryTypeName","src":"650:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":499,"mutability":"mutable","name":"from","nameLocation":"677:4:2","nodeType":"VariableDeclaration","scope":508,"src":"669:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":498,"name":"address","nodeType":"ElementaryTypeName","src":"669:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":501,"mutability":"mutable","name":"to","nameLocation":"695:2:2","nodeType":"VariableDeclaration","scope":508,"src":"687:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":500,"name":"address","nodeType":"ElementaryTypeName","src":"687:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":504,"mutability":"mutable","name":"ids","nameLocation":"713:3:2","nodeType":"VariableDeclaration","scope":508,"src":"703:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":502,"name":"uint256","nodeType":"ElementaryTypeName","src":"703:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":503,"nodeType":"ArrayTypeName","src":"703:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":507,"mutability":"mutable","name":"amounts","nameLocation":"732:7:2","nodeType":"VariableDeclaration","scope":508,"src":"722:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":505,"name":"uint256","nodeType":"ElementaryTypeName","src":"722:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":506,"nodeType":"ArrayTypeName","src":"722:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"name":"ConduitBatch1155Transfer","nameLocation":"619:24:2","nodeType":"StructDefinition","scope":509,"src":"612:130:2","visibility":"public"}],"src":"32:711:2"}},"seaport-types/src/helpers/TransferHelperStructs.sol":{"id":3,"ast":{"absolutePath":"seaport-types/src/helpers/TransferHelperStructs.sol","exportedSymbols":{"ConduitItemType":[477],"TransferHelperItem":[522],"TransferHelperItemsWithRecipient":[531]},"id":532,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":510,"literals":["solidity","^","0.8",".13"],"nodeType":"PragmaDirective","src":"32:24:3"},{"absolutePath":"seaport-types/src/conduit/lib/ConduitEnums.sol","file":"../conduit/lib/ConduitEnums.sol","id":512,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":532,"sourceUnit":478,"src":"58:66:3","symbolAliases":[{"foreign":{"id":511,"name":"ConduitItemType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":477,"src":"67:15:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"canonicalName":"TransferHelperItem","id":522,"members":[{"constant":false,"id":515,"mutability":"mutable","name":"itemType","nameLocation":"458:8:3","nodeType":"VariableDeclaration","scope":522,"src":"442:24:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_ConduitItemType_$477","typeString":"enum ConduitItemType"},"typeName":{"id":514,"nodeType":"UserDefinedTypeName","pathNode":{"id":513,"name":"ConduitItemType","nodeType":"IdentifierPath","referencedDeclaration":477,"src":"442:15:3"},"referencedDeclaration":477,"src":"442:15:3","typeDescriptions":{"typeIdentifier":"t_enum$_ConduitItemType_$477","typeString":"enum ConduitItemType"}},"visibility":"internal"},{"constant":false,"id":517,"mutability":"mutable","name":"token","nameLocation":"480:5:3","nodeType":"VariableDeclaration","scope":522,"src":"472:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":516,"name":"address","nodeType":"ElementaryTypeName","src":"472:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":519,"mutability":"mutable","name":"identifier","nameLocation":"499:10:3","nodeType":"VariableDeclaration","scope":522,"src":"491:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":518,"name":"uint256","nodeType":"ElementaryTypeName","src":"491:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":521,"mutability":"mutable","name":"amount","nameLocation":"523:6:3","nodeType":"VariableDeclaration","scope":522,"src":"515:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":520,"name":"uint256","nodeType":"ElementaryTypeName","src":"515:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"TransferHelperItem","nameLocation":"417:18:3","nodeType":"StructDefinition","scope":532,"src":"410:122:3","visibility":"public"},{"canonicalName":"TransferHelperItemsWithRecipient","id":531,"members":[{"constant":false,"id":526,"mutability":"mutable","name":"items","nameLocation":"856:5:3","nodeType":"VariableDeclaration","scope":531,"src":"835:26:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TransferHelperItem_$522_storage_$dyn_storage_ptr","typeString":"struct TransferHelperItem[]"},"typeName":{"baseType":{"id":524,"nodeType":"UserDefinedTypeName","pathNode":{"id":523,"name":"TransferHelperItem","nodeType":"IdentifierPath","referencedDeclaration":522,"src":"835:18:3"},"referencedDeclaration":522,"src":"835:18:3","typeDescriptions":{"typeIdentifier":"t_struct$_TransferHelperItem_$522_storage_ptr","typeString":"struct TransferHelperItem"}},"id":525,"nodeType":"ArrayTypeName","src":"835:20:3","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TransferHelperItem_$522_storage_$dyn_storage_ptr","typeString":"struct TransferHelperItem[]"}},"visibility":"internal"},{"constant":false,"id":528,"mutability":"mutable","name":"recipient","nameLocation":"875:9:3","nodeType":"VariableDeclaration","scope":531,"src":"867:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":527,"name":"address","nodeType":"ElementaryTypeName","src":"867:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":530,"mutability":"mutable","name":"validateERC721Receiver","nameLocation":"895:22:3","nodeType":"VariableDeclaration","scope":531,"src":"890:27:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":529,"name":"bool","nodeType":"ElementaryTypeName","src":"890:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"TransferHelperItemsWithRecipient","nameLocation":"796:32:3","nodeType":"StructDefinition","scope":532,"src":"789:131:3","visibility":"public"}],"src":"32:889:3"}},"seaport-types/src/interfaces/ConduitControllerInterface.sol":{"id":4,"ast":{"absolutePath":"seaport-types/src/interfaces/ConduitControllerInterface.sol","exportedSymbols":{"ConduitControllerInterface":[735]},"id":736,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":533,"literals":["solidity","^","0.8",".13"],"nodeType":"PragmaDirective","src":"32:24:4"},{"abstract":false,"baseContracts":[],"canonicalName":"ConduitControllerInterface","contractDependencies":[],"contractKind":"interface","documentation":{"id":534,"nodeType":"StructuredDocumentation","src":"58:208:4","text":" @title ConduitControllerInterface\n @author 0age\n @notice ConduitControllerInterface contains all external function interfaces,\n         structs, events, and errors for the conduit controller."},"fullyImplemented":false,"id":735,"linearizedBaseContracts":[735],"name":"ConduitControllerInterface","nameLocation":"277:26:4","nodeType":"ContractDefinition","nodes":[{"canonicalName":"ConduitControllerInterface.ConduitProperties","id":548,"members":[{"constant":false,"id":536,"mutability":"mutable","name":"key","nameLocation":"497:3:4","nodeType":"VariableDeclaration","scope":548,"src":"489:11:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":535,"name":"bytes32","nodeType":"ElementaryTypeName","src":"489:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":538,"mutability":"mutable","name":"owner","nameLocation":"518:5:4","nodeType":"VariableDeclaration","scope":548,"src":"510:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":537,"name":"address","nodeType":"ElementaryTypeName","src":"510:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":540,"mutability":"mutable","name":"potentialOwner","nameLocation":"541:14:4","nodeType":"VariableDeclaration","scope":548,"src":"533:22:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":539,"name":"address","nodeType":"ElementaryTypeName","src":"533:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":543,"mutability":"mutable","name":"channels","nameLocation":"575:8:4","nodeType":"VariableDeclaration","scope":548,"src":"565:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":541,"name":"address","nodeType":"ElementaryTypeName","src":"565:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":542,"nodeType":"ArrayTypeName","src":"565:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":547,"mutability":"mutable","name":"channelIndexesPlusOne","nameLocation":"621:21:4","nodeType":"VariableDeclaration","scope":548,"src":"593:49:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":546,"keyType":{"id":544,"name":"address","nodeType":"ElementaryTypeName","src":"601:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"593:27:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":545,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"}],"name":"ConduitProperties","nameLocation":"461:17:4","nodeType":"StructDefinition","scope":735,"src":"454:195:4","visibility":"public"},{"anonymous":false,"documentation":{"id":549,"nodeType":"StructuredDocumentation","src":"655:204:4","text":" @dev Emit an event whenever a new conduit is created.\n @param conduit    The newly created conduit.\n @param conduitKey The conduit key used to create the new conduit."},"eventSelector":"4397af6128d529b8ae0442f99db1296d5136062597a15bbc61c1b2a6431a7d15","id":555,"name":"NewConduit","nameLocation":"870:10:4","nodeType":"EventDefinition","parameters":{"id":554,"nodeType":"ParameterList","parameters":[{"constant":false,"id":551,"indexed":false,"mutability":"mutable","name":"conduit","nameLocation":"889:7:4","nodeType":"VariableDeclaration","scope":555,"src":"881:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":550,"name":"address","nodeType":"ElementaryTypeName","src":"881:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":553,"indexed":false,"mutability":"mutable","name":"conduitKey","nameLocation":"906:10:4","nodeType":"VariableDeclaration","scope":555,"src":"898:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":552,"name":"bytes32","nodeType":"ElementaryTypeName","src":"898:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"880:37:4"},"src":"864:54:4"},{"anonymous":false,"documentation":{"id":556,"nodeType":"StructuredDocumentation","src":"924:318:4","text":" @dev Emit an event whenever conduit ownership is transferred.\n @param conduit       The conduit for which ownership has been\n                      transferred.\n @param previousOwner The previous owner of the conduit.\n @param newOwner      The new owner of the conduit."},"eventSelector":"c8894f26f396ce8c004245c8b7cd1b92103a6e4302fcbab883987149ac01b7ec","id":564,"name":"OwnershipTransferred","nameLocation":"1253:20:4","nodeType":"EventDefinition","parameters":{"id":563,"nodeType":"ParameterList","parameters":[{"constant":false,"id":558,"indexed":true,"mutability":"mutable","name":"conduit","nameLocation":"1299:7:4","nodeType":"VariableDeclaration","scope":564,"src":"1283:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":557,"name":"address","nodeType":"ElementaryTypeName","src":"1283:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":560,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"1332:13:4","nodeType":"VariableDeclaration","scope":564,"src":"1316:29:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":559,"name":"address","nodeType":"ElementaryTypeName","src":"1316:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":562,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"1371:8:4","nodeType":"VariableDeclaration","scope":564,"src":"1355:24:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":561,"name":"address","nodeType":"ElementaryTypeName","src":"1355:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1273:112:4"},"src":"1247:139:4"},{"anonymous":false,"documentation":{"id":565,"nodeType":"StructuredDocumentation","src":"1392:203:4","text":" @dev Emit an event whenever a conduit owner registers a new potential\n      owner for that conduit.\n @param newPotentialOwner The new potential owner of the conduit."},"eventSelector":"11a3cf439fb225bfe74225716b6774765670ec1060e3796802e62139d69974da","id":569,"name":"PotentialOwnerUpdated","nameLocation":"1606:21:4","nodeType":"EventDefinition","parameters":{"id":568,"nodeType":"ParameterList","parameters":[{"constant":false,"id":567,"indexed":true,"mutability":"mutable","name":"newPotentialOwner","nameLocation":"1644:17:4","nodeType":"VariableDeclaration","scope":569,"src":"1628:33:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":566,"name":"address","nodeType":"ElementaryTypeName","src":"1628:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1627:35:4"},"src":"1600:63:4"},{"documentation":{"id":570,"nodeType":"StructuredDocumentation","src":"1669:208:4","text":" @dev Revert with an error when attempting to create a new conduit using a\n      conduit key where the first twenty bytes of the key do not match the\n      address of the caller."},"errorSelector":"cb6e5344","id":572,"name":"InvalidCreator","nameLocation":"1888:14:4","nodeType":"ErrorDefinition","parameters":{"id":571,"nodeType":"ParameterList","parameters":[],"src":"1902:2:4"},"src":"1882:23:4"},{"documentation":{"id":573,"nodeType":"StructuredDocumentation","src":"1911:139:4","text":" @dev Revert with an error when attempting to create a new conduit when no\n      initial owner address is supplied."},"errorSelector":"99faaa04","id":575,"name":"InvalidInitialOwner","nameLocation":"2061:19:4","nodeType":"ErrorDefinition","parameters":{"id":574,"nodeType":"ParameterList","parameters":[],"src":"2080:2:4"},"src":"2055:28:4"},{"documentation":{"id":576,"nodeType":"StructuredDocumentation","src":"2089:122:4","text":" @dev Revert with an error when attempting to set a new potential owner\n      that is already set."},"errorSelector":"cbc080ca","id":582,"name":"NewPotentialOwnerAlreadySet","nameLocation":"2222:27:4","nodeType":"ErrorDefinition","parameters":{"id":581,"nodeType":"ParameterList","parameters":[{"constant":false,"id":578,"mutability":"mutable","name":"conduit","nameLocation":"2267:7:4","nodeType":"VariableDeclaration","scope":582,"src":"2259:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":577,"name":"address","nodeType":"ElementaryTypeName","src":"2259:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":580,"mutability":"mutable","name":"newPotentialOwner","nameLocation":"2292:17:4","nodeType":"VariableDeclaration","scope":582,"src":"2284:25:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":579,"name":"address","nodeType":"ElementaryTypeName","src":"2284:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2249:66:4"},"src":"2216:100:4"},{"documentation":{"id":583,"nodeType":"StructuredDocumentation","src":"2322:147:4","text":" @dev Revert with an error when attempting to cancel ownership transfer\n      when no new potential owner is currently set."},"errorSelector":"6b013616","id":587,"name":"NoPotentialOwnerCurrentlySet","nameLocation":"2480:28:4","nodeType":"ErrorDefinition","parameters":{"id":586,"nodeType":"ParameterList","parameters":[{"constant":false,"id":585,"mutability":"mutable","name":"conduit","nameLocation":"2517:7:4","nodeType":"VariableDeclaration","scope":587,"src":"2509:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":584,"name":"address","nodeType":"ElementaryTypeName","src":"2509:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2508:17:4"},"src":"2474:52:4"},{"documentation":{"id":588,"nodeType":"StructuredDocumentation","src":"2532:124:4","text":" @dev Revert with an error when attempting to interact with a conduit that\n      does not yet exist."},"errorSelector":"4ca82090","id":590,"name":"NoConduit","nameLocation":"2667:9:4","nodeType":"ErrorDefinition","parameters":{"id":589,"nodeType":"ParameterList","parameters":[],"src":"2676:2:4"},"src":"2661:18:4"},{"documentation":{"id":591,"nodeType":"StructuredDocumentation","src":"2685:113:4","text":" @dev Revert with an error when attempting to create a conduit that\n      already exists."},"errorSelector":"6328ccb2","id":595,"name":"ConduitAlreadyExists","nameLocation":"2809:20:4","nodeType":"ErrorDefinition","parameters":{"id":594,"nodeType":"ParameterList","parameters":[{"constant":false,"id":593,"mutability":"mutable","name":"conduit","nameLocation":"2838:7:4","nodeType":"VariableDeclaration","scope":595,"src":"2830:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":592,"name":"address","nodeType":"ElementaryTypeName","src":"2830:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2829:17:4"},"src":"2803:44:4"},{"documentation":{"id":596,"nodeType":"StructuredDocumentation","src":"2853:199:4","text":" @dev Revert with an error when attempting to update channels or transfer\n      ownership of a conduit when the caller is not the owner of the\n      conduit in question."},"errorSelector":"d4ed9a17","id":600,"name":"CallerIsNotOwner","nameLocation":"3063:16:4","nodeType":"ErrorDefinition","parameters":{"id":599,"nodeType":"ParameterList","parameters":[{"constant":false,"id":598,"mutability":"mutable","name":"conduit","nameLocation":"3088:7:4","nodeType":"VariableDeclaration","scope":600,"src":"3080:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":597,"name":"address","nodeType":"ElementaryTypeName","src":"3080:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3079:17:4"},"src":"3057:40:4"},{"documentation":{"id":601,"nodeType":"StructuredDocumentation","src":"3103:138:4","text":" @dev Revert with an error when attempting to register a new potential\n      owner and supplying the null address."},"errorSelector":"a388d263","id":605,"name":"NewPotentialOwnerIsZeroAddress","nameLocation":"3252:30:4","nodeType":"ErrorDefinition","parameters":{"id":604,"nodeType":"ParameterList","parameters":[{"constant":false,"id":603,"mutability":"mutable","name":"conduit","nameLocation":"3291:7:4","nodeType":"VariableDeclaration","scope":605,"src":"3283:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":602,"name":"address","nodeType":"ElementaryTypeName","src":"3283:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3282:17:4"},"src":"3246:54:4"},{"documentation":{"id":606,"nodeType":"StructuredDocumentation","src":"3306:199:4","text":" @dev Revert with an error when attempting to claim ownership of a conduit\n      with a caller that is not the current potential owner for the\n      conduit in question."},"errorSelector":"88c3a115","id":610,"name":"CallerIsNotNewPotentialOwner","nameLocation":"3516:28:4","nodeType":"ErrorDefinition","parameters":{"id":609,"nodeType":"ParameterList","parameters":[{"constant":false,"id":608,"mutability":"mutable","name":"conduit","nameLocation":"3553:7:4","nodeType":"VariableDeclaration","scope":610,"src":"3545:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":607,"name":"address","nodeType":"ElementaryTypeName","src":"3545:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3544:17:4"},"src":"3510:52:4"},{"documentation":{"id":611,"nodeType":"StructuredDocumentation","src":"3568:131:4","text":" @dev Revert with an error when attempting to retrieve a channel using an\n      index that is out of range."},"errorSelector":"6ceb340b","id":615,"name":"ChannelOutOfRange","nameLocation":"3710:17:4","nodeType":"ErrorDefinition","parameters":{"id":614,"nodeType":"ParameterList","parameters":[{"constant":false,"id":613,"mutability":"mutable","name":"conduit","nameLocation":"3736:7:4","nodeType":"VariableDeclaration","scope":615,"src":"3728:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":612,"name":"address","nodeType":"ElementaryTypeName","src":"3728:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3727:17:4"},"src":"3704:41:4"},{"documentation":{"id":616,"nodeType":"StructuredDocumentation","src":"3751:748:4","text":" @notice Deploy a new conduit using a supplied conduit key and assigning\n         an initial owner for the deployed conduit. Note that the first\n         twenty bytes of the supplied conduit key must match the caller\n         and that a new conduit cannot be created if one has already been\n         deployed using the same conduit key.\n @param conduitKey   The conduit key used to deploy the conduit. Note that\n                     the first twenty bytes of the conduit key must match\n                     the caller of this contract.\n @param initialOwner The initial owner to set for the new conduit.\n @return conduit The address of the newly deployed conduit."},"functionSelector":"794593bc","id":625,"implemented":false,"kind":"function","modifiers":[],"name":"createConduit","nameLocation":"4513:13:4","nodeType":"FunctionDefinition","parameters":{"id":621,"nodeType":"ParameterList","parameters":[{"constant":false,"id":618,"mutability":"mutable","name":"conduitKey","nameLocation":"4544:10:4","nodeType":"VariableDeclaration","scope":625,"src":"4536:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":617,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4536:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":620,"mutability":"mutable","name":"initialOwner","nameLocation":"4572:12:4","nodeType":"VariableDeclaration","scope":625,"src":"4564:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":619,"name":"address","nodeType":"ElementaryTypeName","src":"4564:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4526:64:4"},"returnParameters":{"id":624,"nodeType":"ParameterList","parameters":[{"constant":false,"id":623,"mutability":"mutable","name":"conduit","nameLocation":"4617:7:4","nodeType":"VariableDeclaration","scope":625,"src":"4609:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":622,"name":"address","nodeType":"ElementaryTypeName","src":"4609:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4608:17:4"},"scope":735,"src":"4504:122:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":626,"nodeType":"StructuredDocumentation","src":"4632:716:4","text":" @notice Open or close a channel on a given conduit, thereby allowing the\n         specified account to execute transfers against that conduit.\n         Extreme care must be taken when updating channels, as malicious\n         or vulnerable channels can transfer any ERC20, ERC721 and ERC1155\n         tokens where the token holder has granted the conduit approval.\n         Only the owner of the conduit in question may call this function.\n @param conduit The conduit for which to open or close the channel.\n @param channel The channel to open or close on the conduit.\n @param isOpen  A boolean indicating whether to open or close the channel."},"functionSelector":"13ad9cab","id":635,"implemented":false,"kind":"function","modifiers":[],"name":"updateChannel","nameLocation":"5362:13:4","nodeType":"FunctionDefinition","parameters":{"id":633,"nodeType":"ParameterList","parameters":[{"constant":false,"id":628,"mutability":"mutable","name":"conduit","nameLocation":"5393:7:4","nodeType":"VariableDeclaration","scope":635,"src":"5385:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":627,"name":"address","nodeType":"ElementaryTypeName","src":"5385:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":630,"mutability":"mutable","name":"channel","nameLocation":"5418:7:4","nodeType":"VariableDeclaration","scope":635,"src":"5410:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":629,"name":"address","nodeType":"ElementaryTypeName","src":"5410:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":632,"mutability":"mutable","name":"isOpen","nameLocation":"5440:6:4","nodeType":"VariableDeclaration","scope":635,"src":"5435:11:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":631,"name":"bool","nodeType":"ElementaryTypeName","src":"5435:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5375:77:4"},"returnParameters":{"id":634,"nodeType":"ParameterList","parameters":[],"src":"5461:0:4"},"scope":735,"src":"5353:109:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":636,"nodeType":"StructuredDocumentation","src":"5468:482:4","text":" @notice Initiate conduit ownership transfer by assigning a new potential\n         owner for the given conduit. Once set, the new potential owner\n         may call `acceptOwnership` to claim ownership of the conduit.\n         Only the owner of the conduit in question may call this function.\n @param conduit The conduit for which to initiate ownership transfer.\n @param newPotentialOwner The new potential owner of the conduit."},"functionSelector":"6d435421","id":643,"implemented":false,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"5964:17:4","nodeType":"FunctionDefinition","parameters":{"id":641,"nodeType":"ParameterList","parameters":[{"constant":false,"id":638,"mutability":"mutable","name":"conduit","nameLocation":"5999:7:4","nodeType":"VariableDeclaration","scope":643,"src":"5991:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":637,"name":"address","nodeType":"ElementaryTypeName","src":"5991:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":640,"mutability":"mutable","name":"newPotentialOwner","nameLocation":"6024:17:4","nodeType":"VariableDeclaration","scope":643,"src":"6016:25:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":639,"name":"address","nodeType":"ElementaryTypeName","src":"6016:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5981:66:4"},"returnParameters":{"id":642,"nodeType":"ParameterList","parameters":[],"src":"6056:0:4"},"scope":735,"src":"5955:102:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":644,"nodeType":"StructuredDocumentation","src":"6063:253:4","text":" @notice Clear the currently set potential owner, if any, from a conduit.\n         Only the owner of the conduit in question may call this function.\n @param conduit The conduit for which to cancel ownership transfer."},"functionSelector":"7b37e561","id":649,"implemented":false,"kind":"function","modifiers":[],"name":"cancelOwnershipTransfer","nameLocation":"6330:23:4","nodeType":"FunctionDefinition","parameters":{"id":647,"nodeType":"ParameterList","parameters":[{"constant":false,"id":646,"mutability":"mutable","name":"conduit","nameLocation":"6362:7:4","nodeType":"VariableDeclaration","scope":649,"src":"6354:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":645,"name":"address","nodeType":"ElementaryTypeName","src":"6354:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6353:17:4"},"returnParameters":{"id":648,"nodeType":"ParameterList","parameters":[],"src":"6379:0:4"},"scope":735,"src":"6321:59:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":650,"nodeType":"StructuredDocumentation","src":"6386:264:4","text":" @notice Accept ownership of a supplied conduit. Only accounts that the\n         current owner has set as the new potential owner may call this\n         function.\n @param conduit The conduit for which to accept ownership."},"functionSelector":"51710e45","id":655,"implemented":false,"kind":"function","modifiers":[],"name":"acceptOwnership","nameLocation":"6664:15:4","nodeType":"FunctionDefinition","parameters":{"id":653,"nodeType":"ParameterList","parameters":[{"constant":false,"id":652,"mutability":"mutable","name":"conduit","nameLocation":"6688:7:4","nodeType":"VariableDeclaration","scope":655,"src":"6680:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":651,"name":"address","nodeType":"ElementaryTypeName","src":"6680:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6679:17:4"},"returnParameters":{"id":654,"nodeType":"ParameterList","parameters":[],"src":"6705:0:4"},"scope":735,"src":"6655:51:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":656,"nodeType":"StructuredDocumentation","src":"6712:224:4","text":" @notice Retrieve the current owner of a deployed conduit.\n @param conduit The conduit for which to retrieve the associated owner.\n @return owner The owner of the supplied conduit."},"functionSelector":"14afd79e","id":663,"implemented":false,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"6950:7:4","nodeType":"FunctionDefinition","parameters":{"id":659,"nodeType":"ParameterList","parameters":[{"constant":false,"id":658,"mutability":"mutable","name":"conduit","nameLocation":"6966:7:4","nodeType":"VariableDeclaration","scope":663,"src":"6958:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":657,"name":"address","nodeType":"ElementaryTypeName","src":"6958:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6957:17:4"},"returnParameters":{"id":662,"nodeType":"ParameterList","parameters":[{"constant":false,"id":661,"mutability":"mutable","name":"owner","nameLocation":"7006:5:4","nodeType":"VariableDeclaration","scope":663,"src":"6998:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":660,"name":"address","nodeType":"ElementaryTypeName","src":"6998:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6997:15:4"},"scope":735,"src":"6941:72:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":664,"nodeType":"StructuredDocumentation","src":"7019:308:4","text":" @notice Retrieve the conduit key for a deployed conduit via reverse\n         lookup.\n @param conduit The conduit for which to retrieve the associated conduit\n                key.\n @return conduitKey The conduit key used to deploy the supplied conduit."},"functionSelector":"93790f44","id":671,"implemented":false,"kind":"function","modifiers":[],"name":"getKey","nameLocation":"7341:6:4","nodeType":"FunctionDefinition","parameters":{"id":667,"nodeType":"ParameterList","parameters":[{"constant":false,"id":666,"mutability":"mutable","name":"conduit","nameLocation":"7356:7:4","nodeType":"VariableDeclaration","scope":671,"src":"7348:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":665,"name":"address","nodeType":"ElementaryTypeName","src":"7348:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7347:17:4"},"returnParameters":{"id":670,"nodeType":"ParameterList","parameters":[{"constant":false,"id":669,"mutability":"mutable","name":"conduitKey","nameLocation":"7396:10:4","nodeType":"VariableDeclaration","scope":671,"src":"7388:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":668,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7388:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7387:20:4"},"scope":735,"src":"7332:76:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":672,"nodeType":"StructuredDocumentation","src":"7414:453:4","text":" @notice Derive the conduit associated with a given conduit key and\n         determine whether that conduit exists (i.e. whether it has been\n         deployed).\n @param conduitKey The conduit key used to derive the conduit.\n @return conduit The derived address of the conduit.\n @return exists  A boolean indicating whether the derived conduit has been\n                 deployed or not."},"functionSelector":"6e9bfd9f","id":681,"implemented":false,"kind":"function","modifiers":[],"name":"getConduit","nameLocation":"7881:10:4","nodeType":"FunctionDefinition","parameters":{"id":675,"nodeType":"ParameterList","parameters":[{"constant":false,"id":674,"mutability":"mutable","name":"conduitKey","nameLocation":"7909:10:4","nodeType":"VariableDeclaration","scope":681,"src":"7901:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":673,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7901:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7891:34:4"},"returnParameters":{"id":680,"nodeType":"ParameterList","parameters":[{"constant":false,"id":677,"mutability":"mutable","name":"conduit","nameLocation":"7957:7:4","nodeType":"VariableDeclaration","scope":681,"src":"7949:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":676,"name":"address","nodeType":"ElementaryTypeName","src":"7949:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":679,"mutability":"mutable","name":"exists","nameLocation":"7971:6:4","nodeType":"VariableDeclaration","scope":681,"src":"7966:11:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":678,"name":"bool","nodeType":"ElementaryTypeName","src":"7966:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7948:30:4"},"scope":735,"src":"7872:107:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":682,"nodeType":"StructuredDocumentation","src":"7985:460:4","text":" @notice Retrieve the potential owner, if any, for a given conduit. The\n         current owner may set a new potential owner via\n         `transferOwnership` and that owner may then accept ownership of\n         the conduit in question via `acceptOwnership`.\n @param conduit The conduit for which to retrieve the potential owner.\n @return potentialOwner The potential owner, if any, for the conduit."},"functionSelector":"906c87cc","id":689,"implemented":false,"kind":"function","modifiers":[],"name":"getPotentialOwner","nameLocation":"8459:17:4","nodeType":"FunctionDefinition","parameters":{"id":685,"nodeType":"ParameterList","parameters":[{"constant":false,"id":684,"mutability":"mutable","name":"conduit","nameLocation":"8494:7:4","nodeType":"VariableDeclaration","scope":689,"src":"8486:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":683,"name":"address","nodeType":"ElementaryTypeName","src":"8486:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8476:31:4"},"returnParameters":{"id":688,"nodeType":"ParameterList","parameters":[{"constant":false,"id":687,"mutability":"mutable","name":"potentialOwner","nameLocation":"8539:14:4","nodeType":"VariableDeclaration","scope":689,"src":"8531:22:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":686,"name":"address","nodeType":"ElementaryTypeName","src":"8531:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8530:24:4"},"scope":735,"src":"8450:105:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":690,"nodeType":"StructuredDocumentation","src":"8561:346:4","text":" @notice Retrieve the status (either open or closed) of a given channel on\n         a conduit.\n @param conduit The conduit for which to retrieve the channel status.\n @param channel The channel for which to retrieve the status.\n @return isOpen The status of the channel on the given conduit."},"functionSelector":"33bc8572","id":699,"implemented":false,"kind":"function","modifiers":[],"name":"getChannelStatus","nameLocation":"8921:16:4","nodeType":"FunctionDefinition","parameters":{"id":695,"nodeType":"ParameterList","parameters":[{"constant":false,"id":692,"mutability":"mutable","name":"conduit","nameLocation":"8955:7:4","nodeType":"VariableDeclaration","scope":699,"src":"8947:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":691,"name":"address","nodeType":"ElementaryTypeName","src":"8947:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":694,"mutability":"mutable","name":"channel","nameLocation":"8980:7:4","nodeType":"VariableDeclaration","scope":699,"src":"8972:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":693,"name":"address","nodeType":"ElementaryTypeName","src":"8972:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8937:56:4"},"returnParameters":{"id":698,"nodeType":"ParameterList","parameters":[{"constant":false,"id":697,"mutability":"mutable","name":"isOpen","nameLocation":"9022:6:4","nodeType":"VariableDeclaration","scope":699,"src":"9017:11:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":696,"name":"bool","nodeType":"ElementaryTypeName","src":"9017:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"9016:13:4"},"scope":735,"src":"8912:118:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":700,"nodeType":"StructuredDocumentation","src":"9036:265:4","text":" @notice Retrieve the total number of open channels for a given conduit.\n @param conduit The conduit for which to retrieve the total channel count.\n @return totalChannels The total number of open channels for the conduit."},"functionSelector":"4e3f9580","id":707,"implemented":false,"kind":"function","modifiers":[],"name":"getTotalChannels","nameLocation":"9315:16:4","nodeType":"FunctionDefinition","parameters":{"id":703,"nodeType":"ParameterList","parameters":[{"constant":false,"id":702,"mutability":"mutable","name":"conduit","nameLocation":"9349:7:4","nodeType":"VariableDeclaration","scope":707,"src":"9341:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":701,"name":"address","nodeType":"ElementaryTypeName","src":"9341:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9331:31:4"},"returnParameters":{"id":706,"nodeType":"ParameterList","parameters":[{"constant":false,"id":705,"mutability":"mutable","name":"totalChannels","nameLocation":"9394:13:4","nodeType":"VariableDeclaration","scope":707,"src":"9386:21:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":704,"name":"uint256","nodeType":"ElementaryTypeName","src":"9386:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9385:23:4"},"scope":735,"src":"9306:103:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":708,"nodeType":"StructuredDocumentation","src":"9415:464:4","text":" @notice Retrieve an open channel at a specific index for a given conduit.\n         Note that the index of a channel can change as a result of other\n         channels being closed on the conduit.\n @param conduit      The conduit for which to retrieve the open channel.\n @param channelIndex The index of the channel in question.\n @return channel The open channel, if any, at the specified channel index."},"functionSelector":"027cc764","id":717,"implemented":false,"kind":"function","modifiers":[],"name":"getChannel","nameLocation":"9893:10:4","nodeType":"FunctionDefinition","parameters":{"id":713,"nodeType":"ParameterList","parameters":[{"constant":false,"id":710,"mutability":"mutable","name":"conduit","nameLocation":"9921:7:4","nodeType":"VariableDeclaration","scope":717,"src":"9913:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":709,"name":"address","nodeType":"ElementaryTypeName","src":"9913:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":712,"mutability":"mutable","name":"channelIndex","nameLocation":"9946:12:4","nodeType":"VariableDeclaration","scope":717,"src":"9938:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":711,"name":"uint256","nodeType":"ElementaryTypeName","src":"9938:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9903:61:4"},"returnParameters":{"id":716,"nodeType":"ParameterList","parameters":[{"constant":false,"id":715,"mutability":"mutable","name":"channel","nameLocation":"9996:7:4","nodeType":"VariableDeclaration","scope":717,"src":"9988:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":714,"name":"address","nodeType":"ElementaryTypeName","src":"9988:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9987:17:4"},"scope":735,"src":"9884:121:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":718,"nodeType":"StructuredDocumentation","src":"10011:364:4","text":" @notice Retrieve all open channels for a given conduit. Note that calling\n         this function for a conduit with many channels will revert with\n         an out-of-gas error.\n @param conduit The conduit for which to retrieve open channels.\n @return channels An array of open channels on the given conduit."},"functionSelector":"8b9e028b","id":726,"implemented":false,"kind":"function","modifiers":[],"name":"getChannels","nameLocation":"10389:11:4","nodeType":"FunctionDefinition","parameters":{"id":721,"nodeType":"ParameterList","parameters":[{"constant":false,"id":720,"mutability":"mutable","name":"conduit","nameLocation":"10418:7:4","nodeType":"VariableDeclaration","scope":726,"src":"10410:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":719,"name":"address","nodeType":"ElementaryTypeName","src":"10410:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"10400:31:4"},"returnParameters":{"id":725,"nodeType":"ParameterList","parameters":[{"constant":false,"id":724,"mutability":"mutable","name":"channels","nameLocation":"10472:8:4","nodeType":"VariableDeclaration","scope":726,"src":"10455:25:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":722,"name":"address","nodeType":"ElementaryTypeName","src":"10455:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":723,"nodeType":"ArrayTypeName","src":"10455:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"10454:27:4"},"scope":735,"src":"10380:102:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":727,"nodeType":"StructuredDocumentation","src":"10488:83:4","text":" @dev Retrieve the conduit creation code and runtime code hashes."},"functionSelector":"0a96ad39","id":734,"implemented":false,"kind":"function","modifiers":[],"name":"getConduitCodeHashes","nameLocation":"10585:20:4","nodeType":"FunctionDefinition","parameters":{"id":728,"nodeType":"ParameterList","parameters":[],"src":"10605:2:4"},"returnParameters":{"id":733,"nodeType":"ParameterList","parameters":[{"constant":false,"id":730,"mutability":"mutable","name":"creationCodeHash","nameLocation":"10663:16:4","nodeType":"VariableDeclaration","scope":734,"src":"10655:24:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":729,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10655:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":732,"mutability":"mutable","name":"runtimeCodeHash","nameLocation":"10689:15:4","nodeType":"VariableDeclaration","scope":734,"src":"10681:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":731,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10681:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"10654:51:4"},"scope":735,"src":"10576:130:4","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":736,"src":"267:10441:4","usedErrors":[572,575,582,587,590,595,600,605,610,615]}],"src":"32:10677:4"}},"seaport-types/src/interfaces/ConduitInterface.sol":{"id":5,"ast":{"absolutePath":"seaport-types/src/interfaces/ConduitInterface.sol","exportedSymbols":{"ConduitBatch1155Transfer":[508],"ConduitInterface":[809],"ConduitTransfer":[495]},"id":810,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":737,"literals":["solidity","^","0.8",".13"],"nodeType":"PragmaDirective","src":"32:24:5"},{"absolutePath":"seaport-types/src/conduit/lib/ConduitStructs.sol","file":"../conduit/lib/ConduitStructs.sol","id":740,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":810,"sourceUnit":509,"src":"58:102:5","symbolAliases":[{"foreign":{"id":738,"name":"ConduitBatch1155Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":508,"src":"71:24:5","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":739,"name":"ConduitTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":495,"src":"101:15:5","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ConduitInterface","contractDependencies":[],"contractKind":"interface","documentation":{"id":741,"nodeType":"StructuredDocumentation","src":"162:174:5","text":" @title ConduitInterface\n @author 0age\n @notice ConduitInterface contains all external function interfaces, events,\n         and errors for conduit contracts."},"fullyImplemented":false,"id":809,"linearizedBaseContracts":[809],"name":"ConduitInterface","nameLocation":"347:16:5","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":742,"nodeType":"StructuredDocumentation","src":"370:144:5","text":" @dev Revert with an error when attempting to execute transfers using a\n      caller that does not have an open channel."},"errorSelector":"93daadf2","id":746,"name":"ChannelClosed","nameLocation":"525:13:5","nodeType":"ErrorDefinition","parameters":{"id":745,"nodeType":"ParameterList","parameters":[{"constant":false,"id":744,"mutability":"mutable","name":"channel","nameLocation":"547:7:5","nodeType":"VariableDeclaration","scope":746,"src":"539:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":743,"name":"address","nodeType":"ElementaryTypeName","src":"539:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"538:17:5"},"src":"519:37:5"},{"documentation":{"id":747,"nodeType":"StructuredDocumentation","src":"562:131:5","text":" @dev Revert with an error when attempting to update a channel to the\n      current status of that channel."},"errorSelector":"924e341e","id":753,"name":"ChannelStatusAlreadySet","nameLocation":"704:23:5","nodeType":"ErrorDefinition","parameters":{"id":752,"nodeType":"ParameterList","parameters":[{"constant":false,"id":749,"mutability":"mutable","name":"channel","nameLocation":"736:7:5","nodeType":"VariableDeclaration","scope":753,"src":"728:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":748,"name":"address","nodeType":"ElementaryTypeName","src":"728:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":751,"mutability":"mutable","name":"isOpen","nameLocation":"750:6:5","nodeType":"VariableDeclaration","scope":753,"src":"745:11:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":750,"name":"bool","nodeType":"ElementaryTypeName","src":"745:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"727:30:5"},"src":"698:60:5"},{"documentation":{"id":754,"nodeType":"StructuredDocumentation","src":"764:154:5","text":" @dev Revert with an error when attempting to execute a transfer for an\n      item that does not have an ERC20/721/1155 item type."},"errorSelector":"7932f1fc","id":756,"name":"InvalidItemType","nameLocation":"929:15:5","nodeType":"ErrorDefinition","parameters":{"id":755,"nodeType":"ParameterList","parameters":[],"src":"944:2:5"},"src":"923:24:5"},{"documentation":{"id":757,"nodeType":"StructuredDocumentation","src":"953:156:5","text":" @dev Revert with an error when attempting to update the status of a\n      channel from a caller that is not the conduit controller."},"errorSelector":"6d5769be","id":759,"name":"InvalidController","nameLocation":"1120:17:5","nodeType":"ErrorDefinition","parameters":{"id":758,"nodeType":"ParameterList","parameters":[],"src":"1137:2:5"},"src":"1114:26:5"},{"anonymous":false,"documentation":{"id":760,"nodeType":"StructuredDocumentation","src":"1146:220:5","text":" @dev Emit an event whenever a channel is opened or closed.\n @param channel The channel that has been updated.\n @param open    A boolean indicating whether the conduit is open or not."},"eventSelector":"ae63067d43ac07563b7eb8db6595635fc77f1578a2a5ea06ba91b63e2afa37e2","id":766,"name":"ChannelUpdated","nameLocation":"1377:14:5","nodeType":"EventDefinition","parameters":{"id":765,"nodeType":"ParameterList","parameters":[{"constant":false,"id":762,"indexed":true,"mutability":"mutable","name":"channel","nameLocation":"1408:7:5","nodeType":"VariableDeclaration","scope":766,"src":"1392:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":761,"name":"address","nodeType":"ElementaryTypeName","src":"1392:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":764,"indexed":false,"mutability":"mutable","name":"open","nameLocation":"1422:4:5","nodeType":"VariableDeclaration","scope":766,"src":"1417:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":763,"name":"bool","nodeType":"ElementaryTypeName","src":"1417:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1391:36:5"},"src":"1371:57:5"},{"documentation":{"id":767,"nodeType":"StructuredDocumentation","src":"1434:352:5","text":" @notice Execute a sequence of ERC20/721/1155 transfers. Only a caller\n         with an open channel can call this function.\n @param transfers The ERC20/721/1155 transfers to perform.\n @return magicValue A magic value indicating that the transfers were\n                    performed successfully."},"functionSelector":"4ce34aa2","id":776,"implemented":false,"kind":"function","modifiers":[],"name":"execute","nameLocation":"1800:7:5","nodeType":"FunctionDefinition","parameters":{"id":772,"nodeType":"ParameterList","parameters":[{"constant":false,"id":771,"mutability":"mutable","name":"transfers","nameLocation":"1844:9:5","nodeType":"VariableDeclaration","scope":776,"src":"1817:36:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ConduitTransfer_$495_calldata_ptr_$dyn_calldata_ptr","typeString":"struct ConduitTransfer[]"},"typeName":{"baseType":{"id":769,"nodeType":"UserDefinedTypeName","pathNode":{"id":768,"name":"ConduitTransfer","nodeType":"IdentifierPath","referencedDeclaration":495,"src":"1817:15:5"},"referencedDeclaration":495,"src":"1817:15:5","typeDescriptions":{"typeIdentifier":"t_struct$_ConduitTransfer_$495_storage_ptr","typeString":"struct ConduitTransfer"}},"id":770,"nodeType":"ArrayTypeName","src":"1817:17:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ConduitTransfer_$495_storage_$dyn_storage_ptr","typeString":"struct ConduitTransfer[]"}},"visibility":"internal"}],"src":"1807:52:5"},"returnParameters":{"id":775,"nodeType":"ParameterList","parameters":[{"constant":false,"id":774,"mutability":"mutable","name":"magicValue","nameLocation":"1885:10:5","nodeType":"VariableDeclaration","scope":776,"src":"1878:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":773,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1878:6:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1877:19:5"},"scope":809,"src":"1791:106:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":777,"nodeType":"StructuredDocumentation","src":"1903:353:5","text":" @notice Execute a sequence of batch 1155 transfers. Only a caller with an\n         open channel can call this function.\n @param batch1155Transfers The 1155 batch transfers to perform.\n @return magicValue A magic value indicating that the transfers were\n                    performed successfully."},"functionSelector":"8df25d92","id":786,"implemented":false,"kind":"function","modifiers":[],"name":"executeBatch1155","nameLocation":"2270:16:5","nodeType":"FunctionDefinition","parameters":{"id":782,"nodeType":"ParameterList","parameters":[{"constant":false,"id":781,"mutability":"mutable","name":"batch1155Transfers","nameLocation":"2332:18:5","nodeType":"VariableDeclaration","scope":786,"src":"2296:54:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ConduitBatch1155Transfer_$508_calldata_ptr_$dyn_calldata_ptr","typeString":"struct ConduitBatch1155Transfer[]"},"typeName":{"baseType":{"id":779,"nodeType":"UserDefinedTypeName","pathNode":{"id":778,"name":"ConduitBatch1155Transfer","nodeType":"IdentifierPath","referencedDeclaration":508,"src":"2296:24:5"},"referencedDeclaration":508,"src":"2296:24:5","typeDescriptions":{"typeIdentifier":"t_struct$_ConduitBatch1155Transfer_$508_storage_ptr","typeString":"struct ConduitBatch1155Transfer"}},"id":780,"nodeType":"ArrayTypeName","src":"2296:26:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ConduitBatch1155Transfer_$508_storage_$dyn_storage_ptr","typeString":"struct ConduitBatch1155Transfer[]"}},"visibility":"internal"}],"src":"2286:70:5"},"returnParameters":{"id":785,"nodeType":"ParameterList","parameters":[{"constant":false,"id":784,"mutability":"mutable","name":"magicValue","nameLocation":"2382:10:5","nodeType":"VariableDeclaration","scope":786,"src":"2375:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":783,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2375:6:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2374:19:5"},"scope":809,"src":"2261:133:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":787,"nodeType":"StructuredDocumentation","src":"2400:444:5","text":" @notice Execute a sequence of transfers, both single and batch 1155. Only\n         a caller with an open channel can call this function.\n @param standardTransfers  The ERC20/721/1155 transfers to perform.\n @param batch1155Transfers The 1155 batch transfers to perform.\n @return magicValue A magic value indicating that the transfers were\n                    performed successfully."},"functionSelector":"899e104c","id":800,"implemented":false,"kind":"function","modifiers":[],"name":"executeWithBatch1155","nameLocation":"2858:20:5","nodeType":"FunctionDefinition","parameters":{"id":796,"nodeType":"ParameterList","parameters":[{"constant":false,"id":791,"mutability":"mutable","name":"standardTransfers","nameLocation":"2915:17:5","nodeType":"VariableDeclaration","scope":800,"src":"2888:44:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ConduitTransfer_$495_calldata_ptr_$dyn_calldata_ptr","typeString":"struct ConduitTransfer[]"},"typeName":{"baseType":{"id":789,"nodeType":"UserDefinedTypeName","pathNode":{"id":788,"name":"ConduitTransfer","nodeType":"IdentifierPath","referencedDeclaration":495,"src":"2888:15:5"},"referencedDeclaration":495,"src":"2888:15:5","typeDescriptions":{"typeIdentifier":"t_struct$_ConduitTransfer_$495_storage_ptr","typeString":"struct ConduitTransfer"}},"id":790,"nodeType":"ArrayTypeName","src":"2888:17:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ConduitTransfer_$495_storage_$dyn_storage_ptr","typeString":"struct ConduitTransfer[]"}},"visibility":"internal"},{"constant":false,"id":795,"mutability":"mutable","name":"batch1155Transfers","nameLocation":"2978:18:5","nodeType":"VariableDeclaration","scope":800,"src":"2942:54:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ConduitBatch1155Transfer_$508_calldata_ptr_$dyn_calldata_ptr","typeString":"struct ConduitBatch1155Transfer[]"},"typeName":{"baseType":{"id":793,"nodeType":"UserDefinedTypeName","pathNode":{"id":792,"name":"ConduitBatch1155Transfer","nodeType":"IdentifierPath","referencedDeclaration":508,"src":"2942:24:5"},"referencedDeclaration":508,"src":"2942:24:5","typeDescriptions":{"typeIdentifier":"t_struct$_ConduitBatch1155Transfer_$508_storage_ptr","typeString":"struct ConduitBatch1155Transfer"}},"id":794,"nodeType":"ArrayTypeName","src":"2942:26:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ConduitBatch1155Transfer_$508_storage_$dyn_storage_ptr","typeString":"struct ConduitBatch1155Transfer[]"}},"visibility":"internal"}],"src":"2878:124:5"},"returnParameters":{"id":799,"nodeType":"ParameterList","parameters":[{"constant":false,"id":798,"mutability":"mutable","name":"magicValue","nameLocation":"3028:10:5","nodeType":"VariableDeclaration","scope":800,"src":"3021:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":797,"name":"bytes4","nodeType":"ElementaryTypeName","src":"3021:6:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"3020:19:5"},"scope":809,"src":"2849:191:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":801,"nodeType":"StructuredDocumentation","src":"3046:222:5","text":" @notice Open or close a given channel. Only callable by the controller.\n @param channel The channel to open or close.\n @param isOpen  The status of the channel (either open or closed)."},"functionSelector":"c4e8fcb5","id":808,"implemented":false,"kind":"function","modifiers":[],"name":"updateChannel","nameLocation":"3282:13:5","nodeType":"FunctionDefinition","parameters":{"id":806,"nodeType":"ParameterList","parameters":[{"constant":false,"id":803,"mutability":"mutable","name":"channel","nameLocation":"3304:7:5","nodeType":"VariableDeclaration","scope":808,"src":"3296:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":802,"name":"address","nodeType":"ElementaryTypeName","src":"3296:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":805,"mutability":"mutable","name":"isOpen","nameLocation":"3318:6:5","nodeType":"VariableDeclaration","scope":808,"src":"3313:11:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":804,"name":"bool","nodeType":"ElementaryTypeName","src":"3313:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3295:30:5"},"returnParameters":{"id":807,"nodeType":"ParameterList","parameters":[],"src":"3334:0:5"},"scope":809,"src":"3273:62:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":810,"src":"337:3000:5","usedErrors":[746,753,756,759]}],"src":"32:3306:5"}},"seaport-types/src/interfaces/IERC721Receiver.sol":{"id":6,"ast":{"absolutePath":"seaport-types/src/interfaces/IERC721Receiver.sol","exportedSymbols":{"IERC721Receiver":[827]},"id":828,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":811,"literals":["solidity","^","0.8",".13"],"nodeType":"PragmaDirective","src":"32:24:6"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Receiver","contractDependencies":[],"contractKind":"interface","documentation":{"id":812,"nodeType":"StructuredDocumentation","src":"58:157:6","text":" @title ERC721 token receiver interface\n @dev Interface for any contract that wants to support safeTransfers\n      from ERC721 asset contracts."},"fullyImplemented":false,"id":827,"linearizedBaseContracts":[827],"name":"IERC721Receiver","nameLocation":"226:15:6","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":813,"nodeType":"StructuredDocumentation","src":"248:400:6","text":" @dev Whenever an ERC721 token is transferred to this contract via\n      safeTransferFrom, this function is called.\n @param operator  The address of the operator.\n @param from      The address of the sender.\n @param tokenId   The ID of the ERC721.\n @param data      Additional data.\n @return bytes4 The magic value, unless throwing."},"functionSelector":"150b7a02","id":826,"implemented":false,"kind":"function","modifiers":[],"name":"onERC721Received","nameLocation":"662:16:6","nodeType":"FunctionDefinition","parameters":{"id":822,"nodeType":"ParameterList","parameters":[{"constant":false,"id":815,"mutability":"mutable","name":"operator","nameLocation":"696:8:6","nodeType":"VariableDeclaration","scope":826,"src":"688:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":814,"name":"address","nodeType":"ElementaryTypeName","src":"688:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":817,"mutability":"mutable","name":"from","nameLocation":"722:4:6","nodeType":"VariableDeclaration","scope":826,"src":"714:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":816,"name":"address","nodeType":"ElementaryTypeName","src":"714:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":819,"mutability":"mutable","name":"tokenId","nameLocation":"744:7:6","nodeType":"VariableDeclaration","scope":826,"src":"736:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":818,"name":"uint256","nodeType":"ElementaryTypeName","src":"736:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":821,"mutability":"mutable","name":"data","nameLocation":"776:4:6","nodeType":"VariableDeclaration","scope":826,"src":"761:19:6","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":820,"name":"bytes","nodeType":"ElementaryTypeName","src":"761:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"678:108:6"},"returnParameters":{"id":825,"nodeType":"ParameterList","parameters":[{"constant":false,"id":824,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":826,"src":"805:6:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":823,"name":"bytes4","nodeType":"ElementaryTypeName","src":"805:6:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"804:8:6"},"scope":827,"src":"653:160:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":828,"src":"216:599:6","usedErrors":[]}],"src":"32:784:6"}},"seaport-types/src/interfaces/TransferHelperErrors.sol":{"id":7,"ast":{"absolutePath":"seaport-types/src/interfaces/TransferHelperErrors.sol","exportedSymbols":{"TransferHelperErrors":[897]},"id":898,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":829,"literals":["solidity","^","0.8",".13"],"nodeType":"PragmaDirective","src":"32:24:7"},{"abstract":false,"baseContracts":[],"canonicalName":"TransferHelperErrors","contractDependencies":[],"contractKind":"interface","documentation":{"id":830,"nodeType":"StructuredDocumentation","src":"58:38:7","text":" @title TransferHelperErrors"},"fullyImplemented":true,"id":897,"linearizedBaseContracts":[897],"name":"TransferHelperErrors","nameLocation":"107:20:7","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":831,"nodeType":"StructuredDocumentation","src":"134:117:7","text":" @dev Revert with an error when attempting to execute transfers with a\n      NATIVE itemType."},"errorSelector":"7932f1fc","id":833,"name":"InvalidItemType","nameLocation":"262:15:7","nodeType":"ErrorDefinition","parameters":{"id":832,"nodeType":"ParameterList","parameters":[],"src":"277:2:7"},"src":"256:24:7"},{"documentation":{"id":834,"nodeType":"StructuredDocumentation","src":"286:194:7","text":" @dev Revert with an error when an ERC721 transfer with amount other than\n      one is attempted.\n @param amount The amount of the ERC721 tokens to transfer."},"errorSelector":"69f95827","id":838,"name":"InvalidERC721TransferAmount","nameLocation":"491:27:7","nodeType":"ErrorDefinition","parameters":{"id":837,"nodeType":"ParameterList","parameters":[{"constant":false,"id":836,"mutability":"mutable","name":"amount","nameLocation":"527:6:7","nodeType":"VariableDeclaration","scope":838,"src":"519:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":835,"name":"uint256","nodeType":"ElementaryTypeName","src":"519:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"518:16:7"},"src":"485:50:7"},{"documentation":{"id":839,"nodeType":"StructuredDocumentation","src":"541:127:7","text":" @dev Revert with an error when attempting to execute an ERC721 transfer\n      to an invalid recipient."},"errorSelector":"bade48ef","id":843,"name":"InvalidERC721Recipient","nameLocation":"679:22:7","nodeType":"ErrorDefinition","parameters":{"id":842,"nodeType":"ParameterList","parameters":[{"constant":false,"id":841,"mutability":"mutable","name":"recipient","nameLocation":"710:9:7","nodeType":"VariableDeclaration","scope":843,"src":"702:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":840,"name":"address","nodeType":"ElementaryTypeName","src":"702:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"701:19:7"},"src":"673:48:7"},{"documentation":{"id":844,"nodeType":"StructuredDocumentation","src":"727:115:7","text":" @dev Revert with an error when a call to an ERC721 receiver reverts with\n      bytes data."},"errorSelector":"b25d2528","id":854,"name":"ERC721ReceiverErrorRevertBytes","nameLocation":"853:30:7","nodeType":"ErrorDefinition","parameters":{"id":853,"nodeType":"ParameterList","parameters":[{"constant":false,"id":846,"mutability":"mutable","name":"reason","nameLocation":"899:6:7","nodeType":"VariableDeclaration","scope":854,"src":"893:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":845,"name":"bytes","nodeType":"ElementaryTypeName","src":"893:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":848,"mutability":"mutable","name":"receiver","nameLocation":"923:8:7","nodeType":"VariableDeclaration","scope":854,"src":"915:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":847,"name":"address","nodeType":"ElementaryTypeName","src":"915:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":850,"mutability":"mutable","name":"sender","nameLocation":"949:6:7","nodeType":"VariableDeclaration","scope":854,"src":"941:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":849,"name":"address","nodeType":"ElementaryTypeName","src":"941:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":852,"mutability":"mutable","name":"identifier","nameLocation":"973:10:7","nodeType":"VariableDeclaration","scope":854,"src":"965:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":851,"name":"uint256","nodeType":"ElementaryTypeName","src":"965:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"883:106:7"},"src":"847:143:7"},{"documentation":{"id":855,"nodeType":"StructuredDocumentation","src":"996:118:7","text":" @dev Revert with an error when a call to an ERC721 receiver reverts with\n      string reason."},"errorSelector":"b4482311","id":865,"name":"ERC721ReceiverErrorRevertString","nameLocation":"1125:31:7","nodeType":"ErrorDefinition","parameters":{"id":864,"nodeType":"ParameterList","parameters":[{"constant":false,"id":857,"mutability":"mutable","name":"reason","nameLocation":"1173:6:7","nodeType":"VariableDeclaration","scope":865,"src":"1166:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":856,"name":"string","nodeType":"ElementaryTypeName","src":"1166:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":859,"mutability":"mutable","name":"receiver","nameLocation":"1197:8:7","nodeType":"VariableDeclaration","scope":865,"src":"1189:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":858,"name":"address","nodeType":"ElementaryTypeName","src":"1189:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":861,"mutability":"mutable","name":"sender","nameLocation":"1223:6:7","nodeType":"VariableDeclaration","scope":865,"src":"1215:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":860,"name":"address","nodeType":"ElementaryTypeName","src":"1215:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":863,"mutability":"mutable","name":"identifier","nameLocation":"1247:10:7","nodeType":"VariableDeclaration","scope":865,"src":"1239:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":862,"name":"uint256","nodeType":"ElementaryTypeName","src":"1239:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1156:107:7"},"src":"1119:145:7"},{"documentation":{"id":866,"nodeType":"StructuredDocumentation","src":"1270:91:7","text":" @dev Revert with an error when an ERC20 token has an invalid identifier."},"errorSelector":"bef6db47","id":868,"name":"InvalidERC20Identifier","nameLocation":"1372:22:7","nodeType":"ErrorDefinition","parameters":{"id":867,"nodeType":"ParameterList","parameters":[],"src":"1394:2:7"},"src":"1366:31:7"},{"documentation":{"id":869,"nodeType":"StructuredDocumentation","src":"1403:82:7","text":" @dev Revert with an error if the recipient is the zero address."},"errorSelector":"d8707052","id":871,"name":"RecipientCannotBeZeroAddress","nameLocation":"1496:28:7","nodeType":"ErrorDefinition","parameters":{"id":870,"nodeType":"ParameterList","parameters":[],"src":"1524:2:7"},"src":"1490:37:7"},{"documentation":{"id":872,"nodeType":"StructuredDocumentation","src":"1533:159:7","text":" @dev Revert with an error when attempting to fill an order referencing an\n      invalid conduit (i.e. one that has not been deployed)."},"errorSelector":"1cf99b26","id":878,"name":"InvalidConduit","nameLocation":"1703:14:7","nodeType":"ErrorDefinition","parameters":{"id":877,"nodeType":"ParameterList","parameters":[{"constant":false,"id":874,"mutability":"mutable","name":"conduitKey","nameLocation":"1726:10:7","nodeType":"VariableDeclaration","scope":878,"src":"1718:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":873,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1718:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":876,"mutability":"mutable","name":"conduit","nameLocation":"1746:7:7","nodeType":"VariableDeclaration","scope":878,"src":"1738:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":875,"name":"address","nodeType":"ElementaryTypeName","src":"1738:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1717:37:7"},"src":"1697:58:7"},{"documentation":{"id":879,"nodeType":"StructuredDocumentation","src":"1761:111:7","text":" @dev Revert with an error when a call to a conduit reverts with a\n      reason string."},"errorSelector":"c1670bde","id":887,"name":"ConduitErrorRevertString","nameLocation":"1883:24:7","nodeType":"ErrorDefinition","parameters":{"id":886,"nodeType":"ParameterList","parameters":[{"constant":false,"id":881,"mutability":"mutable","name":"reason","nameLocation":"1924:6:7","nodeType":"VariableDeclaration","scope":887,"src":"1917:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":880,"name":"string","nodeType":"ElementaryTypeName","src":"1917:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":883,"mutability":"mutable","name":"conduitKey","nameLocation":"1948:10:7","nodeType":"VariableDeclaration","scope":887,"src":"1940:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":882,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1940:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":885,"mutability":"mutable","name":"conduit","nameLocation":"1976:7:7","nodeType":"VariableDeclaration","scope":887,"src":"1968:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":884,"name":"address","nodeType":"ElementaryTypeName","src":"1968:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1907:82:7"},"src":"1877:113:7"},{"documentation":{"id":888,"nodeType":"StructuredDocumentation","src":"1996:106:7","text":" @dev Revert with an error when a call to a conduit reverts with bytes\n      data."},"errorSelector":"9427693c","id":896,"name":"ConduitErrorRevertBytes","nameLocation":"2113:23:7","nodeType":"ErrorDefinition","parameters":{"id":895,"nodeType":"ParameterList","parameters":[{"constant":false,"id":890,"mutability":"mutable","name":"reason","nameLocation":"2152:6:7","nodeType":"VariableDeclaration","scope":896,"src":"2146:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":889,"name":"bytes","nodeType":"ElementaryTypeName","src":"2146:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":892,"mutability":"mutable","name":"conduitKey","nameLocation":"2176:10:7","nodeType":"VariableDeclaration","scope":896,"src":"2168:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":891,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2168:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":894,"mutability":"mutable","name":"conduit","nameLocation":"2204:7:7","nodeType":"VariableDeclaration","scope":896,"src":"2196:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":893,"name":"address","nodeType":"ElementaryTypeName","src":"2196:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2136:81:7"},"src":"2107:111:7"}],"scope":898,"src":"97:2123:7","usedErrors":[833,838,843,854,865,868,871,878,887,896]}],"src":"32:2189:7"}},"seaport-types/src/interfaces/TransferHelperInterface.sol":{"id":8,"ast":{"absolutePath":"seaport-types/src/interfaces/TransferHelperInterface.sol","exportedSymbols":{"TransferHelperInterface":[914],"TransferHelperItemsWithRecipient":[531]},"id":915,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":899,"literals":["solidity","^","0.8",".13"],"nodeType":"PragmaDirective","src":"32:24:8"},{"absolutePath":"seaport-types/src/helpers/TransferHelperStructs.sol","file":"../helpers/TransferHelperStructs.sol","id":901,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":915,"sourceUnit":532,"src":"58:92:8","symbolAliases":[{"foreign":{"id":900,"name":"TransferHelperItemsWithRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":531,"src":"71:32:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"TransferHelperInterface","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":914,"linearizedBaseContracts":[914],"name":"TransferHelperInterface","nameLocation":"162:23:8","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":902,"nodeType":"StructuredDocumentation","src":"192:202:8","text":" @notice Transfer multiple items to a single recipient.\n @param items The items to transfer.\n @param conduitKey  The key of the conduit performing the bulk transfer."},"functionSelector":"32389b71","id":913,"implemented":false,"kind":"function","modifiers":[],"name":"bulkTransfer","nameLocation":"408:12:8","nodeType":"FunctionDefinition","parameters":{"id":909,"nodeType":"ParameterList","parameters":[{"constant":false,"id":906,"mutability":"mutable","name":"items","nameLocation":"474:5:8","nodeType":"VariableDeclaration","scope":913,"src":"430:49:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TransferHelperItemsWithRecipient_$531_calldata_ptr_$dyn_calldata_ptr","typeString":"struct TransferHelperItemsWithRecipient[]"},"typeName":{"baseType":{"id":904,"nodeType":"UserDefinedTypeName","pathNode":{"id":903,"name":"TransferHelperItemsWithRecipient","nodeType":"IdentifierPath","referencedDeclaration":531,"src":"430:32:8"},"referencedDeclaration":531,"src":"430:32:8","typeDescriptions":{"typeIdentifier":"t_struct$_TransferHelperItemsWithRecipient_$531_storage_ptr","typeString":"struct TransferHelperItemsWithRecipient"}},"id":905,"nodeType":"ArrayTypeName","src":"430:34:8","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TransferHelperItemsWithRecipient_$531_storage_$dyn_storage_ptr","typeString":"struct TransferHelperItemsWithRecipient[]"}},"visibility":"internal"},{"constant":false,"id":908,"mutability":"mutable","name":"conduitKey","nameLocation":"497:10:8","nodeType":"VariableDeclaration","scope":913,"src":"489:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":907,"name":"bytes32","nodeType":"ElementaryTypeName","src":"489:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"420:93:8"},"returnParameters":{"id":912,"nodeType":"ParameterList","parameters":[{"constant":false,"id":911,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":913,"src":"532:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":910,"name":"bytes4","nodeType":"ElementaryTypeName","src":"532:6:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"531:8:8"},"scope":914,"src":"399:141:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":915,"src":"152:390:8","usedErrors":[]}],"src":"32:511:8"}}},"contracts":{"contracts/helpers/TransferHelper.sol":{"TransferHelper":{"abi":[{"inputs":[{"internalType":"address","name":"conduitController","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"bytes","name":"reason","type":"bytes"},{"internalType":"bytes32","name":"conduitKey","type":"bytes32"},{"internalType":"address","name":"conduit","type":"address"}],"name":"ConduitErrorRevertBytes","type":"error"},{"inputs":[{"internalType":"string","name":"reason","type":"string"},{"internalType":"bytes32","name":"conduitKey","type":"bytes32"},{"internalType":"address","name":"conduit","type":"address"}],"name":"ConduitErrorRevertString","type":"error"},{"inputs":[{"internalType":"bytes","name":"reason","type":"bytes"},{"internalType":"address","name":"receiver","type":"address"},{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"identifier","type":"uint256"}],"name":"ERC721ReceiverErrorRevertBytes","type":"error"},{"inputs":[{"internalType":"string","name":"reason","type":"string"},{"internalType":"address","name":"receiver","type":"address"},{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"identifier","type":"uint256"}],"name":"ERC721ReceiverErrorRevertString","type":"error"},{"inputs":[{"internalType":"bytes32","name":"conduitKey","type":"bytes32"},{"internalType":"address","name":"conduit","type":"address"}],"name":"InvalidConduit","type":"error"},{"inputs":[],"name":"InvalidERC20Identifier","type":"error"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"}],"name":"InvalidERC721Recipient","type":"error"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"InvalidERC721TransferAmount","type":"error"},{"inputs":[],"name":"InvalidItemType","type":"error"},{"inputs":[],"name":"RecipientCannotBeZeroAddress","type":"error"},{"inputs":[{"components":[{"components":[{"internalType":"enum ConduitItemType","name":"itemType","type":"uint8"},{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"identifier","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct TransferHelperItem[]","name":"items","type":"tuple[]"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"bool","name":"validateERC721Receiver","type":"bool"}],"internalType":"struct TransferHelperItemsWithRecipient[]","name":"items","type":"tuple[]"},{"internalType":"bytes32","name":"conduitKey","type":"bytes32"}],"name":"bulkTransfer","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}],"metadata":{"optimizer_settings":"M3B3","solc_metadata":"{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"conduitController\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"reason\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"conduitKey\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"conduit\",\"type\":\"address\"}],\"name\":\"ConduitErrorRevertBytes\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"conduitKey\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"conduit\",\"type\":\"address\"}],\"name\":\"ConduitErrorRevertString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"reason\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"identifier\",\"type\":\"uint256\"}],\"name\":\"ERC721ReceiverErrorRevertBytes\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"identifier\",\"type\":\"uint256\"}],\"name\":\"ERC721ReceiverErrorRevertString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"conduitKey\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"conduit\",\"type\":\"address\"}],\"name\":\"InvalidConduit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidERC20Identifier\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"InvalidERC721Recipient\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InvalidERC721TransferAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidItemType\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RecipientCannotBeZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"enum ConduitItemType\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"identifier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct TransferHelperItem[]\",\"name\":\"items\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"validateERC721Receiver\",\"type\":\"bool\"}],\"internalType\":\"struct TransferHelperItemsWithRecipient[]\",\"name\":\"items\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32\",\"name\":\"conduitKey\",\"type\":\"bytes32\"}],\"name\":\"bulkTransfer\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"stephankmin, stuckinaboot, ryanio\",\"errors\":{\"ConduitErrorRevertBytes(bytes,bytes32,address)\":[{\"details\":\"Revert with an error when a call to a conduit reverts with bytes      data.\"}],\"ConduitErrorRevertString(string,bytes32,address)\":[{\"details\":\"Revert with an error when a call to a conduit reverts with a      reason string.\"}],\"ERC721ReceiverErrorRevertBytes(bytes,address,address,uint256)\":[{\"details\":\"Revert with an error when a call to an ERC721 receiver reverts with      bytes data.\"}],\"ERC721ReceiverErrorRevertString(string,address,address,uint256)\":[{\"details\":\"Revert with an error when a call to an ERC721 receiver reverts with      string reason.\"}],\"InvalidConduit(bytes32,address)\":[{\"details\":\"Revert with an error when attempting to fill an order referencing an      invalid conduit (i.e. one that has not been deployed).\"}],\"InvalidERC20Identifier()\":[{\"details\":\"Revert with an error when an ERC20 token has an invalid identifier.\"}],\"InvalidERC721Recipient(address)\":[{\"details\":\"Revert with an error when attempting to execute an ERC721 transfer      to an invalid recipient.\"}],\"InvalidERC721TransferAmount(uint256)\":[{\"details\":\"Revert with an error when an ERC721 transfer with amount other than      one is attempted.\",\"params\":{\"amount\":\"The amount of the ERC721 tokens to transfer.\"}}],\"InvalidItemType()\":[{\"details\":\"Revert with an error when attempting to execute transfers with a      NATIVE itemType.\"}],\"RecipientCannotBeZeroAddress()\":[{\"details\":\"Revert with an error if the recipient is the zero address.\"}]},\"kind\":\"dev\",\"methods\":{\"bulkTransfer(((uint8,address,uint256,uint256)[],address,bool)[],bytes32)\":{\"params\":{\"conduitKey\":\"A mandatory conduit key referring to a conduit through                   which the bulk transfer should occur.\",\"items\":\"The items to transfer to an intended recipient.\"},\"returns\":{\"magicValue\":\"A value indicating that the transfers were successful.\"}},\"constructor\":{\"details\":\"Set the supplied conduit controller and retrieve its      conduit creation code hash.\",\"params\":{\"conduitController\":\"A contract that deploys conduits, or proxies                          that may optionally be used to transfer approved                          ERC20/721/1155 tokens.\"}}},\"title\":\"TransferHelper\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"bulkTransfer(((uint8,address,uint256,uint256)[],address,bool)[],bytes32)\":{\"notice\":\"Transfer multiple ERC20/ERC721/ERC1155 items to         specified recipients.\"}},\"notice\":\"TransferHelper is a utility contract for transferring         ERC20/ERC721/ERC1155 items in bulk to specific recipients.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/helpers/TransferHelper.sol\":\"TransferHelper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/helpers/TransferHelper.sol\":{\"keccak256\":\"0x9b05aa205ff249a26eff4394fc5a47c0644c911a143b6fddbd5dd34e22d1c516\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f94d933e8f1e2f64ea0b5f72328b06493076ebe1e316067a9a43d1e67a9790b5\",\"dweb:/ipfs/QmXtHv1aFuJZc5uLbzwRw6fFeokuw2AJaDYJEMjAULSWPW\"]},\"seaport-types/src/conduit/lib/ConduitEnums.sol\":{\"keccak256\":\"0x1b24e84bbd29d52cebcb0bda26c8095c9d7a8e5719dd1b0e203315be0df4dcf7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://901be0c9ea392a69611b884985a772547e83ce78610a40e989216d842c8eb4b0\",\"dweb:/ipfs/QmPW1kDrkUEAvF6gy5FHsVmXNe2C1czAovXKL18T5jKiVx\"]},\"seaport-types/src/conduit/lib/ConduitStructs.sol\":{\"keccak256\":\"0xe765c83ddb65b13547db2914f7212689707fcd85c1bbe5c49dbe3e98c4942dd9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1318c90a615b9c2098c1f7435925c76913d2c54b79a53f8f64eae59d60ed5564\",\"dweb:/ipfs/QmXkTSAvkrMbrNLJjehm3JXeBoyW6dDYWRsdFkuDVb33sa\"]},\"seaport-types/src/helpers/TransferHelperStructs.sol\":{\"keccak256\":\"0x661b4ac90f4afdfe78153908edd54ed585e7dfe8d982dd62c5dbfd9eace6e418\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://78aa3e56af407a533b05023743467cbfaa470bc7f025107de9bcd631671c6d9e\",\"dweb:/ipfs/Qmax9yzYqK1uQ7sVF4tFytW59dqTYXB8MsL7dC24QHfnWZ\"]},\"seaport-types/src/interfaces/ConduitControllerInterface.sol\":{\"keccak256\":\"0xfbdb813ba85803cc1faf1d82f354d7631b029597334e27f07a678487a1ad7bcc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ce247c947cb809a3aad55735dbab78c8d993d71349115aa9f040c44e6fa6b3d5\",\"dweb:/ipfs/QmX13SMXXfHRwCfhuyUNRNygh81zdngrfo7YbNWpxMmpLZ\"]},\"seaport-types/src/interfaces/ConduitInterface.sol\":{\"keccak256\":\"0x5710e503e7550594cf98bade51646da1420d09c1b4758315484810df72d7cf64\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d3831fc9b36ce3760c39f60682487848f9678157794b995207f15d93ca1cc58a\",\"dweb:/ipfs/QmaapZB4DdYhUSkjySHJk9n7ajEfmX1hwWXWwEHAixYPQQ\"]},\"seaport-types/src/interfaces/IERC721Receiver.sol\":{\"keccak256\":\"0x8e60d8657d3b2e80d5c279e689d87a7882f139d9fd72a498618cb9fcc14d0841\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b487b981916bceae912c9d80038a50638f0f00684707fbfa69a3eb55be3fa7c0\",\"dweb:/ipfs/QmQ9dJXs9QPnaMCGQXV4TSAYED2BDhigGdYBpApjU4oZfH\"]},\"seaport-types/src/interfaces/TransferHelperErrors.sol\":{\"keccak256\":\"0x6f5825b92c3b0d667227f893916899bbc6e137b5fec6f28981005616cfd1a6af\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a27beca824d18bc9b779b997b9d80a26c11ba2c15fec305f5e5a8adc7fccd232\",\"dweb:/ipfs/QmTmNrbx1RwiV1nTUxp3YX8QFxseqhQKUV5wPMmAEb6HzC\"]},\"seaport-types/src/interfaces/TransferHelperInterface.sol\":{\"keccak256\":\"0x26e6e0ff3dd1d492e3f27a844024eba7a5c70ab204d603d5b7c892a2fdb82ab6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ec46c29dac8f756ae4061bb433422904fc729806dd1fb7e9e39348378f602c31\",\"dweb:/ipfs/QmPyGJ5RhXFLrfozEgBoR21wG19ttkaDZQEBWfvrKr35YB\"]}},\"version\":1}","zk_version":"1.3.16"},"evm":{"legacyAssembly":null,"assembly":"\t.text\n\t.file\t\"TransferHelper.sol:TransferHelper\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[30]\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r4\n\tand\t@CPI0_0[0], r4, r3\n\tptr.add\tr1, r3, stack[@ptr_return_data]\n\tptr.add\tr1, r0, stack[@ptr_calldata]\n\tand\t@CPI0_0[0], r4, stack[@calldatasize]\n\tadd\t0, r0, stack[@returndatasize]\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_1\n\tadd\t128, r0, r7\n\tst.1\t64, r7\n\tsub.s!\t4, r3, r2\n\tjump.lt\t@.BB0_2\n\tld\tr1, r2\n\tand\t@CPI0_9[0], r2, r2\n\tsub.s!\t@CPI0_10[0], r2, r2\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r3, r2\n\tsub.s!\t64, r2, r2\n\tjump.lt\t@.BB0_2\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r2\n\tadd\tr2, r0, stack-[23]\n\tsub.s!\t@CPI0_7[0], r2, r2\n\tjump.gt\t@.BB0_2\n\tadd\tstack-[23], r0, r2\n\tadd\t35, r2, r2\n\tadd\t@CPI0_11[0], r0, r4\n\tsub!\tr2, r3, r5\n\tadd\tr0, r0, r5\n\tadd.ge\tr4, r0, r5\n\tand\t@CPI0_11[0], r2, r2\n\tsub!\tr2, r0, r6\n\tadd.ge\tr0, r0, r4\n\tsub.s!\t@CPI0_11[0], r2, r2\n\tadd\tr5, r0, r2\n\tadd.eq\tr4, r0, r2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tadd\tstack-[23], r0, r2\n\tadd\t4, r2, r2\n\tptr.add\tr1, r2, r2\n\tld\tr2, r4\n\tsub.s!\t@CPI0_7[0], r4, r2\n\tjump.gt\t@.BB0_2\n\tadd\tstack-[23], r0, r2\n\tadd\t36, r2, stack-[24]\n\tshl.s\t5, r4, r2\n\tadd\tstack-[24], r2, r2\n\tsub!\tr2, r3, r2\n\tjump.gt\t@.BB0_2\n\tptr.add.s\t36, r1, r1\n\tld\tr1, r2\n\tcontext.sp\tr3\n\tld.1\t64, r5\n\tsub!\tr2, r0, r1\n\tjump.ne\t@.BB0_38\n\tadd\t@CPI0_36[0], r0, r1\n\tst.1\tr5, r1\n\tadd\t36, r5, r1\n\tst.1\tr1, r0\n\tadd\t4, r5, r1\n\tst.1\tr1, r0\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r5, r2\n\tadd.lt\tr5, r0, r1\n.BB0_37:\n\tshl.s\t64, r1, r1\n\tor\t@CPI0_37[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_1:\n\tadd\t224, r0, r2\n\tst.1\t64, r2\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tadd\t@CPI0_1[0], r3, r2\n\tsub.s!\t@CPI0_2[0], r2, r2\n\tjump.gt\t@.BB0_6\n.BB0_4:\n\tadd\t@CPI0_29[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n.BB0_5:\n\tst.1\t4, r1\n\tadd\t@CPI0_27[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_6:\n\tadd\t255, r3, r2\n\tand\t@CPI0_3[0], r2, r2\n\tst.1\t64, r2\n\tand\t31, r3, r2\n\tshr.s!\t5, r3, r4\n\tjump.eq\t@.BB0_177\n\tadd\tr0, r0, r5\n.BB0_8:\n\tshl.s\t5, r5, r6\n\tptr.add\tr1, r6, r7\n\tld\tr7, r7\n\tadd\t224, r6, r6\n\tst.1\tr6, r7\n\tadd\t1, r5, r5\n\tsub!\tr5, r4, r6\n\tjump.lt\t@.BB0_8\n.BB0_177:\n\tsub!\tr2, r0, r5\n\tjump.eq\t@.BB0_10\n\tshl.s\t5, r4, r4\n\tptr.add\tr1, r4, r1\n\tshl.s\t3, r2, r2\n\tadd\t224, r4, r4\n\tld.1\tr4, r5\n\tshl\tr5, r2, r5\n\tshr\tr5, r2, r5\n\tld\tr1, r1\n\tsub\t256, r2, r2\n\tshr\tr1, r2, r1\n\tshl\tr1, r2, r1\n\tor\tr1, r5, r1\n\tst.1\tr4, r1\n.BB0_10:\n\tsub.s!\t32, r3, r1\n\tjump.lt\t@.BB0_2\n\tld.1\t224, r2\n\tsub.s!\t@CPI0_4[0], r2, r1\n\tjump.le\t@.BB0_12\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_12:\n\tld.1\t64, r10\n\tadd\t@CPI0_5[0], r0, r1\n\tst.1.inc\tr10, r1, r6\n\tcontext.gas_left\tr1\n\tsub.s!\t4, r2, r3\n\tadd\tr0, r0, r4\n\tadd\tr0, r0, r3\n\tjump.eq\t@.BB0_23\n\tadd\tr6, r0, stack-[22]\n\tadd\t@CPI0_0[0], r0, r4\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr4, r0, r1\n\tsub.s!\t@CPI0_0[0], r10, r3\n\tadd\tr4, r0, r3\n\tadd.lt\tr10, r0, r3\n\tshl.s\t64, r3, r3\n\tshl.s\t192, r1, r1\n\tor\tr1, r3, r1\n\tor\t@CPI0_6[0], r1, r1\n\tadd\tr2, r0, stack-[24]\n\tadd\tr10, r0, stack-[23]\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[23], r0, r10\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t64, r3, r4\n\tadd\t64, r0, r4\n\tadd.lt\tr3, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_176\n\tadd\tr0, r0, r7\n.BB0_15:\n\tshl.s\t5, r7, r8\n\tadd\tr10, r8, r9\n\tptr.add\tr1, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_15\n.BB0_176:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_17\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tadd\tr10, r6, r6\n\tshl.s\t3, r5, r5\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_17:\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tadd\tstack-[24], r0, r2\n\tadd\tstack-[22], r0, r6\n\tjump.eq\t@.BB0_18\n.BB0_23:\n\tadd\t31, r4, r1\n\tand\t224, r1, r4\n\tadd\tr4, r10, r1\n\tsub!\tr1, r4, r4\n\tadd\t0, r0, r5\n\tadd.lt\t1, r0, r5\n\tsub.s!\t@CPI0_7[0], r1, r4\n\tjump.gt\t@.BB0_4\n\tand!\t1, r5, r4\n\tjump.ne\t@.BB0_4\n\tst.1\t64, r1\n\tsub.s!\t64, r3, r1\n\tjump.lt\t@.BB0_2\n\tld.1\tr10, r1\n\tld.1\tr6, r4\n\tst.1\t192, r4\n\tst.1\t160, r1\n\tst.1\t128, r2\n\tst.2\t320, r0\n\tst.2\t352, r2\n\tadd\t32, r0, r3\n\tst.2\t384, r3\n\tst.2\t416, r1\n\tadd\t64, r0, r1\n\tst.2\t448, r1\n\tst.2\t480, r4\n\tst.2\t256, r3\n\tadd\t3, r0, r1\n\tst.2\t288, r1\n\tadd\t@CPI0_8[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_18:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_175\n\tadd\tr0, r0, r6\n.BB0_20:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_20\n.BB0_175:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_22\n\tshl.s\t5, r5, r5\n\tptr.add\tr1, r5, r1\n\tadd\tr2, r5, r5\n\tshl.s\t3, r4, r4\n\tld.1\tr5, r6\n\tshl\tr6, r4, r6\n\tshr\tr6, r4, r6\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r6, r1\n\tst.1\tr5, r1\n.BB0_22:\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.lt\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t96, r3, r2\n\tor\tr1, r2, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_38:\n\tadd\tr5, r0, stack-[21]\n\tadd\tr3, r0, stack-[2]\n\tadd\tr2, r0, stack-[4]\n\tadd\t@CPI0_12[0], r0, r1\n\tst.2\t0, r1\n\tcontext.code_source\tr1\n\tadd\tr1, r0, stack-[22]\n\tst.2\t4, r1\n\tadd\t32, r0, r1\n\tadd\tr1, r0, stack-[3]\n\tst.2\t36, r1\n\tadd\t@CPI0_0[0], r0, r3\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_13[0], r1, r1\n\tadd\t32773, r0, r2\n\tadd\tr7, r0, stack-[19]\n\tadd\tr4, r0, stack-[10]\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tadd\tr1, r0, stack-[20]\n\tadd\t@CPI0_12[0], r0, r1\n\tst.2\t0, r1\n\tadd\tstack-[22], r0, r1\n\tst.2\t4, r1\n\tst.2\t36, r0\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_13[0], r1, r1\n\tadd\t32773, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[21], r0, r4\n\tadd\t32, r4, r2\n\tld\tr1, r1\n\tadd\t@CPI0_14[0], r0, r3\n\tst.1\tr2, r3\n\tshl.s\t96, r1, r1\n\tadd\t33, r4, r3\n\tst.1\tr3, r1\n\tadd\t85, r4, r1\n\tadd\tstack-[20], r0, r3\n\tst.1\tr1, r3\n\tadd\t53, r4, r1\n\tadd\tstack-[4], r0, r3\n\tst.1\tr1, r3\n\tadd\t85, r0, r1\n\tst.1\tr4, r1\n\tsub.s!\t@CPI0_15[0], r4, r1\n\tjump.gt\t@.BB0_4\n\tadd\t128, r4, r1\n\tst.1\t64, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t64, r2, r2\n\tld.1\tr4, r3\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr1, r0, r3\n\tshl.s\t96, r3, r3\n\tor\tr3, r2, r2\n\tcontext.gas_left\tr3\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.lt\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\tr1, r2, r1\n\tor\t@CPI0_16[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[10], r0, r15\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tand\t@CPI0_4[0], r1, stack-[17]\n\tsub!\tr15, r0, r1\n\tadd\tr0, r0, r1\n\tjump.ne\t@.BB0_43\n.BB0_50:\n\tshl.s\t5, r1, r2\n\tadd\t63, r2, r3\n\tsub.s\t32, r0, stack-[1]\n\tand\tstack-[1], r3, r4\n\tld.1\t64, r9\n\tadd\tr4, r9, r3\n\tsub!\tr3, r4, r4\n\tadd\t0, r0, r4\n\tadd.lt\t1, r0, r4\n\tsub.s!\t@CPI0_7[0], r3, r5\n\tjump.gt\t@.BB0_4\n\tand!\t1, r4, r4\n\tjump.ne\t@.BB0_4\n\tst.1\t64, r3\n\tst.1.inc\tr9, r1, r10\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_56\n\tadd\tr0, r0, r1\n.BB0_54:\n\tld.1\t64, r3\n\tsub.s!\t@CPI0_17[0], r3, r4\n\tjump.gt\t@.BB0_4\n\tadd\t192, r3, r4\n\tst.1\t64, r4\n\tadd\t160, r3, r4\n\tst.1\tr4, r0\n\tadd\t128, r3, r4\n\tst.1\tr4, r0\n\tadd\t96, r3, r4\n\tst.1\tr4, r0\n\tadd\t64, r3, r4\n\tst.1\tr4, r0\n\tadd\t32, r3, r4\n\tst.1\tr4, r0\n\tst.1\tr3, r0\n\tadd\t32, r1, r1\n\tadd\tr1, r9, r4\n\tst.1\tr4, r3\n\tsub!\tr1, r2, r3\n\tjump.lt\t@.BB0_54\n.BB0_56:\n\tsub!\tr15, r0, r1\n\tjump.ne\t@.BB0_57\n.BB0_69:\n\tld.1\t64, r3\n\tadd\t@CPI0_31[0], r0, r1\n\tst.1\tr3, r1\n\tadd\t4, r3, r1\n\tadd\tstack-[3], r0, r2\n\tst.1\tr1, r2\n\tld.1\tr9, r2\n\tadd\t36, r3, r1\n\tst.1\tr1, r2\n\tadd\tr3, r0, stack-[24]\n\tadd\t68, r3, r1\n\tsub!\tr2, r0, r3\n\tjump.eq\t@.BB0_74\n\tadd\tr0, r0, r3\n.BB0_71:\n\tadd\t32, r9, r9\n\tld.1\tr9, r4\n\tld.1.inc\tr4, r6, r5\n\tsub.s!\t4, r6, r7\n\tjump.ge\t@.BB0_72\n\tst.1.inc\tr1, r6, r6\n\tld.1\tr5, r5\n\tand\t@CPI0_4[0], r5, r5\n\tst.1\tr6, r5\n\tadd\t64, r4, r5\n\tld.1\tr5, r5\n\tand\t@CPI0_4[0], r5, r5\n\tadd\t64, r1, r6\n\tst.1\tr6, r5\n\tadd\t96, r4, r5\n\tld.1\tr5, r5\n\tand\t@CPI0_4[0], r5, r5\n\tadd\t96, r1, r6\n\tst.1\tr6, r5\n\tadd\t128, r4, r5\n\tld.1\tr5, r5\n\tadd\t128, r1, r6\n\tst.1\tr6, r5\n\tadd\t160, r4, r4\n\tld.1\tr4, r4\n\tadd\t160, r1, r5\n\tst.1\tr5, r4\n\tadd\t192, r1, r1\n\tadd\t1, r3, r3\n\tsub!\tr3, r2, r4\n\tjump.lt\t@.BB0_71\n.BB0_74:\n\tcontext.gas_left\tr2\n\tadd\tstack-[17], r0, r3\n\tsub.s!\t4, r3, r3\n\tjump.ne\t@.BB0_126\n\tcontext.sp\tr5\n\tsub.s\t28, r5, r5\n\tmul\t32, r5, r5, r0\n\tadd\tstack[@returndatasize], r0, r3\n\tsub.s!\t32, r3, r1\n\tadd\t32, r0, r4\n\tadd.lt\tr3, r0, r4\n\tadd\t0, r0, stack-[28]\n\tjump\t@.BB0_131\n.BB0_43:\n\tptr.add\tstack[@ptr_calldata], r0, r2\n\tadd\tstack[@calldatasize], r0, r3\n\tsub.s\tstack-[23], r3, r1\n\tsub.s\t31, r3, r4\n\tsub.s\t131, r1, r5\n\tadd\t@CPI0_11[0], r0, r6\n\tadd\tr0, r0, r7\n\tadd\tr0, r0, r1\n.BB0_44:\n\tshl.s\t5, r7, r8\n\tadd\tstack-[24], r8, r8\n\tptr.add\tr2, r8, r8\n\tld\tr8, r8\n\tsub!\tr8, r5, r9\n\tadd\tr0, r0, r9\n\tadd.ge\tr6, r0, r9\n\tand\t@CPI0_11[0], r5, r10\n\tand\t@CPI0_11[0], r8, r11\n\tsub!\tr11, r10, r12\n\tadd\tr0, r0, r12\n\tadd.lt\tr6, r0, r12\n\txor\tr11, r10, r10\n\tsub.s!\t@CPI0_11[0], r10, r10\n\tadd.eq\tr12, r0, r9\n\tsub!\tr9, r0, r9\n\tjump.ne\t@.BB0_2\n\tadd\tstack-[24], r8, r8\n\tsub\tr4, r8, r10\n\tptr.add\tr2, r8, r9\n\tld\tr9, r9\n\tsub!\tr9, r10, r11\n\tadd\tr0, r0, r11\n\tadd.ge\tr6, r0, r11\n\tand\t@CPI0_11[0], r10, r10\n\tand\t@CPI0_11[0], r9, r12\n\tsub!\tr12, r10, r13\n\tadd\tr0, r0, r13\n\tadd.lt\tr6, r0, r13\n\txor\tr12, r10, r10\n\tsub.s!\t@CPI0_11[0], r10, r10\n\tadd\tr11, r0, r10\n\tadd.eq\tr13, r0, r10\n\tsub!\tr10, r0, r10\n\tjump.ne\t@.BB0_2\n\tadd\tr9, r8, r9\n\tptr.add\tr2, r9, r8\n\tld\tr8, r8\n\tsub.s!\t@CPI0_7[0], r8, r10\n\tjump.gt\t@.BB0_2\n\tshl.s\t7, r8, r10\n\tsub\tr3, r10, r10\n\tadd\t32, r9, r9\n\tsub!\tr9, r10, r11\n\tadd\tr0, r0, r11\n\tadd.gt\tr6, r0, r11\n\tand\t@CPI0_11[0], r10, r10\n\tand\t@CPI0_11[0], r9, r9\n\tsub!\tr9, r10, r12\n\tadd\tr0, r0, r12\n\tadd.lt\tr6, r0, r12\n\txor\tr9, r10, r9\n\tsub.s!\t@CPI0_11[0], r9, r9\n\tadd\tr11, r0, r9\n\tadd.eq\tr12, r0, r9\n\tsub!\tr9, r0, r9\n\tjump.ne\t@.BB0_2\n\tadd\tr8, r1, r1\n\tadd\t1, r7, r7\n\tsub!\tr7, r15, r8\n\tjump.lt\t@.BB0_44\n\tsub.s!\t@CPI0_7[0], r1, r2\n\tjump.gt\t@.BB0_4\n\tjump\t@.BB0_50\n.BB0_57:\n\tsub.s\t131, r0, r1\n\tsub.s\tstack-[23], r1, stack-[5]\n\tptr.add\tstack[@ptr_calldata], r0, r2\n\tadd\tr0, r0, r3\n\tadd\tr0, r0, r12\n\tadd\tr9, r0, stack-[9]\n\tadd\tr10, r0, stack-[8]\n\tjump\t@.BB0_58\n.BB0_81:\n\tadd\tstack-[6], r0, r3\n\tadd\t1, r3, r3\n\tsub!\tr3, r15, r1\n\tjump.ge\t@.BB0_69\n.BB0_58:\n\tadd\tr3, r0, stack-[6]\n\tshl.s\t5, r3, r1\n\tadd\tstack-[24], r1, r1\n\tptr.add\tr2, r1, r3\n\tadd\tstack[@calldatasize], r0, r1\n\tadd\tstack-[5], r1, r4\n\tld\tr3, r3\n\tsub!\tr3, r4, r5\n\tadd\t@CPI0_11[0], r0, r8\n\tadd\tr0, r0, r5\n\tadd.ge\tr8, r0, r5\n\tand\t@CPI0_11[0], r4, r4\n\tand\t@CPI0_11[0], r3, r6\n\tsub!\tr6, r4, r7\n\tadd\tr0, r0, r7\n\tadd.lt\tr8, r0, r7\n\txor\tr6, r4, r4\n\tsub.s!\t@CPI0_11[0], r4, r4\n\tadd\tr5, r0, r4\n\tadd.eq\tr7, r0, r4\n\tsub!\tr4, r0, r4\n\tjump.ne\t@.BB0_2\n\tadd\tstack-[24], r3, r3\n\tsub\tr1, r3, r4\n\tsub.s\t31, r4, r5\n\tptr.add\tr2, r3, r4\n\tld\tr4, r4\n\tsub!\tr4, r5, r6\n\tadd\t@CPI0_11[0], r0, r11\n\tadd\tr0, r0, r6\n\tadd.ge\tr11, r0, r6\n\tand\t@CPI0_11[0], r5, r5\n\tand\t@CPI0_11[0], r4, r7\n\tsub!\tr7, r5, r8\n\tadd\tr0, r0, r8\n\tadd.lt\tr11, r0, r8\n\txor\tr7, r5, r5\n\tsub.s!\t@CPI0_11[0], r5, r5\n\tadd\tr6, r0, r5\n\tadd.eq\tr8, r0, r5\n\tsub!\tr5, r0, r5\n\tjump.ne\t@.BB0_2\n\tadd\tr4, r3, r4\n\tptr.add\tr2, r4, r5\n\tld\tr5, r8\n\tsub.s!\t@CPI0_7[0], r8, r5\n\tjump.gt\t@.BB0_2\n\tshl.s\t7, r8, r5\n\tsub\tr1, r5, r1\n\tadd\t32, r4, r11\n\tsub!\tr11, r1, r4\n\tadd\t@CPI0_11[0], r0, r7\n\tadd\tr0, r0, r4\n\tadd.gt\tr7, r0, r4\n\tand\t@CPI0_11[0], r1, r1\n\tand\t@CPI0_11[0], r11, r5\n\tsub!\tr5, r1, r6\n\tadd\tr0, r0, r6\n\tadd.lt\tr7, r0, r6\n\txor\tr5, r1, r1\n\tsub.s!\t@CPI0_11[0], r1, r1\n\tadd\tr4, r0, r1\n\tadd.eq\tr6, r0, r1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t32, r3, stack-[22]\n\tptr.add.s\tstack-[22], r2, r1\n\tld\tr1, r1\n\tsub.s!\t@CPI0_4[0], r1, r3\n\tjump.gt\t@.BB0_2\n\tsub!\tr1, r0, r3\n\tjump.eq\t@.BB0_64\n\tadd\tstack-[22], r0, r3\n\tadd\t32, r3, r3\n\tptr.add\tr2, r3, r3\n\tld\tr3, r3\n\tsub!\tr3, r0, r4\n\tadd\t0, r0, r4\n\tadd.ne\t1, r0, r4\n\tsub!\tr3, r4, r4\n\tjump.ne\t@.BB0_2\n\tsub!\tr3, r0, r3\n\tadd\tr0, r0, stack-[21]\n\tadd\tr8, r0, stack-[12]\n\tadd\tr11, r0, stack-[11]\n\tjump.eq\t@.BB0_77\n\tadd\t@CPI0_18[0], r0, r2\n\tst.2\t0, r2\n\tst.2\t4, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_19[0], r1, r1\n\tadd\t32770, r0, r2\n\tadd\tr12, r0, stack-[18]\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[11], r0, r11\n\tadd\tstack-[12], r0, r8\n\tadd\tstack-[18], r0, r12\n\tadd\tstack-[8], r0, r10\n\tadd\tstack-[9], r0, r9\n\tadd\tstack-[10], r0, r15\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tptr.add\tstack[@ptr_calldata], r0, r2\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tadd\t0, r0, r1\n\tadd.ne\t1, r0, r1\n\tadd\tr1, r0, stack-[21]\n.BB0_77:\n\tsub!\tr8, r0, r1\n\tjump.eq\t@.BB0_81\n\tadd\tr0, r0, r3\n.BB0_79:\n\tadd\tr3, r0, stack-[23]\n\tshl.s\t7, r3, r1\n\tadd\tr1, r11, r7\n\tptr.add\tr2, r7, r1\n\tld\tr1, r1\n\tsub.s!\t3, r1, r3\n\tjump.gt\t@.BB0_2\n\tsub.s!\t1, r1, r3\n\tcontext.caller\tr13\n\tjump.ne\t@.BB0_83\n\tadd\t64, r7, r1\n\tptr.add\tr2, r1, r1\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_85\n\tjump\t@.BB0_84\n.BB0_83:\n\tsub.s!\t2, r1, r1\n\tadd\t0, r0, r1\n\tadd.eq\t1, r0, r1\n\tand\tstack-[21], r1, r1\n\tand!\t1, r1, r1\n\tjump.eq\t@.BB0_85\n\tptr.add.s\tstack-[22], r2, r1\n\tld\tr1, r6\n\tsub.s!\t@CPI0_4[0], r6, r1\n\tjump.gt\t@.BB0_2\n\tadd\t64, r7, r1\n\tptr.add\tr2, r1, r1\n\tld\tr1, r3\n\tcontext.sp\tr1\n\tadd\tr1, r0, stack-[20]\n\tld.1\t64, r14\n\tadd\t100, r14, r1\n\tadd\tstack-[19], r0, r2\n\tst.1\tr1, r2\n\tand\t@CPI0_4[0], r13, r1\n\tadd\t36, r14, r2\n\tst.1\tr2, r1\n\tadd\t@CPI0_20[0], r0, r1\n\tst.1\tr14, r1\n\tadd\t4, r14, r1\n\tadd\tstack-[17], r0, r2\n\tst.1\tr1, r2\n\tadd\t68, r14, r1\n\tst.1\tr1, r3\n\tadd\t132, r14, r1\n\tst.1\tr1, r0\n\tcontext.gas_left\tr1\n\tsub.s!\t4, r6, r2\n\tjump.ne\t@.BB0_96\n\tcontext.sp\tr5\n\tsub.s\t30, r5, r5\n\tmul\t32, r5, r5, r0\n\tadd\tstack[@returndatasize], r0, r3\n\tsub.s!\t32, r3, r1\n\tadd\t32, r0, r4\n\tadd.lt\tr3, r0, r4\n\tadd\t0, r0, stack-[30]\n\tjump\t@.BB0_101\n.BB0_96:\n\tadd\tr7, r0, stack-[14]\n\tadd\tr3, r0, stack-[7]\n\tadd\tr13, r0, stack-[16]\n\tadd\tr12, r0, stack-[18]\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd\t@CPI0_0[0], r0, r3\n\tadd.ge\tr3, r0, r1\n\tsub.s!\t@CPI0_0[0], r14, r2\n\tadd\tr3, r0, r2\n\tadd.lt\tr14, r0, r2\n\tshl.s\t64, r2, r2\n\tshl.s\t192, r1, r1\n\tor\tr1, r2, r1\n\tor\t@CPI0_21[0], r1, r1\n\tadd\tr6, r0, stack-[15]\n\tadd\tr6, r0, r2\n\tadd\tr14, r0, stack-[13]\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t32, r3, r4\n\tadd\t32, r0, r4\n\tadd.lt\tr3, r0, r4\n\tshr.s!\t5, r4, r5\n\tadd\tstack-[13], r0, r14\n\tjump.eq\t@.BB0_171\n\tadd\tr0, r0, r6\n.BB0_98:\n\tshl.s\t5, r6, r7\n\tadd\tr14, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_98\n.BB0_171:\n\tand!\t31, r4, r6\n\tadd\tstack-[9], r0, r9\n\tadd\tstack-[8], r0, r10\n\tadd\tstack-[18], r0, r12\n\tjump.eq\t@.BB0_100\n\tshl.s\t5, r5, r5\n\tptr.add\tr1, r5, r7\n\tadd\tr14, r5, r5\n\tshl.s\t3, r6, r6\n\tld.1\tr5, r8\n\tshl\tr8, r6, r8\n\tshr\tr8, r6, r8\n\tld\tr7, r7\n\tsub\t256, r6, r6\n\tshr\tr7, r6, r7\n\tshl\tr7, r6, r6\n\tor\tr6, r8, r6\n\tst.1\tr5, r6\n.BB0_100:\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tcontext.sp\tr5\n\tsub.s\t29, r5, r5\n\tmul\t32, r5, r5, r0\n\tadd\t0, r0, stack-[29]\n\tand!\t1, r2, r2\n\tadd\tstack-[10], r0, r15\n\tadd\tstack-[12], r0, r8\n\tadd\tstack-[11], r0, r11\n\tadd\tstack-[16], r0, r13\n\tadd\tstack-[15], r0, r6\n\tadd\tstack-[14], r0, r7\n\tjump.eq\t@.BB0_107\n.BB0_101:\n\tadd\t31, r4, r1\n\tand\t96, r1, r2\n\tadd\tr2, r14, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_7[0], r1, r4\n\tjump.gt\t@.BB0_4\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_4\n\tst.1\t64, r1\n\tsub.s!\t32, r3, r2\n\tjump.lt\t@.BB0_2\n\tld.1\tr14, r2\n\tand\t@CPI0_9[0], r2, r3\n\tsub!\tr2, r3, r3\n\tjump.ne\t@.BB0_2\n\tshr.s\t5, r5, r3\n\tadd\tr2, r0, stack[r3]\n\tsub.s!\t@CPI0_20[0], r2, r2\n\tjump.ne\t@.BB0_106\n\tcontext.sp\tr1\n\tsub\tstack-[20], r1, r1\n\tnop\tstack+=[r1]\n\tptr.add\tstack[@ptr_calldata], r0, r2\n.BB0_85:\n\tptr.add\tr2, r7, r1\n\tld\tr1, r3\n\tsub.s!\t3, r3, r1\n\tjump.gt\t@.BB0_2\n\tadd\t32, r7, r1\n\tptr.add\tr2, r1, r4\n\tld\tr4, r5\n\tsub.s!\t@CPI0_4[0], r5, r4\n\tjump.gt\t@.BB0_2\n\tptr.add.s\tstack-[22], r2, r4\n\tld\tr4, r6\n\tsub.s!\t@CPI0_4[0], r6, r4\n\tjump.gt\t@.BB0_2\n\tld.1\t64, r4\n\tsub.s!\t@CPI0_17[0], r4, r7\n\tjump.gt\t@.BB0_4\n\tadd\t192, r4, r7\n\tst.1\t64, r7\n\tadd\t96, r4, r7\n\tst.1\tr7, r6\n\tand\t@CPI0_4[0], r13, r6\n\tadd\t64, r4, r7\n\tst.1\tr7, r6\n\tadd\t32, r4, r6\n\tst.1\tr6, r5\n\tst.1\tr4, r3\n\tadd\t32, r1, r3\n\tptr.add\tr2, r3, r3\n\tld\tr3, r3\n\tadd\t128, r4, r5\n\tst.1\tr5, r3\n\tadd\t64, r1, r1\n\tptr.add\tr2, r1, r1\n\tld\tr1, r1\n\tadd\t160, r4, r3\n\tst.1\tr3, r1\n\tld.1\tr9, r1\n\tsub!\tr1, r12, r1\n\tjump.le\t@.BB0_90\n\tshl.s\t5, r12, r1\n\tadd\tr10, r1, r1\n\tst.1\tr1, r4\n\tld.1\tr9, r1\n\tsub!\tr1, r12, r1\n\tjump.le\t@.BB0_90\n\tadd\t1, r12, r12\n\tadd\tstack-[23], r0, r3\n\tadd\t1, r3, r3\n\tsub!\tr3, r8, r1\n\tjump.lt\t@.BB0_79\n\tjump\t@.BB0_81\n.BB0_126:\n\tadd\tstack-[24], r0, r5\n\tsub\tr1, r5, r1\n\tadd\t@CPI0_0[0], r0, r3\n\tsub.s!\t@CPI0_0[0], r5, r4\n\tadd\tr3, r0, r4\n\tadd.lt\tr5, r0, r4\n\tshl.s\t64, r4, r4\n\tsub.s!\t@CPI0_0[0], r1, r5\n\tadd.ge\tr3, r0, r1\n\tshl.s\t96, r1, r1\n\tor\tr1, r4, r1\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t192, r2, r2\n\tor\tr1, r2, r1\n\tadd\tstack-[17], r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tstack-[24], r0, r10\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t32, r3, r4\n\tadd\t32, r0, r4\n\tadd.lt\tr3, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_174\n\tadd\tr0, r0, r7\n.BB0_128:\n\tshl.s\t5, r7, r8\n\tadd\tr10, r8, r9\n\tptr.add\tr1, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_128\n.BB0_174:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_130\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tadd\tstack-[24], r6, r6\n\tshl.s\t3, r5, r5\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_130:\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tcontext.sp\tr5\n\tsub.s\t27, r5, r5\n\tmul\t32, r5, r5, r0\n\tadd\t0, r0, stack-[27]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_137\n.BB0_131:\n\tadd\t31, r4, r1\n\tand\t96, r1, r2\n\tadd\tstack-[24], r2, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_7[0], r1, r4\n\tjump.gt\t@.BB0_4\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_4\n\tst.1\t64, r1\n\tsub.s!\t32, r3, r2\n\tjump.lt\t@.BB0_2\n\tadd\tstack-[24], r0, r2\n\tld.1\tr2, r2\n\tand\t@CPI0_9[0], r2, r3\n\tsub!\tr2, r3, r3\n\tjump.ne\t@.BB0_2\n\tshr.s\t5, r5, r3\n\tadd\tr2, r0, stack[r3]\n\tsub.s!\t@CPI0_31[0], r2, r2\n\tjump.ne\t@.BB0_136\n\tcontext.sp\tr1\n\tsub\tstack-[2], r1, r1\n\tnop\tstack+=[r1]\n\tadd\t@CPI0_10[0], r0, r1\n\tld.1\t64, r2\n\tst.1\tr2, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.lt\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI0_38[0], r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_72:\n\tadd\t@CPI0_29[0], r0, r1\n\tst.1\t0, r1\n\tadd\t33, r0, r1\n\tjump\t@.BB0_5\n.BB0_90:\n\tadd\t@CPI0_29[0], r0, r1\n\tst.1\t0, r1\n\tadd\t50, r0, r1\n\tjump\t@.BB0_5\n.BB0_137:\n\tsub.s!\t4, r3, r2\n\tjump.lt\t@.BB0_154\n\tld.1\t0, r2\n\tand\t@CPI0_22[0], r2, r2\n\tld\tr1, r4\n\tand\t@CPI0_9[0], r4, r4\n\tor\tr4, r2, r2\n\tcontext.sp\tr4\n\tsub.s\t26, r4, r4\n\tmul\t32, r4, r4, r0\n\tst.1\t0, r2\n\tand\t@CPI0_9[0], r2, r2\n\tsub.s!\t@CPI0_23[0], r2, r2\n\tjump.ne\t@.BB0_155\n\tsub.s!\t68, r3, r2\n\tjump.lt\t@.BB0_155\n\tld.1\t64, r5\n\tptr.add.s\t4, r1, r2\n\tsub.s\t4, r3, r6\n\tand\t31, r6, r4\n\tshr.s!\t5, r6, r7\n\tjump.eq\t@.BB0_172\n\tadd\tr0, r0, r8\n.BB0_142:\n\tshl.s\t5, r8, r9\n\tadd\tr5, r9, r10\n\tptr.add\tr2, r9, r9\n\tld\tr9, r9\n\tst.1\tr10, r9\n\tadd\t1, r8, r8\n\tsub!\tr8, r7, r9\n\tjump.lt\t@.BB0_142\n.BB0_172:\n\tsub!\tr4, r0, r8\n\tjump.eq\t@.BB0_144\n\tshl.s\t5, r7, r7\n\tptr.add\tr2, r7, r2\n\tadd\tr5, r7, r7\n\tshl.s\t3, r4, r4\n\tld.1\tr7, r8\n\tshl\tr8, r4, r8\n\tshr\tr8, r4, r8\n\tld\tr2, r2\n\tsub\t256, r4, r4\n\tshr\tr2, r4, r2\n\tshl\tr2, r4, r2\n\tor\tr2, r8, r2\n\tst.1\tr7, r2\n.BB0_144:\n\tcontext.sp\tr4\n\tsub.s\t26, r4, r4\n\tmul\t32, r4, r4, r0\n\tld.1\tr5, r7\n\tsub.s!\t@CPI0_7[0], r7, r2\n\tjump.gt\t@.BB0_155\n\tadd\t36, r7, r2\n\tsub!\tr2, r3, r2\n\tjump.gt\t@.BB0_155\n\tadd\tr7, r5, r2\n\tcontext.sp\tr4\n\tsub.s\t26, r4, r4\n\tmul\t32, r4, r4, r0\n\tld.1\tr2, r8\n\tsub.s!\t@CPI0_7[0], r8, r9\n\tjump.gt\t@.BB0_155\n\tadd\tr5, r6, r6\n\tadd\tr2, r8, r9\n\tcontext.sp\tr4\n\tsub.s\t26, r4, r4\n\tmul\t32, r4, r4, r0\n\tadd\t32, r9, r9\n\tsub!\tr9, r6, r6\n\tjump.gt\t@.BB0_155\n\tadd\tr7, r8, r4\n\tadd\t63, r4, r4\n\tand\tstack-[1], r4, r4\n\tadd\tr4, r5, r5\n\tsub!\tr5, r4, r4\n\tadd\t0, r0, r4\n\tadd.lt\t1, r0, r4\n\tadd\tr5, r0, r6\n\tsub.s!\t@CPI0_7[0], r5, r5\n\tjump.gt\t@.BB0_4\n\tand!\t1, r4, r4\n\tjump.ne\t@.BB0_4\n\tst.1\t64, r6\n\tcontext.sp\tr4\n\tsub.s\t26, r4, r4\n\tmul\t32, r4, r4, r0\n\tsub!\tr2, r0, r5\n\tjump.eq\t@.BB0_155\n\tadd\t@CPI0_32[0], r0, r1\n\tadd\tr6, r0, stack-[24]\n\tst.1\tr6, r1\n\tadd\t4, r6, r1\n\tjump\t@.BB0_152\n.BB0_154:\n\tadd\t96, r0, r2\n\tcontext.sp\tr4\n\tsub.s\t25, r4, r4\n\tmul\t32, r4, r4, r0\n\tsub!\tr3, r0, r5\n\tjump.eq\t@.BB0_161\n.BB0_155:\n\tadd\t63, r3, r2\n\tand\t@CPI0_3[0], r2, r5\n\tld.1\t64, r2\n\tadd\tr2, r5, r5\n\tsub!\tr5, r2, r6\n\tadd\t0, r0, r6\n\tadd.lt\t1, r0, r6\n\tsub.s!\t@CPI0_7[0], r5, r7\n\tjump.gt\t@.BB0_4\n\tand!\t1, r6, r6\n\tjump.ne\t@.BB0_4\n\tst.1\t64, r5\n\tand\t31, r3, r5\n\tst.1.inc\tr2, r3, r9\n\tshr.s!\t5, r3, r3\n\tjump.eq\t@.BB0_173\n\tadd\tr0, r0, r6\n.BB0_159:\n\tshl.s\t5, r6, r7\n\tadd\tr9, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r3, r7\n\tjump.lt\t@.BB0_159\n.BB0_173:\n\tadd\tr9, r0, stack-[19]\n\tsub!\tr5, r0, r6\n\tjump.eq\t@.BB0_161\n\tshl.s\t5, r3, r3\n\tptr.add\tr1, r3, r1\n\tadd\tstack-[19], r3, r3\n\tshl.s\t3, r5, r5\n\tld.1\tr3, r6\n\tshl\tr6, r5, r6\n\tshr\tr6, r5, r6\n\tld\tr1, r1\n\tsub\t256, r5, r5\n\tshr\tr1, r5, r1\n\tshl\tr1, r5, r1\n\tor\tr1, r6, r1\n\tst.1\tr3, r1\n.BB0_161:\n\tshr.s\t5, r4, r1\n\tadd\tr2, r0, stack[r1]\n\tadd\tstack-[19], r0, r1\n\tld.1\tr1, r1\n\tand\t@CPI0_9[0], r1, r1\n\tld.1\tr2, r3\n\tsub.s!\t4, r3, r4\n\tjump.ne\t@.BB0_163\n\tsub.s!\t@CPI0_34[0], r1, r1\n\tjump.ne\t@.BB0_167\n\tadd\t@CPI0_0[0], r0, r1\n\tadd\tstack-[19], r0, r3\n\tsub.s!\t@CPI0_0[0], r3, r2\n\tadd.lt\tr3, r0, r1\n\tjump\t@.BB0_66\n.BB0_163:\n\tsub.s!\t36, r3, r3\n\tjump.ne\t@.BB0_167\n\tsub.s!\t@CPI0_33[0], r1, r1\n\tjump.ne\t@.BB0_167\n\tadd\t@CPI0_0[0], r0, r1\n\tadd\tstack-[19], r0, r3\n\tsub.s!\t@CPI0_0[0], r3, r2\n\tadd.lt\tr3, r0, r1\n\tjump\t@.BB0_166\n.BB0_167:\n\tld.1\t64, r3\n\tadd\tr3, r0, stack-[24]\n\tadd\t@CPI0_35[0], r0, r1\n\tst.1\tr3, r1\n\tadd\t4, r3, r1\n.BB0_152:\n\tadd\tstack-[4], r0, r3\n\tadd\tstack-[17], r0, r4\n\tnear_call\tr0, @abi_encode_string_bytes32_address, @DEFAULT_UNWIND\n.BB0_153:\n\tadd\tstack-[24], r0, r4\n\tsub\tr1, r4, r1\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd.lt\tr4, r0, r2\n\tshl.s\t64, r2, r2\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_84:\n\tld.1\t64, r1\n\tadd\t@CPI0_28[0], r0, r2\n.BB0_65:\n\tst.1\tr1, r2\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n.BB0_66:\n\tshl.s\t64, r1, r1\n\tor\t@CPI0_6[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_136:\n\tadd\t36, r1, r2\n\tadd\tstack-[17], r0, r3\n\tst.1\tr2, r3\n\tadd\t@CPI0_36[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t4, r1, r2\n\tadd\tstack-[4], r0, r3\n\tst.1\tr2, r3\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tjump\t@.BB0_37\n.BB0_106:\n\tadd\t@CPI0_26[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t4, r1, r2\n\tst.1\tr2, r6\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n.BB0_166:\n\tshl.s\t64, r1, r1\n\tor\t@CPI0_27[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_107:\n\tsub.s!\t4, r3, r2\n\tjump.lt\t@.BB0_123\n\tld.1\t0, r2\n\tand\t@CPI0_22[0], r2, r2\n\tld\tr1, r4\n\tand\t@CPI0_9[0], r4, r4\n\tor\tr4, r2, r2\n\tst.1\t0, r2\n\tand\t@CPI0_9[0], r2, r2\n\tsub.s!\t@CPI0_23[0], r2, r2\n\tjump.ne\t@.BB0_123\n\tsub.s!\t68, r3, r2\n\tjump.lt\t@.BB0_123\n\tld.1\t64, r4\n\tptr.add.s\t4, r1, r2\n\tsub.s\t4, r3, r1\n\tand\t31, r1, r5\n\tshr.s!\t5, r1, r6\n\tjump.eq\t@.BB0_170\n\tadd\tr0, r0, r7\n.BB0_112:\n\tshl.s\t5, r7, r8\n\tadd\tr4, r8, r9\n\tptr.add\tr2, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_112\n.BB0_170:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_114\n\tshl.s\t5, r6, r6\n\tptr.add\tr2, r6, r2\n\tadd\tr4, r6, r6\n\tshl.s\t3, r5, r5\n\tld.1\tr6, r7\n\tshl\tr7, r5, r7\n\tshr\tr7, r5, r7\n\tld\tr2, r2\n\tsub\t256, r5, r5\n\tshr\tr2, r5, r2\n\tshl\tr2, r5, r2\n\tor\tr2, r7, r2\n\tst.1\tr6, r2\n.BB0_114:\n\tld.1\tr4, r5\n\tsub.s!\t@CPI0_7[0], r5, r2\n\tjump.gt\t@.BB0_123\n\tadd\t36, r5, r2\n\tsub!\tr2, r3, r2\n\tjump.gt\t@.BB0_123\n\tadd\tr5, r4, r2\n\tld.1\tr2, r3\n\tsub.s!\t@CPI0_7[0], r3, r6\n\tjump.gt\t@.BB0_123\n\tadd\tr4, r1, r1\n\tadd\tr2, r3, r6\n\tadd\t32, r6, r6\n\tsub!\tr6, r1, r1\n\tjump.gt\t@.BB0_123\n\tadd\tr5, r3, r1\n\tadd\t63, r1, r1\n\tand\tstack-[1], r1, r1\n\tadd\tr1, r4, r3\n\tsub!\tr3, r1, r1\n\tadd\t0, r0, r1\n\tadd.lt\t1, r0, r1\n\tadd\tr3, r0, r4\n\tsub.s!\t@CPI0_7[0], r3, r3\n\tjump.gt\t@.BB0_4\n\tand!\t1, r1, r1\n\tjump.ne\t@.BB0_4\n\tst.1\t64, r4\n\tsub!\tr2, r0, r1\n\tjump.ne\t@.BB0_121\n.BB0_123:\n\tnear_call\tr0, @extract_returndata, @DEFAULT_UNWIND\n\tadd\t@CPI0_25[0], r0, r2\n\tld.1\t64, r3\n\tadd\tr3, r0, stack-[24]\n\tst.1\tr3, r2\n\tadd\tr1, r0, r2\n\tadd\t4, r3, r1\n.BB0_122:\n\tadd\tstack-[15], r0, r3\n\tadd\tstack-[16], r0, r4\n\tadd\tstack-[7], r0, r5\n\tnear_call\tr0, @abi_encode_string_address_address_uint256, @DEFAULT_UNWIND\n\tjump\t@.BB0_153\n.BB0_64:\n\tld.1\t64, r1\n\tadd\t@CPI0_30[0], r0, r2\n\tjump\t@.BB0_65\n.BB0_121:\n\tadd\t@CPI0_24[0], r0, r1\n\tadd\tr4, r0, stack-[24]\n\tst.1\tr4, r1\n\tadd\t4, r4, r1\n\tjump\t@.BB0_122\n.func_end0:\n\nabi_encode_string_bytes32_address:\n.func_begin1:\n\tadd\t96, r0, r5\n\tst.1.inc\tr1, r5, r7\n\tld.1\tr2, r5\n\tadd\t96, r1, r6\n\tst.1\tr6, r5\n\tadd\t128, r1, r6\n\tsub!\tr5, r0, r8\n\tjump.eq\t@.BB1_5\n\tadd\tr0, r0, r8\n.BB1_2:\n\tadd\tr8, r6, r9\n\tadd\t32, r8, r8\n\tadd\tr8, r2, r10\n\tld.1\tr10, r10\n\tst.1\tr9, r10\n\tsub!\tr8, r5, r9\n\tjump.lt\t@.BB1_2\n\tsub!\tr8, r5, r2\n\tjump.le\t@.BB1_5\n\tadd\tr5, r6, r2\n\tst.1\tr2, r0\n.BB1_5:\n\tand\t@CPI1_0[0], r4, r2\n\tadd\t64, r1, r1\n\tst.1\tr1, r2\n\tst.1\tr7, r3\n\tadd\t31, r5, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r1\n\tadd\tr6, r1, r1\n\tret\n.func_end1:\n\nextract_returndata:\n.func_begin2:\n\tadd\t96, r0, r1\n\tadd!\tstack[@returndatasize], r0, r5\n\tjump.eq\t@.BB2_1\n\tadd\t63, r5, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r2\n\tld.1\t64, r1\n\tadd\tr1, r2, r2\n\tsub!\tr2, r1, r3\n\tadd\t0, r0, r3\n\tadd.lt\t1, r0, r3\n\tsub.s!\t@CPI2_0[0], r2, r4\n\tjump.gt\t@.BB2_4\n\tand!\t1, r3, r3\n\tjump.ne\t@.BB2_4\n\tst.1\t64, r2\n\tand\t31, r5, r2\n\tst.1.inc\tr1, r5, r3\n\tptr.add\tstack[@ptr_return_data], r0, r4\n\tshr.s!\t5, r5, r5\n\tjump.eq\t@.BB2_9\n\tadd\tr0, r0, r6\n.BB2_7:\n\tshl.s\t5, r6, r7\n\tadd\tr3, r7, r8\n\tptr.add\tr4, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB2_7\n.BB2_9:\n\tsub!\tr2, r0, r6\n\tjump.eq\t@.BB2_1\n\tshl.s\t5, r5, r5\n\tptr.add\tr4, r5, r4\n\tadd\tr3, r5, r3\n\tshl.s\t3, r2, r2\n\tld.1\tr3, r5\n\tshl\tr5, r2, r5\n\tshr\tr5, r2, r5\n\tld\tr4, r4\n\tsub\t256, r2, r2\n\tshr\tr4, r2, r4\n\tshl\tr4, r2, r2\n\tor\tr2, r5, r2\n\tst.1\tr3, r2\n.BB2_1:\n\tret\n.BB2_4:\n\tadd\t@CPI2_1[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI2_2[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end2:\n\nabi_encode_string_address_address_uint256:\n.func_begin3:\n\tadd\t128, r0, r6\n\tst.1.inc\tr1, r6, r8\n\tld.1\tr2, r6\n\tadd\t128, r1, r7\n\tst.1\tr7, r6\n\tadd\t160, r1, r7\n\tsub!\tr6, r0, r9\n\tjump.eq\t@.BB3_5\n\tadd\tr0, r0, r9\n.BB3_2:\n\tadd\tr9, r7, r10\n\tadd\t32, r9, r9\n\tadd\tr9, r2, r11\n\tld.1\tr11, r11\n\tst.1\tr10, r11\n\tsub!\tr9, r6, r10\n\tjump.lt\t@.BB3_2\n\tsub!\tr9, r6, r2\n\tjump.le\t@.BB3_5\n\tadd\tr6, r7, r2\n\tst.1\tr2, r0\n.BB3_5:\n\tadd\t96, r1, r2\n\tst.1\tr2, r5\n\tand\t@CPI3_0[0], r4, r2\n\tadd\t64, r1, r1\n\tst.1\tr1, r2\n\tand\t@CPI3_0[0], r3, r1\n\tst.1\tr8, r1\n\tadd\t31, r6, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r1\n\tadd\tr7, r1, r1\n\tret\n.func_end3:\n\n__farcall:\n.func_begin4:\n.tmp0:\n\tfar_call\tr1, r2, @.BB4_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB4_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end4:\n\n__staticcall:\n.func_begin5:\n.tmp3:\n\tfar_call.static\tr1, r2, @.BB5_2\n.tmp4:\n\tadd\t1, r0, r2\n\tret\n.BB5_2:\n.tmp5:\n\tadd\tr0, r0, r2\n\tret\n.func_end5:\n\n\t.data\n\t.p2align\t5\ncalldatasize:\n\t.cell 0\n\n\t.p2align\t5\nreturndatasize:\n\t.cell 0\n\n\t.p2align\t5\nptr_calldata:\n.cell\t0\n\n\t.p2align\t5\nptr_return_data:\n.cell\t0\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\n\t.cell 4294967295\nCPI0_1:\n\t.cell -18446744073709551361\nCPI0_2:\n\t.cell -18446744073709551393\nCPI0_3:\n\t.cell 8589934560\nCPI0_4:\nCPI1_0:\nCPI3_0:\n\t.cell 1461501637330902918203684832716283019655932542975\nCPI0_5:\n\t.cell 4789351084384376328292430735797343063414703799702344938196227345099501076480\nCPI0_6:\n\t.cell 316912650057057350374175801344\nCPI0_7:\nCPI2_0:\n\t.cell 18446744073709551615\nCPI0_8:\n\t.cell 53919893334301279589334030174039261367556698453455181869024116998144\nCPI0_9:\n\t.cell -26959946667150639794667015087019630673637144422540572481103610249216\nCPI0_10:\n\t.cell 22715658681948634866532221854082318211641529021120963482612109879780566892544\nCPI0_11:\n\t.cell -57896044618658097711785492504343953926634992332820282019728792003956564819968\nCPI0_12:\n\t.cell 22182216476136578060272566318850604970565072242024486780356928325126096266030\nCPI0_13:\n\t.cell 904625751086426111047927909714404454142933107862120802609382293630030446592\nCPI0_14:\n\t.cell -452312848583266388373324160190187140051835877600158453279131187530910662656\nCPI0_15:\n\t.cell 18446744073709551487\nCPI0_16:\n\t.cell 904625697166532776746648320380374280103671755200316906558262375061821325312\nCPI0_17:\n\t.cell 18446744073709551423\nCPI0_18:\n\t.cell 10867283408178898638301172343726954674910073630256871736220740970449699113859\nCPI0_19:\n\t.cell 904625751086426111047927909714404454142933105326819602152923490636624035840\nCPI0_20:\n\t.cell 9518847204935358166548570266051330015907116135037852959641967396525866745856\nCPI0_21:\n\t.cell 12993418652339351365341207855104\nCPI0_22:\n\t.cell 26959946667150639794667015087019630673637144422540572481103610249215\nCPI0_23:\n\t.cell 3963877391197344453575983046348115674221700746820753546331534351508065746944\nCPI0_24:\n\t.cell -34248321484222970833349202028606296335575390616391516737510051738746934525952\nCPI0_25:\n\t.cell -35115828969457690613582310954617997771344274813885179586741482993150127505408\nCPI0_26:\n\t.cell -31269155983283623495369592940309482149590502527781191065807391864969821683712\nCPI0_27:\nCPI2_2:\n\t.cell 2852213850513516153367582212096\nCPI0_28:\n\t.cell -29416490231953938586397029754477683441559742261876896337688516500360779530240\nCPI0_29:\nCPI2_1:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_30:\n\t.cell -17893851865769009240522981232172466565840367145105543076234505953482547134464\nCPI0_31:\n\t.cell 34777365872773961339311961615113117744096016053484145012885398825620056571904\nCPI0_32:\n\t.cell -28313642308755634077928646251013434850497442937787038125639541782946294792192\nCPI0_33:\n\t.cell 47933402425489226065753524148184105187889222607776850187980235700039975960576\nCPI0_34:\n\t.cell 54819867146590288857485388290300400564144485858285641338065013407752539602944\nCPI0_35:\n\t.cell -48780154310503199917229192368624792994630655124168220571756784680227825516544\nCPI0_36:\n\t.cell 13105775474623002461630682147515452877583543583228640278845757668179239239680\nCPI0_37:\n\t.cell 5387515050969974956360988622848\nCPI0_38:\n\t.cell 2535301200456458802993406410752\n","bytecode":{"object":""},"methodIdentifiers":{"bulkTransfer(((uint8,address,uint256,uint256)[],address,bool)[],bytes32)":"32389b71"}},"irOptimized":"/// @use-src 0:\"contracts/helpers/TransferHelper.sol\", 7:\"seaport-types/src/interfaces/TransferHelperErrors.sol\", 8:\"seaport-types/src/interfaces/TransferHelperInterface.sol\"\nobject \"TransferHelper_470\" {\n    code {\n        {\n            /// @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\"\n            let _1 := memoryguard(0xe0)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            let programSize := datasize(\"TransferHelper_470\")\n            let argSize := sub(codesize(), programSize)\n            finalize_allocation(_1, argSize)\n            codecopy(_1, programSize, argSize)\n            if slt(sub(add(_1, argSize), _1), 32)\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\"\n            let value := mload(_1)\n            if iszero(eq(value, and(value, sub(shl(160, 1), 1))))\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\"\n            constructor_TransferHelper(value)\n            let _2 := mload(64)\n            let _3 := datasize(\"TransferHelper_470_deployed\")\n            codecopy(_2, dataoffset(\"TransferHelper_470_deployed\"), _3)\n            setimmutable(_2, \"26\", mload(128))\n            setimmutable(_2, \"28\", mload(160))\n            setimmutable(_2, \"30\", mload(192))\n            return(_2, _3)\n        }\n        function finalize_allocation(memPtr, size)\n        {\n            let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n            if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr))\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(0, 0x24)\n            }\n            mstore(64, newFreePtr)\n        }\n        /// @ast-id 56 @src 0:1821:2350  \"constructor(address conduitController) {...\"\n        function constructor_TransferHelper(var_conduitController)\n        {\n            /// @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\"\n            let _1 := and(/** @src 0:2053:2120  \"ConduitControllerInterface(...\" */ var_conduitController, /** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ sub(shl(160, 1), 1))\n            let _2 := 64\n            /// @src 0:2190:2236  \"controller...\"\n            let _3 := /** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ mload(_2)\n            /// @src 0:2190:2236  \"controller...\"\n            mstore(_3, /** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ shl(224, 0x0a96ad39))\n            /// @src 0:2190:2236  \"controller...\"\n            let _4 := staticcall(gas(), _1, _3, 4, _3, /** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ _2)\n            /// @src 0:2190:2236  \"controller...\"\n            if iszero(_4)\n            {\n                /// @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\"\n                let pos := mload(_2)\n                returndatacopy(pos, /** @src 0:2190:2236  \"controller...\" */ 0, /** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ returndatasize())\n                revert(pos, returndatasize())\n            }\n            /// @src 0:2190:2236  \"controller...\"\n            let expr_component := 0\n            let expr_component_1 := expr_component\n            if _4\n            {\n                let _5 := /** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ _2\n                /// @src 0:2190:2236  \"controller...\"\n                if gt(/** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ _2, /** @src 0:2190:2236  \"controller...\" */ returndatasize()) { _5 := returndatasize() }\n                finalize_allocation(_3, _5)\n                /// @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\"\n                if slt(sub(/** @src 0:2190:2236  \"controller...\" */ add(_3, _5), /** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ _3), _2)\n                {\n                    revert(/** @src 0:2190:2236  \"controller...\" */ expr_component, expr_component)\n                }\n                /// @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\"\n                let value0 := mload(_3)\n                let value1 := mload(add(_3, 32))\n                /// @src 0:2190:2236  \"controller...\"\n                expr_component := value0\n                expr_component_1 := value1\n            }\n            /// @src 0:2130:2236  \"(_CONDUIT_CREATION_CODE_HASH, _CONDUIT_RUNTIME_CODE_HASH) = controller...\"\n            mstore(192, expr_component_1)\n            mstore(160, expr_component)\n            /// @src 0:2311:2343  \"_CONDUIT_CONTROLLER = controller\"\n            mstore(128, _1)\n        }\n    }\n    /// @use-src 0:\"contracts/helpers/TransferHelper.sol\"\n    object \"TransferHelper_470_deployed\" {\n        code {\n            {\n                /// @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\"\n                mstore(64, 128)\n                if iszero(lt(calldatasize(), 4))\n                {\n                    let _1 := 0\n                    if eq(0x32389b71, shr(224, calldataload(_1)))\n                    {\n                        if callvalue() { revert(_1, _1) }\n                        if slt(add(calldatasize(), not(3)), 64) { revert(_1, _1) }\n                        let offset := calldataload(4)\n                        let _2 := 0xffffffffffffffff\n                        if gt(offset, _2) { revert(_1, _1) }\n                        if iszero(slt(add(offset, 35), calldatasize())) { revert(_1, _1) }\n                        let length := calldataload(add(4, offset))\n                        if gt(length, _2) { revert(_1, _1) }\n                        if gt(add(add(offset, shl(5, length)), 36), calldatasize()) { revert(_1, _1) }\n                        let ret := fun_bulkTransfer(add(offset, 36), length, calldataload(36))\n                        let memPos := mload(64)\n                        return(memPos, sub(abi_encode_bytes4(memPos, ret), memPos))\n                    }\n                }\n                revert(0, 0)\n            }\n            function abi_encode_bytes4(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(headStart, and(value0, shl(224, 0xffffffff)))\n            }\n            function abi_encode_address(value, pos)\n            {\n                mstore(pos, and(value, sub(shl(160, 1), 1)))\n            }\n            function abi_encode_bytes32_address_3148(headStart, value0) -> tail\n            {\n                tail := add(headStart, 64)\n                mstore(headStart, value0)\n                mstore(add(headStart, 32), 0)\n            }\n            function abi_encode_bytes32_address(headStart, value0, value1) -> tail\n            {\n                tail := add(headStart, 64)\n                mstore(headStart, value0)\n                mstore(add(headStart, 32), and(value1, sub(shl(160, 1), 1)))\n            }\n            function convert_uint160_to_address(value) -> converted\n            {\n                converted := and(value, sub(shl(160, 1), 1))\n            }\n            /// @ast-id 97 @src 0:2783:3381  \"function bulkTransfer(...\"\n            function fun_bulkTransfer(var_items_offset, var_items_length, var_conduitKey) -> var_magicValue\n            {\n                /// @src 0:3010:3110  \"if (conduitKey == bytes32(0)) {...\"\n                if /** @src 0:3014:3038  \"conduitKey == bytes32(0)\" */ iszero(var_conduitKey)\n                /// @src 0:3010:3110  \"if (conduitKey == bytes32(0)) {...\"\n                {\n                    /// @src 0:3061:3099  \"InvalidConduit(conduitKey, address(0))\"\n                    let _1 := /** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ mload(64)\n                    /// @src 0:3061:3099  \"InvalidConduit(conduitKey, address(0))\"\n                    mstore(_1, shl(225, 0x0e7ccd93))\n                    revert(_1, sub(abi_encode_bytes32_address_3148(add(_1, 4), var_conduitKey), _1))\n                }\n                /// @src 0:4233:4472  \"abi.encodePacked(...\"\n                let expr_mpos := /** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ mload(64)\n                /// @src 0:4233:4472  \"abi.encodePacked(...\"\n                let _2 := add(expr_mpos, 0x20)\n                let _3 := sub(abi_encode_packed_bytes1_address_bytes32_bytes32(_2, /** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ and(/** @src 0:4329:4348  \"_CONDUIT_CONTROLLER\" */ loadimmutable(\"26\"), /** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ sub(shl(160, 1), 1)), /** @src 0:4233:4472  \"abi.encodePacked(...\" */ var_conduitKey, /** @src 0:4419:4446  \"_CONDUIT_CREATION_CODE_HASH\" */ loadimmutable(\"28\")), /** @src 0:4233:4472  \"abi.encodePacked(...\" */ expr_mpos)\n                mstore(expr_mpos, add(_3, not(31)))\n                finalize_allocation(expr_mpos, _3)\n                /// @src 0:4123:4536  \"address(...\"\n                let expr := convert_uint160_to_address(/** @src 0:4144:4526  \"uint160(...\" */ convert_uint160_to_address(/** @src 0:4198:4494  \"keccak256(...\" */ keccak256(/** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ _2, mload(/** @src 0:4198:4494  \"keccak256(...\" */ expr_mpos))))\n                /// @src 0:4625:4661  \"uint256 sumOfItemsAcrossAllTransfers\"\n                let var_sumOfItemsAcrossAllTransfers := /** @src 0:3036:3037  \"0\" */ 0x00\n                /// @src 0:4821:4834  \"uint256 i = 0\"\n                let var_i := /** @src 0:3036:3037  \"0\" */ var_sumOfItemsAcrossAllTransfers\n                /// @src 0:4816:5201  \"for (uint256 i = 0; i < numTransfers; ++i) {...\"\n                for { }\n                /** @src 0:4836:4852  \"i < numTransfers\" */ lt(var_i, var_items_length)\n                /// @src 0:4821:4834  \"uint256 i = 0\"\n                {\n                    /// @src 0:4854:4857  \"++i\"\n                    var_i := /** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ add(/** @src 0:4854:4857  \"++i\" */ var_i, /** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ 1)\n                }\n                /// @src 0:4854:4857  \"++i\"\n                {\n                    /// @src 0:4984:5034  \"transfers[...\"\n                    let expr_offset := calldata_array_index_access_struct_TransferHelperItemsWithRecipient_calldata_dyn_calldata(var_items_offset, var_items_length, var_i)\n                    /// @src 0:5165:5179  \"transfer.items\"\n                    let expr_offset_1, expr_length := access_calldata_tail_array_struct_TransferHelperItem_calldata_dyn_calldata(expr_offset, expr_offset)\n                    /// @src 0:5133:5186  \"sumOfItemsAcrossAllTransfers += transfer.items.length\"\n                    var_sumOfItemsAcrossAllTransfers := /** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ add(/** @src 0:5133:5186  \"sumOfItemsAcrossAllTransfers += transfer.items.length\" */ var_sumOfItemsAcrossAllTransfers, /** @src 0:5165:5186  \"transfer.items.length\" */ expr_length)\n                }\n                /// @src 0:5380:5453  \"new ConduitTransfer[](...\"\n                let expr_mpos_1 := allocate_and_zero_memory_array_array_struct_ConduitTransfer_dyn(var_sumOfItemsAcrossAllTransfers)\n                /// @src 0:5542:5559  \"uint256 itemIndex\"\n                let var_itemIndex := /** @src 0:3036:3037  \"0\" */ 0x00\n                /// @src 0:5719:5732  \"uint256 i = 0\"\n                let var_i_1 := /** @src 0:3036:3037  \"0\" */ var_itemIndex\n                /// @src 0:5714:8493  \"for (uint256 i = 0; i < numTransfers; ++i) {...\"\n                for { }\n                /** @src 0:5734:5750  \"i < numTransfers\" */ lt(var_i_1, var_items_length)\n                /// @src 0:5719:5732  \"uint256 i = 0\"\n                {\n                    /// @src 0:5752:5755  \"++i\"\n                    var_i_1 := /** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ add(/** @src 0:5752:5755  \"++i\" */ var_i_1, /** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ 1)\n                }\n                /// @src 0:5752:5755  \"++i\"\n                {\n                    /// @src 0:5882:5932  \"transfers[...\"\n                    let expr_offset_2 := calldata_array_index_access_struct_TransferHelperItemsWithRecipient_calldata_dyn_calldata(var_items_offset, var_items_length, var_i_1)\n                    /// @src 0:6064:6078  \"transfer.items\"\n                    let expr_offset_3, expr_length_1 := access_calldata_tail_array_struct_TransferHelperItem_calldata_dyn_calldata(expr_offset_2, expr_offset_2)\n                    /// @src 0:6190:6208  \"transfer.recipient\"\n                    fun_checkRecipientIsNotZeroAddress(read_from_calldatat_address(add(expr_offset_2, /** @src 0:4233:4472  \"abi.encodePacked(...\" */ 0x20)))\n                    /// @src 0:6388:6478  \"transfer.validateERC721Receiver &&...\"\n                    let expr_1 := /** @src 0:6388:6419  \"transfer.validateERC721Receiver\" */ read_from_calldatat_bool(add(expr_offset_2, /** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ 64))\n                    /// @src 0:6388:6478  \"transfer.validateERC721Receiver &&...\"\n                    if expr_1\n                    {\n                        expr_1 := /** @src 0:6443:6478  \"transfer.recipient.code.length != 0\" */ iszero(iszero(/** @src 0:6443:6473  \"transfer.recipient.code.length\" */ extcodesize(/** @src 0:6443:6461  \"transfer.recipient\" */ read_from_calldatat_address(/** @src 0:6190:6208  \"transfer.recipient\" */ add(expr_offset_2, /** @src 0:4233:4472  \"abi.encodePacked(...\" */ 0x20)))))\n                    }\n                    /// @src 0:6799:6812  \"uint256 j = 0\"\n                    let var_j := /** @src 0:3036:3037  \"0\" */ 0x00\n                    /// @src 0:6794:8479  \"for (uint256 j = 0; j < numItemsInTransfer; ++j) {...\"\n                    for { }\n                    /** @src 0:6814:6836  \"j < numItemsInTransfer\" */ lt(var_j, expr_length_1)\n                    /// @src 0:6799:6812  \"uint256 j = 0\"\n                    {\n                        /// @src 0:6838:6841  \"++j\"\n                        var_j := /** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ add(/** @src 0:6838:6841  \"++j\" */ var_j, /** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ 1)\n                    }\n                    /// @src 0:6838:6841  \"++j\"\n                    {\n                        /// @src 0:6960:6976  \"transferItems[j]\"\n                        let expr_offset_4 := calldata_array_index_access_struct_TransferHelperItem_calldata_dyn_calldata(expr_offset_3, expr_length_1, var_j)\n                        /// @src 0:7003:7016  \"item.itemType\"\n                        let expr_2 := read_from_calldatat_enum_ConduitItemType(expr_offset_4)\n                        /// @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\"\n                        validator_assert_enum_ConduitItemType(expr_2)\n                        /// @src 0:6999:7283  \"if (item.itemType == ConduitItemType.ERC20) {...\"\n                        if /** @src 0:7003:7041  \"item.itemType == ConduitItemType.ERC20\" */ eq(expr_2, /** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ 1)\n                        /// @src 0:6999:7283  \"if (item.itemType == ConduitItemType.ERC20) {...\"\n                        {\n                            /// @src 0:7147:7261  \"if (item.identifier != 0) {...\"\n                            if /** @src 0:7151:7171  \"item.identifier != 0\" */ iszero(iszero(/** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ calldataload(/** @src 0:7151:7166  \"item.identifier\" */ add(expr_offset_4, /** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ 64))))\n                            /// @src 0:7147:7261  \"if (item.identifier != 0) {...\"\n                            {\n                                /// @src 0:7210:7234  \"InvalidERC20Identifier()\"\n                                let _4 := /** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ mload(64)\n                                /// @src 0:7210:7234  \"InvalidERC20Identifier()\"\n                                mstore(_4, shl(224, 0xbef6db47))\n                                revert(_4, 4)\n                            }\n                        }\n                        /// @src 0:7420:7433  \"item.itemType\"\n                        let expr_3 := read_from_calldatat_enum_ConduitItemType(expr_offset_4)\n                        /// @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\"\n                        validator_assert_enum_ConduitItemType(expr_3)\n                        /// @src 0:7416:7918  \"if (item.itemType == ConduitItemType.ERC721) {...\"\n                        if /** @src 0:7420:7459  \"item.itemType == ConduitItemType.ERC721\" */ eq(expr_3, /** @src 0:7437:7459  \"ConduitItemType.ERC721\" */ 2)\n                        /// @src 0:7416:7918  \"if (item.itemType == ConduitItemType.ERC721) {...\"\n                        {\n                            /// @src 0:7487:7896  \"if (callERC721Receiver) {...\"\n                            if expr_1\n                            {\n                                /// @src 0:7772:7790  \"transfer.recipient\"\n                                let expr_4 := read_from_calldatat_address(/** @src 0:6190:6208  \"transfer.recipient\" */ add(expr_offset_2, /** @src 0:4233:4472  \"abi.encodePacked(...\" */ 0x20))\n                                /// @src 0:7824:7839  \"item.identifier\"\n                                fun_checkERC721Receiver(expr, expr_4, /** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ calldataload(/** @src 0:7824:7839  \"item.identifier\" */ add(expr_offset_4, /** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ 64)))\n                            }\n                        }\n                        /// @src 0:8124:8137  \"item.itemType\"\n                        let expr_5 := read_from_calldatat_enum_ConduitItemType(expr_offset_4)\n                        /// @src 0:8163:8173  \"item.token\"\n                        let expr_6 := read_from_calldatat_address(add(expr_offset_4, /** @src 0:4233:4472  \"abi.encodePacked(...\" */ 0x20))\n                        /// @src 0:8235:8253  \"transfer.recipient\"\n                        let expr_7 := read_from_calldatat_address(/** @src 0:6190:6208  \"transfer.recipient\" */ add(expr_offset_2, /** @src 0:4233:4472  \"abi.encodePacked(...\" */ 0x20))\n                        /// @src 0:8320:8331  \"item.amount\"\n                        let _5 := 96\n                        /// @src 0:8083:8353  \"ConduitTransfer(...\"\n                        let expr_mpos_2 := /** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ allocate_memory()\n                        /// @src 0:8083:8353  \"ConduitTransfer(...\"\n                        write_to_memory_enum_ConduitItemType(expr_mpos_2, expr_5)\n                        write_to_memory_address(add(expr_mpos_2, /** @src 0:4233:4472  \"abi.encodePacked(...\" */ 0x20), /** @src 0:8083:8353  \"ConduitTransfer(...\" */ expr_6)\n                        write_to_memory_address(add(expr_mpos_2, /** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ 64), /** @src 0:8199:8209  \"msg.sender\" */ caller())\n                        /// @src 0:8083:8353  \"ConduitTransfer(...\"\n                        write_to_memory_address(add(expr_mpos_2, /** @src 0:8320:8331  \"item.amount\" */ _5), /** @src 0:8083:8353  \"ConduitTransfer(...\" */ expr_7)\n                        /// @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\"\n                        mstore(/** @src 0:8083:8353  \"ConduitTransfer(...\" */ add(expr_mpos_2, 128), /** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ calldataload(/** @src 0:8279:8294  \"item.identifier\" */ add(expr_offset_4, /** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ 64)))\n                        mstore(/** @src 0:8083:8353  \"ConduitTransfer(...\" */ add(expr_mpos_2, 160), /** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ calldataload(/** @src 0:8320:8331  \"item.amount\" */ add(expr_offset_4, _5)))\n                        /// @src 0:8053:8353  \"conduitTransfers[itemIndex] = ConduitTransfer(...\"\n                        mstore(memory_array_index_access_struct_ConduitTransfer_dyn(expr_mpos_1, var_itemIndex), expr_mpos_2)\n                        pop(memory_array_index_access_struct_ConduitTransfer_dyn(expr_mpos_1, var_itemIndex))\n                        /// @src 0:8449:8460  \"++itemIndex\"\n                        var_itemIndex := /** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ add(/** @src 0:8449:8460  \"++itemIndex\" */ var_itemIndex, /** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ 1)\n                    }\n                }\n                /// @src 0:8598:8649  \"ConduitInterface(conduit).execute(conduitTransfers)\"\n                let _6 := /** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ mload(64)\n                let _7 := shl(225, 0x2671a551)\n                /// @src 0:8598:8649  \"ConduitInterface(conduit).execute(conduitTransfers)\"\n                mstore(_6, /** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ _7)\n                /// @src 0:8598:8649  \"ConduitInterface(conduit).execute(conduitTransfers)\"\n                let _8 := 4\n                let trySuccessCondition := call(gas(), /** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ and(/** @src 0:8598:8623  \"ConduitInterface(conduit)\" */ expr, /** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ sub(shl(160, 1), 1)), /** @src 0:3036:3037  \"0\" */ 0x00, /** @src 0:8598:8649  \"ConduitInterface(conduit).execute(conduitTransfers)\" */ _6, sub(abi_encode_array_struct_ConduitTransfer_dyn(add(_6, _8), expr_mpos_1), _6), _6, /** @src 0:4233:4472  \"abi.encodePacked(...\" */ 0x20)\n                /// @src 0:8598:8649  \"ConduitInterface(conduit).execute(conduitTransfers)\"\n                let expr_8 := /** @src 0:3036:3037  \"0\" */ 0x00\n                /// @src 0:8598:8649  \"ConduitInterface(conduit).execute(conduitTransfers)\"\n                if trySuccessCondition\n                {\n                    let _9 := /** @src 0:4233:4472  \"abi.encodePacked(...\" */ 0x20\n                    /// @src 0:8598:8649  \"ConduitInterface(conduit).execute(conduitTransfers)\"\n                    if gt(/** @src 0:4233:4472  \"abi.encodePacked(...\" */ 0x20, /** @src 0:8598:8649  \"ConduitInterface(conduit).execute(conduitTransfers)\" */ returndatasize()) { _9 := returndatasize() }\n                    finalize_allocation(_6, _9)\n                    expr_8 := abi_decode_bytes4_fromMemory(_6, add(_6, _9))\n                }\n                /// @src 0:8594:11482  \"try ConduitInterface(conduit).execute(conduitTransfers) returns (...\"\n                switch iszero(trySuccessCondition)\n                case 0 {\n                    /// @src 0:8842:9092  \"if (conduitMagicValue != ConduitInterface.execute.selector) {...\"\n                    if /** @src 0:8846:8900  \"conduitMagicValue != ConduitInterface.execute.selector\" */ iszero(eq(/** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ and(/** @src 0:8846:8900  \"conduitMagicValue != ConduitInterface.execute.selector\" */ expr_8, /** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ shl(224, 0xffffffff)), _7))\n                    /// @src 0:8842:9092  \"if (conduitMagicValue != ConduitInterface.execute.selector) {...\"\n                    {\n                        /// @src 0:9042:9077  \"InvalidConduit(conduitKey, conduit)\"\n                        let _10 := /** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ mload(64)\n                        /// @src 0:9042:9077  \"InvalidConduit(conduitKey, conduit)\"\n                        mstore(_10, /** @src 0:3061:3099  \"InvalidConduit(conduitKey, address(0))\" */ shl(225, 0x0e7ccd93))\n                        /// @src 0:9042:9077  \"InvalidConduit(conduitKey, conduit)\"\n                        revert(_10, sub(abi_encode_bytes32_address(add(_10, /** @src 0:8598:8649  \"ConduitInterface(conduit).execute(conduitTransfers)\" */ _8), /** @src 0:9042:9077  \"InvalidConduit(conduitKey, conduit)\" */ var_conduitKey, expr), _10))\n                    }\n                }\n                default /// @src 0:8594:11482  \"try ConduitInterface(conduit).execute(conduitTransfers) returns (...\"\n                {\n                    let _11 := /** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ 1\n                    /// @src 0:8594:11482  \"try ConduitInterface(conduit).execute(conduitTransfers) returns (...\"\n                    if eq(147028384, return_data_selector())\n                    {\n                        /// @src 0:9103:9357  \"catch Error(string memory reason) {...\"\n                        let _12 := try_decode_error_message()\n                        if _12\n                        {\n                            _11 := /** @src 0:3036:3037  \"0\" */ 0x00\n                            /// @src 0:9293:9346  \"ConduitErrorRevertString(reason, conduitKey, conduit)\"\n                            let _13 := /** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ mload(64)\n                            /// @src 0:9293:9346  \"ConduitErrorRevertString(reason, conduitKey, conduit)\"\n                            mstore(_13, shl(225, 0x60b385ef))\n                            revert(_13, sub(abi_encode_string_bytes32_address(add(_13, /** @src 0:8598:8649  \"ConduitInterface(conduit).execute(conduitTransfers)\" */ _8), /** @src 0:9293:9346  \"ConduitErrorRevertString(reason, conduitKey, conduit)\" */ _12, var_conduitKey, expr), _13))\n                        }\n                    }\n                    /// @src 0:8594:11482  \"try ConduitInterface(conduit).execute(conduitTransfers) returns (...\"\n                    if _11\n                    {\n                        /// @src 0:9358:11482  \"catch (bytes memory data) {...\"\n                        let var_data_mpos := extract_returndata()\n                        /// @src 0:10171:10456  \"assembly {...\"\n                        let _14 := add(var_data_mpos, /** @src 0:4233:4472  \"abi.encodePacked(...\" */ 0x20)\n                        /// @src 0:10171:10456  \"assembly {...\"\n                        let var_customErrorSelector := and(mload(_14), /** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ shl(224, 0xffffffff))\n                        /// @src 0:10651:10662  \"data.length\"\n                        let expr_9 := /** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ mload(/** @src 0:10651:10662  \"data.length\" */ var_data_mpos)\n                        /// @src 0:10651:10734  \"data.length == 4 &&...\"\n                        let expr_10 := /** @src 0:10651:10667  \"data.length == 4\" */ eq(expr_9, /** @src 0:8598:8649  \"ConduitInterface(conduit).execute(conduitTransfers)\" */ _8)\n                        /// @src 0:10651:10734  \"data.length == 4 &&...\"\n                        if expr_10\n                        {\n                            expr_10 := /** @src 0:10687:10734  \"customErrorSelector == InvalidItemType.selector\" */ eq(/** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ var_customErrorSelector, /** @src 0:10710:10734  \"InvalidItemType.selector\" */ shl(226, 0x1e4cbc7f))\n                        }\n                        /// @src 0:10630:11207  \"if (...\"\n                        switch expr_10\n                        case 0 {\n                            /// @src 0:10936:11032  \"data.length == 36 &&...\"\n                            let expr_11 := /** @src 0:10936:10953  \"data.length == 36\" */ eq(expr_9, /** @src 0:10951:10953  \"36\" */ 0x24)\n                            /// @src 0:10936:11032  \"data.length == 36 &&...\"\n                            if expr_11\n                            {\n                                expr_11 := /** @src 0:10973:11032  \"customErrorSelector == InvalidERC721TransferAmount.selector\" */ eq(/** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ var_customErrorSelector, /** @src 0:10996:11032  \"InvalidERC721TransferAmount.selector\" */ shl(224, 0x69f95827))\n                            }\n                            /// @src 0:10915:11207  \"if (...\"\n                            if expr_11\n                            {\n                                /// @src 0:11115:11193  \"assembly {...\"\n                                revert(_14, /** @src 0:10951:10953  \"36\" */ 0x24)\n                            }\n                        }\n                        default /// @src 0:10630:11207  \"if (...\"\n                        {\n                            /// @src 0:10817:10895  \"assembly {...\"\n                            revert(_14, /** @src 0:8598:8649  \"ConduitInterface(conduit).execute(conduitTransfers)\" */ _8)\n                        }\n                        /// @src 0:11421:11471  \"ConduitErrorRevertBytes(data, conduitKey, conduit)\"\n                        let _15 := /** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ mload(64)\n                        /// @src 0:11421:11471  \"ConduitErrorRevertBytes(data, conduitKey, conduit)\"\n                        mstore(_15, shl(226, 0x2509da4f))\n                        revert(_15, sub(abi_encode_string_bytes32_address(add(_15, /** @src 0:8598:8649  \"ConduitInterface(conduit).execute(conduitTransfers)\" */ _8), /** @src 0:11421:11471  \"ConduitErrorRevertBytes(data, conduitKey, conduit)\" */ var_data_mpos, var_conduitKey, expr), _15))\n                    }\n                }\n                /// @src 0:3335:3374  \"magicValue = this.bulkTransfer.selector\"\n                var_magicValue := /** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ shl(224, 0x32389b71)\n            }\n            function abi_encode_packed_bytes1_address_bytes32_bytes32(pos, value1, value2, value3) -> end\n            {\n                mstore(pos, shl(248, 255))\n                mstore(add(pos, 1), and(shl(96, value1), not(0xffffffffffffffffffffffff)))\n                mstore(add(pos, 21), value2)\n                mstore(add(pos, 53), value3)\n                end := add(pos, 85)\n            }\n            function panic_error_0x41()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(0, 0x24)\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, and(add(size, 31), /** @src 0:4233:4472  \"abi.encodePacked(...\" */ not(31)))\n                /// @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\"\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                mstore(64, newFreePtr)\n            }\n            function panic_error_0x32()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x32)\n                revert(0, 0x24)\n            }\n            function calldata_array_index_access_struct_TransferHelperItemsWithRecipient_calldata_dyn_calldata(base_ref, length, index) -> addr\n            {\n                if iszero(lt(index, length)) { panic_error_0x32() }\n                let rel_offset_of_tail := calldataload(add(base_ref, shl(5, index)))\n                if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), not(94))))\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\"\n                addr := add(base_ref, rel_offset_of_tail)\n            }\n            function access_calldata_tail_array_struct_TransferHelperItem_calldata_dyn_calldata(base_ref, ptr_to_tail) -> addr, length\n            {\n                let rel_offset_of_tail := calldataload(ptr_to_tail)\n                if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), not(30)))) { revert(0, 0) }\n                let addr_1 := add(base_ref, rel_offset_of_tail)\n                length := calldataload(addr_1)\n                if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n                addr := add(addr_1, 0x20)\n                if sgt(addr, sub(calldatasize(), shl(7, length))) { revert(0, 0) }\n            }\n            function allocate_memory() -> memPtr\n            {\n                memPtr := mload(64)\n                let newFreePtr := add(memPtr, 192)\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                mstore(64, newFreePtr)\n            }\n            function array_allocation_size_array_struct_ConduitTransfer_dyn(length) -> size\n            {\n                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n                size := add(shl(5, length), 0x20)\n            }\n            function allocate_and_zero_memory_array_array_struct_ConduitTransfer_dyn(length) -> memPtr\n            {\n                let _1 := array_allocation_size_array_struct_ConduitTransfer_dyn(length)\n                let _2 := 64\n                let memPtr_1 := mload(_2)\n                finalize_allocation(memPtr_1, _1)\n                mstore(memPtr_1, length)\n                memPtr := memPtr_1\n                let _3 := add(array_allocation_size_array_struct_ConduitTransfer_dyn(length), /** @src 0:4233:4472  \"abi.encodePacked(...\" */ not(31))\n                /// @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\"\n                let i := /** @src -1:-1:-1 */ 0\n                /// @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\"\n                for { } lt(i, _3) { i := add(i, 32) }\n                {\n                    let memPtr_2 := mload(_2)\n                    let newFreePtr := add(memPtr_2, 192)\n                    if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr_2)) { panic_error_0x41() }\n                    mstore(_2, newFreePtr)\n                    mstore(memPtr_2, /** @src -1:-1:-1 */ 0)\n                    /// @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\"\n                    let _4 := 32\n                    mstore(add(memPtr_2, _4), /** @src -1:-1:-1 */ 0)\n                    /// @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\"\n                    mstore(add(memPtr_2, _2), /** @src -1:-1:-1 */ 0)\n                    /// @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\"\n                    mstore(add(memPtr_2, 96), /** @src -1:-1:-1 */ 0)\n                    /// @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\"\n                    mstore(add(memPtr_2, 128), /** @src -1:-1:-1 */ 0)\n                    /// @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\"\n                    mstore(add(memPtr_2, 160), /** @src -1:-1:-1 */ 0)\n                    /// @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\"\n                    mstore(add(add(memPtr_1, i), _4), memPtr_2)\n                }\n            }\n            function read_from_calldatat_address(ptr) -> returnValue\n            {\n                let value := calldataload(ptr)\n                if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n                returnValue := value\n            }\n            function read_from_calldatat_bool(ptr) -> returnValue\n            {\n                let value := calldataload(ptr)\n                if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n                returnValue := value\n            }\n            function calldata_array_index_access_struct_TransferHelperItem_calldata_dyn_calldata(base_ref, length, index) -> addr\n            {\n                if iszero(lt(index, length)) { panic_error_0x32() }\n                addr := add(base_ref, shl(7, index))\n            }\n            function validator_assert_enum_ConduitItemType(value)\n            {\n                if iszero(lt(value, 4))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x21)\n                    revert(0, 0x24)\n                }\n            }\n            function read_from_calldatat_enum_ConduitItemType(ptr) -> returnValue\n            {\n                let value := calldataload(ptr)\n                if iszero(lt(value, 4)) { revert(0, 0) }\n                returnValue := value\n            }\n            function write_to_memory_enum_ConduitItemType(memPtr, value)\n            {\n                if iszero(lt(value, 4))\n                {\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ shl(224, 0x4e487b71))\n                    mstore(4, 0x21)\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ 0x24)\n                }\n                mstore(memPtr, value)\n            }\n            function write_to_memory_address(memPtr, value)\n            {\n                mstore(memPtr, and(value, sub(shl(160, 1), 1)))\n            }\n            function memory_array_index_access_struct_ConduitTransfer_dyn(baseRef, index) -> addr\n            {\n                if iszero(lt(index, mload(baseRef))) { panic_error_0x32() }\n                addr := add(add(baseRef, shl(5, index)), 32)\n            }\n            function abi_decode_bytes4_fromMemory(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n                let value := mload(headStart)\n                if iszero(eq(value, and(value, shl(224, 0xffffffff))))\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\"\n                value0 := value\n            }\n            function abi_encode_array_struct_ConduitTransfer_dyn(headStart, value0) -> tail\n            {\n                let _1 := 32\n                let tail_1 := add(headStart, _1)\n                mstore(headStart, _1)\n                let pos := tail_1\n                let length := mload(value0)\n                mstore(tail_1, length)\n                let _2 := 64\n                pos := add(headStart, _2)\n                let srcPtr := add(value0, _1)\n                let i := 0\n                let i_1 := i\n                for { } lt(i_1, length) { i_1 := add(i_1, 1) }\n                {\n                    let _3 := mload(srcPtr)\n                    let _4 := mload(_3)\n                    let _5 := 4\n                    if iszero(lt(_4, _5))\n                    {\n                        mstore(i, shl(224, 0x4e487b71))\n                        mstore(_5, 0x21)\n                        revert(i, 0x24)\n                    }\n                    mstore(pos, _4)\n                    let memberValue0 := mload(add(_3, _1))\n                    let _6 := sub(shl(160, 1), 1)\n                    mstore(add(pos, _1), and(memberValue0, _6))\n                    mstore(add(pos, _2), and(mload(add(_3, _2)), _6))\n                    let _7 := 0x60\n                    let memberValue0_1 := mload(add(_3, _7))\n                    abi_encode_address(memberValue0_1, add(pos, _7))\n                    let _8 := 0x80\n                    mstore(add(pos, _8), mload(add(_3, _8)))\n                    let _9 := 0xa0\n                    mstore(add(pos, _9), mload(add(_3, _9)))\n                    pos := add(pos, 0xc0)\n                    srcPtr := add(srcPtr, _1)\n                }\n                tail := pos\n            }\n            function return_data_selector() -> sig\n            {\n                if gt(returndatasize(), 3)\n                {\n                    returndatacopy(0, 0, 4)\n                    sig := shr(224, mload(0))\n                }\n            }\n            function try_decode_error_message() -> ret\n            {\n                if lt(returndatasize(), 0x44) { leave }\n                let data := mload(64)\n                let _1 := not(3)\n                returndatacopy(data, 4, add(returndatasize(), _1))\n                let offset := mload(data)\n                let _2 := returndatasize()\n                let _3 := 0xffffffffffffffff\n                if or(gt(offset, _3), gt(add(offset, 0x24), _2)) { leave }\n                let msg := add(data, offset)\n                let length := mload(msg)\n                if gt(length, _3) { leave }\n                if gt(add(add(msg, length), 0x20), add(add(data, returndatasize()), _1)) { leave }\n                finalize_allocation(data, add(add(offset, length), 0x20))\n                ret := msg\n            }\n            function abi_encode_string(value, pos) -> end\n            {\n                let length := mload(value)\n                mstore(pos, length)\n                let i := 0\n                for { } lt(i, length) { i := add(i, 0x20) }\n                {\n                    let _1 := 0x20\n                    mstore(add(add(pos, i), _1), mload(add(add(value, i), _1)))\n                }\n                if gt(i, length)\n                {\n                    mstore(add(add(pos, length), 0x20), 0)\n                }\n                end := add(add(pos, and(add(length, 31), /** @src 0:4233:4472  \"abi.encodePacked(...\" */ not(31))), /** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ 0x20)\n            }\n            function abi_encode_string_bytes32_address(headStart, value0, value1, value2) -> tail\n            {\n                mstore(headStart, 96)\n                tail := abi_encode_string(value0, add(headStart, 96))\n                mstore(add(headStart, 32), value1)\n                mstore(add(headStart, 64), and(value2, sub(shl(160, 1), 1)))\n            }\n            function extract_returndata() -> data\n            {\n                switch returndatasize()\n                case 0 { data := 96 }\n                default {\n                    let _1 := returndatasize()\n                    if gt(_1, 0xffffffffffffffff) { panic_error_0x41() }\n                    let memPtr := mload(64)\n                    finalize_allocation(memPtr, add(and(add(_1, 31), /** @src 0:4233:4472  \"abi.encodePacked(...\" */ not(31)), /** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ 0x20))\n                    mstore(memPtr, _1)\n                    data := memPtr\n                    returndatacopy(add(memPtr, 0x20), /** @src -1:-1:-1 */ 0, /** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ returndatasize())\n                }\n            }\n            function abi_encode_address_address_uint256_stringliteral_c5d2(headStart, value0, value1, value2) -> tail\n            {\n                let _1 := sub(shl(160, 1), 1)\n                mstore(headStart, and(value0, _1))\n                mstore(add(headStart, 32), and(value1, _1))\n                mstore(add(headStart, 64), value2)\n                mstore(add(headStart, 96), 128)\n                mstore(add(headStart, 128), 0)\n                tail := add(headStart, 160)\n            }\n            function abi_encode_tuple_address(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n            }\n            function abi_encode_string_address_address_uint256(headStart, value0, value1, value2, value3) -> tail\n            {\n                mstore(headStart, 128)\n                tail := abi_encode_string(value0, add(headStart, 128))\n                let _1 := sub(shl(160, 1), 1)\n                mstore(add(headStart, 32), and(value1, _1))\n                mstore(add(headStart, 64), and(value2, _1))\n                mstore(add(headStart, 96), value3)\n            }\n            /// @ast-id 451 @src 0:12415:13648  \"function _checkERC721Receiver(...\"\n            function fun_checkERC721Receiver(var_conduit, var_recipient, var_tokenId)\n            {\n                /// @src 0:12620:12775  \"IERC721Receiver(recipient).onERC721Received(...\"\n                let _1 := /** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ mload(64)\n                let _2 := shl(225, 0x0a85bd01)\n                /// @src 0:12620:12775  \"IERC721Receiver(recipient).onERC721Received(...\"\n                mstore(_1, /** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ _2)\n                /// @src 0:12620:12775  \"IERC721Receiver(recipient).onERC721Received(...\"\n                let trySuccessCondition := call(gas(), /** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ and(/** @src 0:12620:12646  \"IERC721Receiver(recipient)\" */ var_recipient, /** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ sub(shl(160, 1), 1)), /** @src 0:12620:12775  \"IERC721Receiver(recipient).onERC721Received(...\" */ 0, _1, sub(abi_encode_address_address_uint256_stringliteral_c5d2(add(_1, 4), var_conduit, /** @src 0:12706:12716  \"msg.sender\" */ caller(), /** @src 0:12620:12775  \"IERC721Receiver(recipient).onERC721Received(...\" */ var_tokenId), _1), _1, 32)\n                let expr := 0\n                if trySuccessCondition\n                {\n                    let _3 := 32\n                    if gt(_3, returndatasize()) { _3 := returndatasize() }\n                    finalize_allocation(_1, _3)\n                    expr := abi_decode_bytes4_fromMemory(_1, add(_1, _3))\n                }\n                /// @src 0:12604:13642  \"try...\"\n                switch iszero(trySuccessCondition)\n                case 0 {\n                    /// @src 0:12884:13103  \"if (selector != IERC721Receiver.onERC721Received.selector) {...\"\n                    if /** @src 0:12888:12941  \"selector != IERC721Receiver.onERC721Received.selector\" */ iszero(eq(/** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ and(/** @src 0:12888:12941  \"selector != IERC721Receiver.onERC721Received.selector\" */ expr, /** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ shl(224, 0xffffffff)), _2))\n                    /// @src 0:12884:13103  \"if (selector != IERC721Receiver.onERC721Received.selector) {...\"\n                    {\n                        /// @src 0:13055:13088  \"InvalidERC721Recipient(recipient)\"\n                        let _4 := /** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ mload(64)\n                        /// @src 0:13055:13088  \"InvalidERC721Recipient(recipient)\"\n                        mstore(_4, shl(224, 0xbade48ef))\n                        revert(_4, sub(abi_encode_tuple_address(add(_4, /** @src 0:12620:12775  \"IERC721Receiver(recipient).onERC721Received(...\" */ 4), /** @src 0:13055:13088  \"InvalidERC721Recipient(recipient)\" */ var_recipient), _4))\n                    }\n                }\n                default /// @src 0:12604:13642  \"try...\"\n                {\n                    let _5 := 1\n                    if eq(147028384, return_data_selector())\n                    {\n                        /// @src 0:13373:13642  \"catch Error(string memory reason) {...\"\n                        let _6 := try_decode_error_message()\n                        if _6\n                        {\n                            _5 := /** @src 0:12620:12775  \"IERC721Receiver(recipient).onERC721Received(...\" */ 0\n                            /// @src 0:13482:13631  \"ERC721ReceiverErrorRevertString(...\"\n                            let _7 := /** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ mload(64)\n                            /// @src 0:13482:13631  \"ERC721ReceiverErrorRevertString(...\"\n                            mstore(_7, shl(224, 0xb4482311))\n                            revert(_7, sub(abi_encode_string_address_address_uint256(add(_7, /** @src 0:12620:12775  \"IERC721Receiver(recipient).onERC721Received(...\" */ 4), /** @src 0:13482:13631  \"ERC721ReceiverErrorRevertString(...\" */ _6, var_recipient, /** @src 0:12706:12716  \"msg.sender\" */ caller(), /** @src 0:13482:13631  \"ERC721ReceiverErrorRevertString(...\" */ var_tokenId), _7))\n                        }\n                    }\n                    /// @src 0:12604:13642  \"try...\"\n                    if _5\n                    {\n                        /// @src 0:13114:13372  \"catch (bytes memory data) {...\"\n                        let var_data_mpos := extract_returndata()\n                        /// @src 0:13215:13361  \"ERC721ReceiverErrorRevertBytes(...\"\n                        let _8 := /** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ mload(64)\n                        /// @src 0:13215:13361  \"ERC721ReceiverErrorRevertBytes(...\"\n                        mstore(_8, shl(227, 0x164ba4a5))\n                        revert(_8, sub(abi_encode_string_address_address_uint256(add(_8, /** @src 0:12620:12775  \"IERC721Receiver(recipient).onERC721Received(...\" */ 4), /** @src 0:13215:13361  \"ERC721ReceiverErrorRevertBytes(...\" */ var_data_mpos, var_recipient, /** @src 0:12706:12716  \"msg.sender\" */ caller(), /** @src 0:13215:13361  \"ERC721ReceiverErrorRevertBytes(...\" */ var_tokenId), _8))\n                    }\n                }\n            }\n            /// @ast-id 469 @src 0:13858:14097  \"function _checkRecipientIsNotZeroAddress(address recipient) internal pure {...\"\n            function fun_checkRecipientIsNotZeroAddress(var_recipient)\n            {\n                /// @src 0:13998:14091  \"if (recipient == address(0x0)) {...\"\n                if /** @src 0:14002:14027  \"recipient == address(0x0)\" */ iszero(/** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ and(/** @src 0:14002:14027  \"recipient == address(0x0)\" */ var_recipient, /** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ sub(shl(160, 1), 1)))\n                /// @src 0:13998:14091  \"if (recipient == address(0x0)) {...\"\n                {\n                    /// @src 0:14050:14080  \"RecipientCannotBeZeroAddress()\"\n                    let _1 := /** @src 0:1063:14099  \"contract TransferHelper is TransferHelperInterface, TransferHelperErrors {...\" */ mload(64)\n                    /// @src 0:14050:14080  \"RecipientCannotBeZeroAddress()\"\n                    mstore(_1, shl(225, 0x6c383829))\n                    revert(_1, 4)\n                }\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220500fc1b5d849d3aab84f749e92b22dd358b7a3f08cf0ed86c6572eec57fa07ed64736f6c634300080e0033\"\n    }\n}\n","hash":"0100017f16d39fb4547e29fe5c927b1259c78649be580444c7aa829954dbbba7","factoryDependencies":{}}},"seaport-types/src/interfaces/ConduitControllerInterface.sol":{"ConduitControllerInterface":{"abi":[{"inputs":[{"internalType":"address","name":"conduit","type":"address"}],"name":"CallerIsNotNewPotentialOwner","type":"error"},{"inputs":[{"internalType":"address","name":"conduit","type":"address"}],"name":"CallerIsNotOwner","type":"error"},{"inputs":[{"internalType":"address","name":"conduit","type":"address"}],"name":"ChannelOutOfRange","type":"error"},{"inputs":[{"internalType":"address","name":"conduit","type":"address"}],"name":"ConduitAlreadyExists","type":"error"},{"inputs":[],"name":"InvalidCreator","type":"error"},{"inputs":[],"name":"InvalidInitialOwner","type":"error"},{"inputs":[{"internalType":"address","name":"conduit","type":"address"},{"internalType":"address","name":"newPotentialOwner","type":"address"}],"name":"NewPotentialOwnerAlreadySet","type":"error"},{"inputs":[{"internalType":"address","name":"conduit","type":"address"}],"name":"NewPotentialOwnerIsZeroAddress","type":"error"},{"inputs":[],"name":"NoConduit","type":"error"},{"inputs":[{"internalType":"address","name":"conduit","type":"address"}],"name":"NoPotentialOwnerCurrentlySet","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"conduit","type":"address"},{"indexed":false,"internalType":"bytes32","name":"conduitKey","type":"bytes32"}],"name":"NewConduit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"conduit","type":"address"},{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"newPotentialOwner","type":"address"}],"name":"PotentialOwnerUpdated","type":"event"},{"inputs":[{"internalType":"address","name":"conduit","type":"address"}],"name":"acceptOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"conduit","type":"address"}],"name":"cancelOwnershipTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"conduitKey","type":"bytes32"},{"internalType":"address","name":"initialOwner","type":"address"}],"name":"createConduit","outputs":[{"internalType":"address","name":"conduit","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"conduit","type":"address"},{"internalType":"uint256","name":"channelIndex","type":"uint256"}],"name":"getChannel","outputs":[{"internalType":"address","name":"channel","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"conduit","type":"address"},{"internalType":"address","name":"channel","type":"address"}],"name":"getChannelStatus","outputs":[{"internalType":"bool","name":"isOpen","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"conduit","type":"address"}],"name":"getChannels","outputs":[{"internalType":"address[]","name":"channels","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"conduitKey","type":"bytes32"}],"name":"getConduit","outputs":[{"internalType":"address","name":"conduit","type":"address"},{"internalType":"bool","name":"exists","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getConduitCodeHashes","outputs":[{"internalType":"bytes32","name":"creationCodeHash","type":"bytes32"},{"internalType":"bytes32","name":"runtimeCodeHash","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"conduit","type":"address"}],"name":"getKey","outputs":[{"internalType":"bytes32","name":"conduitKey","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"conduit","type":"address"}],"name":"getPotentialOwner","outputs":[{"internalType":"address","name":"potentialOwner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"conduit","type":"address"}],"name":"getTotalChannels","outputs":[{"internalType":"uint256","name":"totalChannels","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"conduit","type":"address"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"conduit","type":"address"},{"internalType":"address","name":"newPotentialOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"conduit","type":"address"},{"internalType":"address","name":"channel","type":"address"},{"internalType":"bool","name":"isOpen","type":"bool"}],"name":"updateChannel","outputs":[],"stateMutability":"nonpayable","type":"function"}],"metadata":"{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"conduit\",\"type\":\"address\"}],\"name\":\"CallerIsNotNewPotentialOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"conduit\",\"type\":\"address\"}],\"name\":\"CallerIsNotOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"conduit\",\"type\":\"address\"}],\"name\":\"ChannelOutOfRange\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"conduit\",\"type\":\"address\"}],\"name\":\"ConduitAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCreator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"conduit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newPotentialOwner\",\"type\":\"address\"}],\"name\":\"NewPotentialOwnerAlreadySet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"conduit\",\"type\":\"address\"}],\"name\":\"NewPotentialOwnerIsZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoConduit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"conduit\",\"type\":\"address\"}],\"name\":\"NoPotentialOwnerCurrentlySet\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"conduit\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"conduitKey\",\"type\":\"bytes32\"}],\"name\":\"NewConduit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"conduit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPotentialOwner\",\"type\":\"address\"}],\"name\":\"PotentialOwnerUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"conduit\",\"type\":\"address\"}],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"conduit\",\"type\":\"address\"}],\"name\":\"cancelOwnershipTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"conduitKey\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"name\":\"createConduit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"conduit\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"conduit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"channelIndex\",\"type\":\"uint256\"}],\"name\":\"getChannel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"channel\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"conduit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"channel\",\"type\":\"address\"}],\"name\":\"getChannelStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"conduit\",\"type\":\"address\"}],\"name\":\"getChannels\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"channels\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"conduitKey\",\"type\":\"bytes32\"}],\"name\":\"getConduit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"conduit\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConduitCodeHashes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"creationCodeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"runtimeCodeHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"conduit\",\"type\":\"address\"}],\"name\":\"getKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"conduitKey\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"conduit\",\"type\":\"address\"}],\"name\":\"getPotentialOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"potentialOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"conduit\",\"type\":\"address\"}],\"name\":\"getTotalChannels\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalChannels\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"conduit\",\"type\":\"address\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"conduit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newPotentialOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"conduit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"channel\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"}],\"name\":\"updateChannel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"0age\",\"errors\":{\"CallerIsNotNewPotentialOwner(address)\":[{\"details\":\"Revert with an error when attempting to claim ownership of a conduit      with a caller that is not the current potential owner for the      conduit in question.\"}],\"CallerIsNotOwner(address)\":[{\"details\":\"Revert with an error when attempting to update channels or transfer      ownership of a conduit when the caller is not the owner of the      conduit in question.\"}],\"ChannelOutOfRange(address)\":[{\"details\":\"Revert with an error when attempting to retrieve a channel using an      index that is out of range.\"}],\"ConduitAlreadyExists(address)\":[{\"details\":\"Revert with an error when attempting to create a conduit that      already exists.\"}],\"InvalidCreator()\":[{\"details\":\"Revert with an error when attempting to create a new conduit using a      conduit key where the first twenty bytes of the key do not match the      address of the caller.\"}],\"InvalidInitialOwner()\":[{\"details\":\"Revert with an error when attempting to create a new conduit when no      initial owner address is supplied.\"}],\"NewPotentialOwnerAlreadySet(address,address)\":[{\"details\":\"Revert with an error when attempting to set a new potential owner      that is already set.\"}],\"NewPotentialOwnerIsZeroAddress(address)\":[{\"details\":\"Revert with an error when attempting to register a new potential      owner and supplying the null address.\"}],\"NoConduit()\":[{\"details\":\"Revert with an error when attempting to interact with a conduit that      does not yet exist.\"}],\"NoPotentialOwnerCurrentlySet(address)\":[{\"details\":\"Revert with an error when attempting to cancel ownership transfer      when no new potential owner is currently set.\"}]},\"events\":{\"NewConduit(address,bytes32)\":{\"details\":\"Emit an event whenever a new conduit is created.\",\"params\":{\"conduit\":\"The newly created conduit.\",\"conduitKey\":\"The conduit key used to create the new conduit.\"}},\"OwnershipTransferred(address,address,address)\":{\"details\":\"Emit an event whenever conduit ownership is transferred.\",\"params\":{\"conduit\":\"The conduit for which ownership has been                      transferred.\",\"newOwner\":\"The new owner of the conduit.\",\"previousOwner\":\"The previous owner of the conduit.\"}},\"PotentialOwnerUpdated(address)\":{\"details\":\"Emit an event whenever a conduit owner registers a new potential      owner for that conduit.\",\"params\":{\"newPotentialOwner\":\"The new potential owner of the conduit.\"}}},\"kind\":\"dev\",\"methods\":{\"acceptOwnership(address)\":{\"params\":{\"conduit\":\"The conduit for which to accept ownership.\"}},\"cancelOwnershipTransfer(address)\":{\"params\":{\"conduit\":\"The conduit for which to cancel ownership transfer.\"}},\"createConduit(bytes32,address)\":{\"params\":{\"conduitKey\":\"The conduit key used to deploy the conduit. Note that                     the first twenty bytes of the conduit key must match                     the caller of this contract.\",\"initialOwner\":\"The initial owner to set for the new conduit.\"},\"returns\":{\"conduit\":\"The address of the newly deployed conduit.\"}},\"getChannel(address,uint256)\":{\"params\":{\"channelIndex\":\"The index of the channel in question.\",\"conduit\":\"The conduit for which to retrieve the open channel.\"},\"returns\":{\"channel\":\"The open channel, if any, at the specified channel index.\"}},\"getChannelStatus(address,address)\":{\"params\":{\"channel\":\"The channel for which to retrieve the status.\",\"conduit\":\"The conduit for which to retrieve the channel status.\"},\"returns\":{\"isOpen\":\"The status of the channel on the given conduit.\"}},\"getChannels(address)\":{\"params\":{\"conduit\":\"The conduit for which to retrieve open channels.\"},\"returns\":{\"channels\":\"An array of open channels on the given conduit.\"}},\"getConduit(bytes32)\":{\"params\":{\"conduitKey\":\"The conduit key used to derive the conduit.\"},\"returns\":{\"conduit\":\"The derived address of the conduit.\",\"exists\":\" A boolean indicating whether the derived conduit has been                 deployed or not.\"}},\"getConduitCodeHashes()\":{\"details\":\"Retrieve the conduit creation code and runtime code hashes.\"},\"getKey(address)\":{\"params\":{\"conduit\":\"The conduit for which to retrieve the associated conduit                key.\"},\"returns\":{\"conduitKey\":\"The conduit key used to deploy the supplied conduit.\"}},\"getPotentialOwner(address)\":{\"params\":{\"conduit\":\"The conduit for which to retrieve the potential owner.\"},\"returns\":{\"potentialOwner\":\"The potential owner, if any, for the conduit.\"}},\"getTotalChannels(address)\":{\"params\":{\"conduit\":\"The conduit for which to retrieve the total channel count.\"},\"returns\":{\"totalChannels\":\"The total number of open channels for the conduit.\"}},\"ownerOf(address)\":{\"params\":{\"conduit\":\"The conduit for which to retrieve the associated owner.\"},\"returns\":{\"owner\":\"The owner of the supplied conduit.\"}},\"transferOwnership(address,address)\":{\"params\":{\"conduit\":\"The conduit for which to initiate ownership transfer.\",\"newPotentialOwner\":\"The new potential owner of the conduit.\"}},\"updateChannel(address,address,bool)\":{\"params\":{\"channel\":\"The channel to open or close on the conduit.\",\"conduit\":\"The conduit for which to open or close the channel.\",\"isOpen\":\"A boolean indicating whether to open or close the channel.\"}}},\"title\":\"ConduitControllerInterface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership(address)\":{\"notice\":\"Accept ownership of a supplied conduit. Only accounts that the         current owner has set as the new potential owner may call this         function.\"},\"cancelOwnershipTransfer(address)\":{\"notice\":\"Clear the currently set potential owner, if any, from a conduit.         Only the owner of the conduit in question may call this function.\"},\"createConduit(bytes32,address)\":{\"notice\":\"Deploy a new conduit using a supplied conduit key and assigning         an initial owner for the deployed conduit. Note that the first         twenty bytes of the supplied conduit key must match the caller         and that a new conduit cannot be created if one has already been         deployed using the same conduit key.\"},\"getChannel(address,uint256)\":{\"notice\":\"Retrieve an open channel at a specific index for a given conduit.         Note that the index of a channel can change as a result of other         channels being closed on the conduit.\"},\"getChannelStatus(address,address)\":{\"notice\":\"Retrieve the status (either open or closed) of a given channel on         a conduit.\"},\"getChannels(address)\":{\"notice\":\"Retrieve all open channels for a given conduit. Note that calling         this function for a conduit with many channels will revert with         an out-of-gas error.\"},\"getConduit(bytes32)\":{\"notice\":\"Derive the conduit associated with a given conduit key and         determine whether that conduit exists (i.e. whether it has been         deployed).\"},\"getKey(address)\":{\"notice\":\"Retrieve the conduit key for a deployed conduit via reverse         lookup.\"},\"getPotentialOwner(address)\":{\"notice\":\"Retrieve the potential owner, if any, for a given conduit. The         current owner may set a new potential owner via         `transferOwnership` and that owner may then accept ownership of         the conduit in question via `acceptOwnership`.\"},\"getTotalChannels(address)\":{\"notice\":\"Retrieve the total number of open channels for a given conduit.\"},\"ownerOf(address)\":{\"notice\":\"Retrieve the current owner of a deployed conduit.\"},\"transferOwnership(address,address)\":{\"notice\":\"Initiate conduit ownership transfer by assigning a new potential         owner for the given conduit. Once set, the new potential owner         may call `acceptOwnership` to claim ownership of the conduit.         Only the owner of the conduit in question may call this function.\"},\"updateChannel(address,address,bool)\":{\"notice\":\"Open or close a channel on a given conduit, thereby allowing the         specified account to execute transfers against that conduit.         Extreme care must be taken when updating channels, as malicious         or vulnerable channels can transfer any ERC20, ERC721 and ERC1155         tokens where the token holder has granted the conduit approval.         Only the owner of the conduit in question may call this function.\"}},\"notice\":\"ConduitControllerInterface contains all external function interfaces,         structs, events, and errors for the conduit controller.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"seaport-types/src/interfaces/ConduitControllerInterface.sol\":\"ConduitControllerInterface\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"seaport-types/src/interfaces/ConduitControllerInterface.sol\":{\"keccak256\":\"0xfbdb813ba85803cc1faf1d82f354d7631b029597334e27f07a678487a1ad7bcc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ce247c947cb809a3aad55735dbab78c8d993d71349115aa9f040c44e6fa6b3d5\",\"dweb:/ipfs/QmX13SMXXfHRwCfhuyUNRNygh81zdngrfo7YbNWpxMmpLZ\"]}},\"version\":1}","evm":{"legacyAssembly":null,"assembly":null,"bytecode":null,"methodIdentifiers":{"acceptOwnership(address)":"51710e45","cancelOwnershipTransfer(address)":"7b37e561","createConduit(bytes32,address)":"794593bc","getChannel(address,uint256)":"027cc764","getChannelStatus(address,address)":"33bc8572","getChannels(address)":"8b9e028b","getConduit(bytes32)":"6e9bfd9f","getConduitCodeHashes()":"0a96ad39","getKey(address)":"93790f44","getPotentialOwner(address)":"906c87cc","getTotalChannels(address)":"4e3f9580","ownerOf(address)":"14afd79e","transferOwnership(address,address)":"6d435421","updateChannel(address,address,bool)":"13ad9cab"}},"irOptimized":""}},"seaport-types/src/interfaces/ConduitInterface.sol":{"ConduitInterface":{"abi":[{"inputs":[{"internalType":"address","name":"channel","type":"address"}],"name":"ChannelClosed","type":"error"},{"inputs":[{"internalType":"address","name":"channel","type":"address"},{"internalType":"bool","name":"isOpen","type":"bool"}],"name":"ChannelStatusAlreadySet","type":"error"},{"inputs":[],"name":"InvalidController","type":"error"},{"inputs":[],"name":"InvalidItemType","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"channel","type":"address"},{"indexed":false,"internalType":"bool","name":"open","type":"bool"}],"name":"ChannelUpdated","type":"event"},{"inputs":[{"components":[{"internalType":"enum ConduitItemType","name":"itemType","type":"uint8"},{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"identifier","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct ConduitTransfer[]","name":"transfers","type":"tuple[]"}],"name":"execute","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"internalType":"struct ConduitBatch1155Transfer[]","name":"batch1155Transfers","type":"tuple[]"}],"name":"executeBatch1155","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"enum ConduitItemType","name":"itemType","type":"uint8"},{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"identifier","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct ConduitTransfer[]","name":"standardTransfers","type":"tuple[]"},{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"internalType":"struct ConduitBatch1155Transfer[]","name":"batch1155Transfers","type":"tuple[]"}],"name":"executeWithBatch1155","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"channel","type":"address"},{"internalType":"bool","name":"isOpen","type":"bool"}],"name":"updateChannel","outputs":[],"stateMutability":"nonpayable","type":"function"}],"metadata":"{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"channel\",\"type\":\"address\"}],\"name\":\"ChannelClosed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"channel\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"}],\"name\":\"ChannelStatusAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidController\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidItemType\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"channel\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"}],\"name\":\"ChannelUpdated\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum ConduitItemType\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"identifier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ConduitTransfer[]\",\"name\":\"transfers\",\"type\":\"tuple[]\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ConduitBatch1155Transfer[]\",\"name\":\"batch1155Transfers\",\"type\":\"tuple[]\"}],\"name\":\"executeBatch1155\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum ConduitItemType\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"identifier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ConduitTransfer[]\",\"name\":\"standardTransfers\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ConduitBatch1155Transfer[]\",\"name\":\"batch1155Transfers\",\"type\":\"tuple[]\"}],\"name\":\"executeWithBatch1155\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"channel\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"}],\"name\":\"updateChannel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"0age\",\"errors\":{\"ChannelClosed(address)\":[{\"details\":\"Revert with an error when attempting to execute transfers using a      caller that does not have an open channel.\"}],\"ChannelStatusAlreadySet(address,bool)\":[{\"details\":\"Revert with an error when attempting to update a channel to the      current status of that channel.\"}],\"InvalidController()\":[{\"details\":\"Revert with an error when attempting to update the status of a      channel from a caller that is not the conduit controller.\"}],\"InvalidItemType()\":[{\"details\":\"Revert with an error when attempting to execute a transfer for an      item that does not have an ERC20/721/1155 item type.\"}]},\"events\":{\"ChannelUpdated(address,bool)\":{\"details\":\"Emit an event whenever a channel is opened or closed.\",\"params\":{\"channel\":\"The channel that has been updated.\",\"open\":\"A boolean indicating whether the conduit is open or not.\"}}},\"kind\":\"dev\",\"methods\":{\"execute((uint8,address,address,address,uint256,uint256)[])\":{\"params\":{\"transfers\":\"The ERC20/721/1155 transfers to perform.\"},\"returns\":{\"magicValue\":\"A magic value indicating that the transfers were                    performed successfully.\"}},\"executeBatch1155((address,address,address,uint256[],uint256[])[])\":{\"params\":{\"batch1155Transfers\":\"The 1155 batch transfers to perform.\"},\"returns\":{\"magicValue\":\"A magic value indicating that the transfers were                    performed successfully.\"}},\"executeWithBatch1155((uint8,address,address,address,uint256,uint256)[],(address,address,address,uint256[],uint256[])[])\":{\"params\":{\"batch1155Transfers\":\"The 1155 batch transfers to perform.\",\"standardTransfers\":\"The ERC20/721/1155 transfers to perform.\"},\"returns\":{\"magicValue\":\"A magic value indicating that the transfers were                    performed successfully.\"}},\"updateChannel(address,bool)\":{\"params\":{\"channel\":\"The channel to open or close.\",\"isOpen\":\"The status of the channel (either open or closed).\"}}},\"title\":\"ConduitInterface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"execute((uint8,address,address,address,uint256,uint256)[])\":{\"notice\":\"Execute a sequence of ERC20/721/1155 transfers. Only a caller         with an open channel can call this function.\"},\"executeBatch1155((address,address,address,uint256[],uint256[])[])\":{\"notice\":\"Execute a sequence of batch 1155 transfers. Only a caller with an         open channel can call this function.\"},\"executeWithBatch1155((uint8,address,address,address,uint256,uint256)[],(address,address,address,uint256[],uint256[])[])\":{\"notice\":\"Execute a sequence of transfers, both single and batch 1155. Only         a caller with an open channel can call this function.\"},\"updateChannel(address,bool)\":{\"notice\":\"Open or close a given channel. Only callable by the controller.\"}},\"notice\":\"ConduitInterface contains all external function interfaces, events,         and errors for conduit contracts.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"seaport-types/src/interfaces/ConduitInterface.sol\":\"ConduitInterface\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"seaport-types/src/conduit/lib/ConduitEnums.sol\":{\"keccak256\":\"0x1b24e84bbd29d52cebcb0bda26c8095c9d7a8e5719dd1b0e203315be0df4dcf7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://901be0c9ea392a69611b884985a772547e83ce78610a40e989216d842c8eb4b0\",\"dweb:/ipfs/QmPW1kDrkUEAvF6gy5FHsVmXNe2C1czAovXKL18T5jKiVx\"]},\"seaport-types/src/conduit/lib/ConduitStructs.sol\":{\"keccak256\":\"0xe765c83ddb65b13547db2914f7212689707fcd85c1bbe5c49dbe3e98c4942dd9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1318c90a615b9c2098c1f7435925c76913d2c54b79a53f8f64eae59d60ed5564\",\"dweb:/ipfs/QmXkTSAvkrMbrNLJjehm3JXeBoyW6dDYWRsdFkuDVb33sa\"]},\"seaport-types/src/interfaces/ConduitInterface.sol\":{\"keccak256\":\"0x5710e503e7550594cf98bade51646da1420d09c1b4758315484810df72d7cf64\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d3831fc9b36ce3760c39f60682487848f9678157794b995207f15d93ca1cc58a\",\"dweb:/ipfs/QmaapZB4DdYhUSkjySHJk9n7ajEfmX1hwWXWwEHAixYPQQ\"]}},\"version\":1}","evm":{"legacyAssembly":null,"assembly":null,"bytecode":null,"methodIdentifiers":{"execute((uint8,address,address,address,uint256,uint256)[])":"4ce34aa2","executeBatch1155((address,address,address,uint256[],uint256[])[])":"8df25d92","executeWithBatch1155((uint8,address,address,address,uint256,uint256)[],(address,address,address,uint256[],uint256[])[])":"899e104c","updateChannel(address,bool)":"c4e8fcb5"}},"irOptimized":""}},"seaport-types/src/interfaces/IERC721Receiver.sol":{"IERC721Receiver":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}],"metadata":"{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for any contract that wants to support safeTransfers      from ERC721 asset contracts.\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an ERC721 token is transferred to this contract via      safeTransferFrom, this function is called.\",\"params\":{\"data\":\"Additional data.\",\"from\":\"The address of the sender.\",\"operator\":\"The address of the operator.\",\"tokenId\":\"The ID of the ERC721.\"},\"returns\":{\"_0\":\"bytes4 The magic value, unless throwing.\"}}},\"title\":\"ERC721 token receiver interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"seaport-types/src/interfaces/IERC721Receiver.sol\":\"IERC721Receiver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"seaport-types/src/interfaces/IERC721Receiver.sol\":{\"keccak256\":\"0x8e60d8657d3b2e80d5c279e689d87a7882f139d9fd72a498618cb9fcc14d0841\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b487b981916bceae912c9d80038a50638f0f00684707fbfa69a3eb55be3fa7c0\",\"dweb:/ipfs/QmQ9dJXs9QPnaMCGQXV4TSAYED2BDhigGdYBpApjU4oZfH\"]}},\"version\":1}","evm":{"legacyAssembly":null,"assembly":null,"bytecode":null,"methodIdentifiers":{"onERC721Received(address,address,uint256,bytes)":"150b7a02"}},"irOptimized":""}},"seaport-types/src/interfaces/TransferHelperErrors.sol":{"TransferHelperErrors":{"abi":[{"inputs":[{"internalType":"bytes","name":"reason","type":"bytes"},{"internalType":"bytes32","name":"conduitKey","type":"bytes32"},{"internalType":"address","name":"conduit","type":"address"}],"name":"ConduitErrorRevertBytes","type":"error"},{"inputs":[{"internalType":"string","name":"reason","type":"string"},{"internalType":"bytes32","name":"conduitKey","type":"bytes32"},{"internalType":"address","name":"conduit","type":"address"}],"name":"ConduitErrorRevertString","type":"error"},{"inputs":[{"internalType":"bytes","name":"reason","type":"bytes"},{"internalType":"address","name":"receiver","type":"address"},{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"identifier","type":"uint256"}],"name":"ERC721ReceiverErrorRevertBytes","type":"error"},{"inputs":[{"internalType":"string","name":"reason","type":"string"},{"internalType":"address","name":"receiver","type":"address"},{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"identifier","type":"uint256"}],"name":"ERC721ReceiverErrorRevertString","type":"error"},{"inputs":[{"internalType":"bytes32","name":"conduitKey","type":"bytes32"},{"internalType":"address","name":"conduit","type":"address"}],"name":"InvalidConduit","type":"error"},{"inputs":[],"name":"InvalidERC20Identifier","type":"error"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"}],"name":"InvalidERC721Recipient","type":"error"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"InvalidERC721TransferAmount","type":"error"},{"inputs":[],"name":"InvalidItemType","type":"error"},{"inputs":[],"name":"RecipientCannotBeZeroAddress","type":"error"}],"metadata":"{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"reason\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"conduitKey\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"conduit\",\"type\":\"address\"}],\"name\":\"ConduitErrorRevertBytes\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"conduitKey\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"conduit\",\"type\":\"address\"}],\"name\":\"ConduitErrorRevertString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"reason\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"identifier\",\"type\":\"uint256\"}],\"name\":\"ERC721ReceiverErrorRevertBytes\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"identifier\",\"type\":\"uint256\"}],\"name\":\"ERC721ReceiverErrorRevertString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"conduitKey\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"conduit\",\"type\":\"address\"}],\"name\":\"InvalidConduit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidERC20Identifier\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"InvalidERC721Recipient\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InvalidERC721TransferAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidItemType\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RecipientCannotBeZeroAddress\",\"type\":\"error\"}],\"devdoc\":{\"errors\":{\"ConduitErrorRevertBytes(bytes,bytes32,address)\":[{\"details\":\"Revert with an error when a call to a conduit reverts with bytes      data.\"}],\"ConduitErrorRevertString(string,bytes32,address)\":[{\"details\":\"Revert with an error when a call to a conduit reverts with a      reason string.\"}],\"ERC721ReceiverErrorRevertBytes(bytes,address,address,uint256)\":[{\"details\":\"Revert with an error when a call to an ERC721 receiver reverts with      bytes data.\"}],\"ERC721ReceiverErrorRevertString(string,address,address,uint256)\":[{\"details\":\"Revert with an error when a call to an ERC721 receiver reverts with      string reason.\"}],\"InvalidConduit(bytes32,address)\":[{\"details\":\"Revert with an error when attempting to fill an order referencing an      invalid conduit (i.e. one that has not been deployed).\"}],\"InvalidERC20Identifier()\":[{\"details\":\"Revert with an error when an ERC20 token has an invalid identifier.\"}],\"InvalidERC721Recipient(address)\":[{\"details\":\"Revert with an error when attempting to execute an ERC721 transfer      to an invalid recipient.\"}],\"InvalidERC721TransferAmount(uint256)\":[{\"details\":\"Revert with an error when an ERC721 transfer with amount other than      one is attempted.\",\"params\":{\"amount\":\"The amount of the ERC721 tokens to transfer.\"}}],\"InvalidItemType()\":[{\"details\":\"Revert with an error when attempting to execute transfers with a      NATIVE itemType.\"}],\"RecipientCannotBeZeroAddress()\":[{\"details\":\"Revert with an error if the recipient is the zero address.\"}]},\"kind\":\"dev\",\"methods\":{},\"title\":\"TransferHelperErrors\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"seaport-types/src/interfaces/TransferHelperErrors.sol\":\"TransferHelperErrors\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"seaport-types/src/interfaces/TransferHelperErrors.sol\":{\"keccak256\":\"0x6f5825b92c3b0d667227f893916899bbc6e137b5fec6f28981005616cfd1a6af\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a27beca824d18bc9b779b997b9d80a26c11ba2c15fec305f5e5a8adc7fccd232\",\"dweb:/ipfs/QmTmNrbx1RwiV1nTUxp3YX8QFxseqhQKUV5wPMmAEb6HzC\"]}},\"version\":1}","evm":{"legacyAssembly":null,"assembly":null,"bytecode":null,"methodIdentifiers":{}},"irOptimized":""}},"seaport-types/src/interfaces/TransferHelperInterface.sol":{"TransferHelperInterface":{"abi":[{"inputs":[{"components":[{"components":[{"internalType":"enum ConduitItemType","name":"itemType","type":"uint8"},{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"identifier","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct TransferHelperItem[]","name":"items","type":"tuple[]"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"bool","name":"validateERC721Receiver","type":"bool"}],"internalType":"struct TransferHelperItemsWithRecipient[]","name":"items","type":"tuple[]"},{"internalType":"bytes32","name":"conduitKey","type":"bytes32"}],"name":"bulkTransfer","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}],"metadata":"{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"enum ConduitItemType\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"identifier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct TransferHelperItem[]\",\"name\":\"items\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"validateERC721Receiver\",\"type\":\"bool\"}],\"internalType\":\"struct TransferHelperItemsWithRecipient[]\",\"name\":\"items\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32\",\"name\":\"conduitKey\",\"type\":\"bytes32\"}],\"name\":\"bulkTransfer\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"bulkTransfer(((uint8,address,uint256,uint256)[],address,bool)[],bytes32)\":{\"params\":{\"conduitKey\":\"The key of the conduit performing the bulk transfer.\",\"items\":\"The items to transfer.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"bulkTransfer(((uint8,address,uint256,uint256)[],address,bool)[],bytes32)\":{\"notice\":\"Transfer multiple items to a single recipient.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"seaport-types/src/interfaces/TransferHelperInterface.sol\":\"TransferHelperInterface\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"seaport-types/src/conduit/lib/ConduitEnums.sol\":{\"keccak256\":\"0x1b24e84bbd29d52cebcb0bda26c8095c9d7a8e5719dd1b0e203315be0df4dcf7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://901be0c9ea392a69611b884985a772547e83ce78610a40e989216d842c8eb4b0\",\"dweb:/ipfs/QmPW1kDrkUEAvF6gy5FHsVmXNe2C1czAovXKL18T5jKiVx\"]},\"seaport-types/src/helpers/TransferHelperStructs.sol\":{\"keccak256\":\"0x661b4ac90f4afdfe78153908edd54ed585e7dfe8d982dd62c5dbfd9eace6e418\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://78aa3e56af407a533b05023743467cbfaa470bc7f025107de9bcd631671c6d9e\",\"dweb:/ipfs/Qmax9yzYqK1uQ7sVF4tFytW59dqTYXB8MsL7dC24QHfnWZ\"]},\"seaport-types/src/interfaces/TransferHelperInterface.sol\":{\"keccak256\":\"0x26e6e0ff3dd1d492e3f27a844024eba7a5c70ab204d603d5b7c892a2fdb82ab6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ec46c29dac8f756ae4061bb433422904fc729806dd1fb7e9e39348378f602c31\",\"dweb:/ipfs/QmPyGJ5RhXFLrfozEgBoR21wG19ttkaDZQEBWfvrKr35YB\"]}},\"version\":1}","evm":{"legacyAssembly":null,"assembly":null,"bytecode":null,"methodIdentifiers":{"bulkTransfer(((uint8,address,uint256,uint256)[],address,bool)[],bytes32)":"32389b71"}},"irOptimized":""}}}}}