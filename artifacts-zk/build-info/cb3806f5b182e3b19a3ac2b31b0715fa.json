{"id":"cb3806f5b182e3b19a3ac2b31b0715fa","_format":"hh-sol-build-info-1","solcVersion":"0.8.14","solcLongVersion":"0.8.14+commit.80d49f37","input":{"language":"Solidity","sources":{"contracts/conduit/Conduit.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport { Conduit as CoreConduit } from \"seaport-core/src/conduit/Conduit.sol\";\n\n/**\n * @title Conduit\n * @author 0age\n * @notice This contract serves as an originator for \"proxied\" transfers. Each\n *         conduit is deployed and controlled by a \"conduit controller\" that can\n *         add and remove \"channels\" or contracts that can instruct the conduit\n *         to transfer approved ERC20/721/1155 tokens. *IMPORTANT NOTE: each\n *         conduit has an owner that can arbitrarily add or remove channels, and\n *         a malicious or negligent owner can add a channel that allows for any\n *         approved ERC20/721/1155 tokens to be taken immediately — be extremely\n *         cautious with what conduits you give token approvals to!*\n */\ncontract LocalConduit is CoreConduit {}\n"},"seaport-core/src/conduit/Conduit.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport {ConduitInterface} from \"seaport-types/src/interfaces/ConduitInterface.sol\";\n\nimport {ConduitItemType} from \"seaport-types/src/conduit/lib/ConduitEnums.sol\";\n\nimport {TokenTransferrer} from \"../lib/TokenTransferrer.sol\";\n\nimport {ConduitBatch1155Transfer, ConduitTransfer} from \"seaport-types/src/conduit/lib/ConduitStructs.sol\";\n\nimport {\n    ChannelClosed_channel_ptr,\n    ChannelClosed_error_length,\n    ChannelClosed_error_ptr,\n    ChannelClosed_error_signature,\n    ChannelKey_channel_ptr,\n    ChannelKey_length,\n    ChannelKey_slot_ptr\n} from \"seaport-types/src/conduit/lib/ConduitConstants.sol\";\n\n/**\n * @title Conduit\n * @author 0age\n * @notice This contract serves as an originator for \"proxied\" transfers. Each\n *         conduit is deployed and controlled by a \"conduit controller\" that can\n *         add and remove \"channels\" or contracts that can instruct the conduit\n *         to transfer approved ERC20/721/1155 tokens. *IMPORTANT NOTE: each\n *         conduit has an owner that can arbitrarily add or remove channels, and\n *         a malicious or negligent owner can add a channel that allows for any\n *         approved ERC20/721/1155 tokens to be taken immediately — be extremely\n *         cautious with what conduits you give token approvals to!*\n */\ncontract Conduit is ConduitInterface, TokenTransferrer {\n    // Set deployer as an immutable controller that can update channel statuses.\n    address private immutable _controller;\n\n    // Track the status of each channel.\n    mapping(address => bool) private _channels;\n\n    /**\n     * @notice Ensure that the caller is currently registered as an open channel\n     *         on the conduit.\n     */\n    modifier onlyOpenChannel() {\n        // Utilize assembly to access channel storage mapping directly.\n        assembly {\n            // Write the caller to scratch space.\n            mstore(ChannelKey_channel_ptr, caller())\n\n            // Write the storage slot for _channels to scratch space.\n            mstore(ChannelKey_slot_ptr, _channels.slot)\n\n            // Derive the position in storage of _channels[msg.sender]\n            // and check if the stored value is zero.\n            if iszero(sload(keccak256(ChannelKey_channel_ptr, ChannelKey_length))) {\n                // The caller is not an open channel; revert with\n                // ChannelClosed(caller). First, set error signature in memory.\n                mstore(ChannelClosed_error_ptr, ChannelClosed_error_signature)\n\n                // Next, set the caller as the argument.\n                mstore(ChannelClosed_channel_ptr, caller())\n\n                // Finally, revert, returning full custom error with argument\n                // data in memory.\n                // revert(abi.encodeWithSignature(\n                //     \"ChannelClosed(address)\", caller()\n                // ))\n                revert(ChannelClosed_error_ptr, ChannelClosed_error_length)\n            }\n        }\n\n        // Continue with function execution.\n        _;\n    }\n\n    /**\n     * @notice In the constructor, set the deployer as the controller.\n     */\n    constructor() {\n        // Set the deployer as the controller.\n        _controller = msg.sender;\n    }\n\n    /**\n     * @notice Execute a sequence of ERC20/721/1155 transfers. Only a caller\n     *         with an open channel can call this function. Note that channels\n     *         are expected to implement reentrancy protection if desired, and\n     *         that cross-channel reentrancy may be possible if the conduit has\n     *         multiple open channels at once. Also note that channels are\n     *         expected to implement checks against transferring any zero-amount\n     *         items if that constraint is desired.\n     *\n     * @param transfers The ERC20/721/1155 transfers to perform.\n     *\n     * @return magicValue A magic value indicating that the transfers were\n     *                    performed successfully.\n     */\n    function execute(ConduitTransfer[] calldata transfers)\n        external\n        override\n        onlyOpenChannel\n        returns (bytes4 magicValue)\n    {\n        // Retrieve the total number of transfers and place on the stack.\n        uint256 totalStandardTransfers = transfers.length;\n\n        // Iterate over each transfer.\n        for (uint256 i = 0; i < totalStandardTransfers;) {\n            // Retrieve the transfer in question and perform the transfer.\n            _transfer(transfers[i]);\n\n            // Skip overflow check as for loop is indexed starting at zero.\n            unchecked {\n                ++i;\n            }\n        }\n\n        // Return a magic value indicating that the transfers were performed.\n        magicValue = this.execute.selector;\n    }\n\n    /**\n     * @notice Execute a sequence of batch 1155 item transfers. Only a caller\n     *         with an open channel can call this function. Note that channels\n     *         are expected to implement reentrancy protection if desired, and\n     *         that cross-channel reentrancy may be possible if the conduit has\n     *         multiple open channels at once. Also note that channels are\n     *         expected to implement checks against transferring any zero-amount\n     *         items if that constraint is desired.\n     *\n     * @param batchTransfers The 1155 batch item transfers to perform.\n     *\n     * @return magicValue A magic value indicating that the item transfers were\n     *                    performed successfully.\n     */\n    function executeBatch1155(ConduitBatch1155Transfer[] calldata batchTransfers)\n        external\n        override\n        onlyOpenChannel\n        returns (bytes4 magicValue)\n    {\n        // Perform 1155 batch transfers. Note that memory should be considered\n        // entirely corrupted from this point forward.\n        _performERC1155BatchTransfers(batchTransfers);\n\n        // Return a magic value indicating that the transfers were performed.\n        magicValue = this.executeBatch1155.selector;\n    }\n\n    /**\n     * @notice Execute a sequence of transfers, both single ERC20/721/1155 item\n     *         transfers as well as batch 1155 item transfers. Only a caller\n     *         with an open channel can call this function. Note that channels\n     *         are expected to implement reentrancy protection if desired, and\n     *         that cross-channel reentrancy may be possible if the conduit has\n     *         multiple open channels at once. Also note that channels are\n     *         expected to implement checks against transferring any zero-amount\n     *         items if that constraint is desired.\n     *\n     * @param standardTransfers The ERC20/721/1155 item transfers to perform.\n     * @param batchTransfers    The 1155 batch item transfers to perform.\n     *\n     * @return magicValue A magic value indicating that the item transfers were\n     *                    performed successfully.\n     */\n    function executeWithBatch1155(\n        ConduitTransfer[] calldata standardTransfers,\n        ConduitBatch1155Transfer[] calldata batchTransfers\n    ) external override onlyOpenChannel returns (bytes4 magicValue) {\n        // Retrieve the total number of transfers and place on the stack.\n        uint256 totalStandardTransfers = standardTransfers.length;\n\n        // Iterate over each standard transfer.\n        for (uint256 i = 0; i < totalStandardTransfers;) {\n            // Retrieve the transfer in question and perform the transfer.\n            _transfer(standardTransfers[i]);\n\n            // Skip overflow check as for loop is indexed starting at zero.\n            unchecked {\n                ++i;\n            }\n        }\n\n        // Perform 1155 batch transfers. Note that memory should be considered\n        // entirely corrupted from this point forward aside from the free memory\n        // pointer having the default value.\n        _performERC1155BatchTransfers(batchTransfers);\n\n        // Return a magic value indicating that the transfers were performed.\n        magicValue = this.executeWithBatch1155.selector;\n    }\n\n    /**\n     * @notice Open or close a given channel. Only callable by the controller.\n     *\n     * @param channel The channel to open or close.\n     * @param isOpen  The status of the channel (either open or closed).\n     */\n    function updateChannel(address channel, bool isOpen) external override {\n        // Ensure that the caller is the controller of this contract.\n        if (msg.sender != _controller) {\n            revert InvalidController();\n        }\n\n        // Ensure that the channel does not already have the indicated status.\n        if (_channels[channel] == isOpen) {\n            revert ChannelStatusAlreadySet(channel, isOpen);\n        }\n\n        // Update the status of the channel.\n        _channels[channel] = isOpen;\n\n        // Emit a corresponding event.\n        emit ChannelUpdated(channel, isOpen);\n    }\n\n    /**\n     * @dev Internal function to transfer a given ERC20/721/1155 item. Note that\n     *      channels are expected to implement checks against transferring any\n     *      zero-amount items if that constraint is desired.\n     *\n     * @param item The ERC20/721/1155 item to transfer.\n     */\n    function _transfer(ConduitTransfer calldata item) internal {\n        // Determine the transfer method based on the respective item type.\n        if (item.itemType == ConduitItemType.ERC20) {\n            // Transfer ERC20 token. Note that item.identifier is ignored and\n            // therefore ERC20 transfer items are potentially malleable — this\n            // check should be performed by the calling channel if a constraint\n            // on item malleability is desired.\n            _performERC20Transfer(item.token, item.from, item.to, item.amount);\n        } else if (item.itemType == ConduitItemType.ERC721) {\n            // Ensure that exactly one 721 item is being transferred.\n            if (item.amount != 1) {\n                revert InvalidERC721TransferAmount(item.amount);\n            }\n\n            // Transfer ERC721 token.\n            _performERC721Transfer(item.token, item.from, item.to, item.identifier);\n        } else if (item.itemType == ConduitItemType.ERC1155) {\n            // Transfer ERC1155 token.\n            _performERC1155Transfer(item.token, item.from, item.to, item.identifier, item.amount);\n        } else {\n            // Throw with an error.\n            revert InvalidItemType();\n        }\n    }\n}\n"},"seaport-core/src/lib/TokenTransferrer.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport {\n    BadReturnValueFromERC20OnTransfer_error_amount_ptr,\n    BadReturnValueFromERC20OnTransfer_error_from_ptr,\n    BadReturnValueFromERC20OnTransfer_error_length,\n    BadReturnValueFromERC20OnTransfer_error_selector,\n    BadReturnValueFromERC20OnTransfer_error_to_ptr,\n    BadReturnValueFromERC20OnTransfer_error_token_ptr,\n    BatchTransfer1155Params_amounts_head_ptr,\n    BatchTransfer1155Params_calldata_baseSize,\n    BatchTransfer1155Params_data_head_ptr,\n    BatchTransfer1155Params_data_length_basePtr,\n    BatchTransfer1155Params_ids_head_ptr,\n    BatchTransfer1155Params_ids_length_offset,\n    BatchTransfer1155Params_ids_length_ptr,\n    BatchTransfer1155Params_ptr,\n    ConduitBatch1155Transfer_amounts_length_baseOffset,\n    ConduitBatch1155Transfer_from_offset,\n    ConduitBatch1155Transfer_ids_head_offset,\n    ConduitBatch1155Transfer_ids_length_offset,\n    ConduitBatch1155Transfer_usable_head_size,\n    ConduitBatchTransfer_amounts_head_offset,\n    CostPerWord,\n    DefaultFreeMemoryPointer,\n    ERC1155_safeBatchTransferFrom_signature,\n    ERC1155_safeTransferFrom_amount_ptr,\n    ERC1155_safeTransferFrom_data_length_offset,\n    ERC1155_safeTransferFrom_data_length_ptr,\n    ERC1155_safeTransferFrom_data_offset_ptr,\n    ERC1155_safeTransferFrom_from_ptr,\n    ERC1155_safeTransferFrom_id_ptr,\n    ERC1155_safeTransferFrom_length,\n    ERC1155_safeTransferFrom_sig_ptr,\n    ERC1155_safeTransferFrom_signature,\n    ERC1155_safeTransferFrom_to_ptr,\n    ERC1155BatchTransferGenericFailure_error_signature,\n    ERC1155BatchTransferGenericFailure_ids_offset,\n    ERC1155BatchTransferGenericFailure_token_ptr,\n    ERC20_transferFrom_amount_ptr,\n    ERC20_transferFrom_from_ptr,\n    ERC20_transferFrom_length,\n    ERC20_transferFrom_sig_ptr,\n    ERC20_transferFrom_signature,\n    ERC20_transferFrom_to_ptr,\n    ERC721_transferFrom_from_ptr,\n    ERC721_transferFrom_id_ptr,\n    ERC721_transferFrom_length,\n    ERC721_transferFrom_sig_ptr,\n    ERC721_transferFrom_signature,\n    ERC721_transferFrom_to_ptr,\n    ExtraGasBuffer,\n    FreeMemoryPointerSlot,\n    Generic_error_selector_offset,\n    Invalid1155BatchTransferEncoding_length,\n    Invalid1155BatchTransferEncoding_ptr,\n    Invalid1155BatchTransferEncoding_selector,\n    MemoryExpansionCoefficientShift,\n    NoContract_error_account_ptr,\n    NoContract_error_length,\n    NoContract_error_selector,\n    OneWord,\n    OneWordShift,\n    Slot0x80,\n    Slot0xA0,\n    Slot0xC0,\n    ThirtyOneBytes,\n    TokenTransferGenericFailure_err_identifier_ptr,\n    TokenTransferGenericFailure_error_amount_ptr,\n    TokenTransferGenericFailure_error_from_ptr,\n    TokenTransferGenericFailure_error_identifier_ptr,\n    TokenTransferGenericFailure_error_length,\n    TokenTransferGenericFailure_error_selector,\n    TokenTransferGenericFailure_error_to_ptr,\n    TokenTransferGenericFailure_error_token_ptr,\n    TwoWords,\n    TwoWordsShift,\n    ZeroSlot\n} from \"seaport-types/src/lib/TokenTransferrerConstants.sol\";\n\nimport {TokenTransferrerErrors} from \"seaport-types/src/interfaces/TokenTransferrerErrors.sol\";\n\nimport {ConduitBatch1155Transfer} from \"seaport-types/src/conduit/lib/ConduitStructs.sol\";\n\n/**\n * @title TokenTransferrer\n * @author 0age\n * @custom:coauthor d1ll0n\n * @custom:coauthor transmissions11\n * @notice TokenTransferrer is a library for performing optimized ERC20, ERC721,\n *         ERC1155, and batch ERC1155 transfers, used by both Seaport as well as\n *         by conduits deployed by the ConduitController. Use great caution when\n *         considering these functions for use in other codebases, as there are\n *         significant side effects and edge cases that need to be thoroughly\n *         understood and carefully addressed.\n */\ncontract TokenTransferrer is TokenTransferrerErrors {\n    /**\n     * @dev Internal function to transfer ERC20 tokens from a given originator\n     *      to a given recipient. Sufficient approvals must be set on the\n     *      contract performing the transfer.\n     *\n     * @param token      The ERC20 token to transfer.\n     * @param from       The originator of the transfer.\n     * @param to         The recipient of the transfer.\n     * @param amount     The amount to transfer.\n     */\n    function _performERC20Transfer(address token, address from, address to, uint256 amount) internal {\n        // Utilize assembly to perform an optimized ERC20 token transfer.\n        assembly {\n            // The free memory pointer memory slot will be used when populating\n            // call data for the transfer; read the value and restore it later.\n            let memPointer := mload(FreeMemoryPointerSlot)\n\n            // Write call data into memory, starting with function selector.\n            mstore(ERC20_transferFrom_sig_ptr, ERC20_transferFrom_signature)\n            mstore(ERC20_transferFrom_from_ptr, from)\n            mstore(ERC20_transferFrom_to_ptr, to)\n            mstore(ERC20_transferFrom_amount_ptr, amount)\n\n            // Make call & copy up to 32 bytes of return data to scratch space.\n            // Scratch space does not need to be cleared ahead of time, as the\n            // subsequent check will ensure that either at least a full word of\n            // return data is received (in which case it will be overwritten) or\n            // that no data is received (in which case scratch space will be\n            // ignored) on a successful call to the given token.\n            let callStatus := call(gas(), token, 0, ERC20_transferFrom_sig_ptr, ERC20_transferFrom_length, 0, OneWord)\n\n            // Determine whether transfer was successful using status & result.\n            let success :=\n                and(\n                    // Set success to whether the call reverted, if not check it\n                    // either returned exactly 1 (can't just be non-zero data), or\n                    // had no return data.\n                    or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n                    callStatus\n                )\n\n            // Handle cases where either the transfer failed or no data was\n            // returned. Group these, as most transfers will succeed with data.\n            // Equivalent to `or(iszero(success), iszero(returndatasize()))`\n            // but after it's inverted for JUMPI this expression is cheaper.\n            if iszero(and(success, iszero(iszero(returndatasize())))) {\n                // If the token has no code or the transfer failed: Equivalent\n                // to `or(iszero(success), iszero(extcodesize(token)))` but\n                // after it's inverted for JUMPI this expression is cheaper.\n                if iszero(and(iszero(iszero(extcodesize(token))), success)) {\n                    // If the transfer failed:\n                    if iszero(success) {\n                        // If it was due to a revert:\n                        if iszero(callStatus) {\n                            // If it returned a message, bubble it up as long as\n                            // sufficient gas remains to do so:\n                            if returndatasize() {\n                                // Ensure that sufficient gas is available to\n                                // copy returndata while expanding memory where\n                                // necessary. Start by computing the word size\n                                // of returndata and allocated memory. Round up\n                                // to the nearest full word.\n                                let returnDataWords := shr(OneWordShift, add(returndatasize(), ThirtyOneBytes))\n\n                                // Note: use the free memory pointer in place of\n                                // msize() to work around a Yul warning that\n                                // prevents accessing msize directly when the IR\n                                // pipeline is activated.\n                                let msizeWords := shr(OneWordShift, memPointer)\n\n                                // Next, compute the cost of the returndatacopy.\n                                let cost := mul(CostPerWord, returnDataWords)\n\n                                // Then, compute cost of new memory allocation.\n                                if gt(returnDataWords, msizeWords) {\n                                    cost :=\n                                        add(\n                                            cost,\n                                            add(\n                                                mul(sub(returnDataWords, msizeWords), CostPerWord),\n                                                shr(\n                                                    MemoryExpansionCoefficientShift,\n                                                    sub(mul(returnDataWords, returnDataWords), mul(msizeWords, msizeWords))\n                                                )\n                                            )\n                                        )\n                                }\n\n                                // Finally, add a small constant and compare to\n                                // gas remaining; bubble up the revert data if\n                                // enough gas is still available.\n                                if lt(add(cost, ExtraGasBuffer), gas()) {\n                                    // Copy returndata to memory; overwrite\n                                    // existing memory.\n                                    returndatacopy(0, 0, returndatasize())\n\n                                    // Revert, specifying memory region with\n                                    // copied returndata.\n                                    revert(0, returndatasize())\n                                }\n                            }\n\n                            // Store left-padded selector with push4, mem[28:32]\n                            mstore(0, TokenTransferGenericFailure_error_selector)\n                            mstore(TokenTransferGenericFailure_error_token_ptr, token)\n                            mstore(TokenTransferGenericFailure_error_from_ptr, from)\n                            mstore(TokenTransferGenericFailure_error_to_ptr, to)\n                            mstore(TokenTransferGenericFailure_err_identifier_ptr, 0)\n                            mstore(TokenTransferGenericFailure_error_amount_ptr, amount)\n\n                            // revert(abi.encodeWithSignature(\n                            //     \"TokenTransferGenericFailure(\n                            //         address,address,address,uint256,uint256\n                            //     )\", token, from, to, identifier, amount\n                            // ))\n                            revert(Generic_error_selector_offset, TokenTransferGenericFailure_error_length)\n                        }\n\n                        // Otherwise revert with a message about the token\n                        // returning false or non-compliant return values.\n\n                        // Store left-padded selector with push4, mem[28:32]\n                        mstore(0, BadReturnValueFromERC20OnTransfer_error_selector)\n                        mstore(BadReturnValueFromERC20OnTransfer_error_token_ptr, token)\n                        mstore(BadReturnValueFromERC20OnTransfer_error_from_ptr, from)\n                        mstore(BadReturnValueFromERC20OnTransfer_error_to_ptr, to)\n                        mstore(BadReturnValueFromERC20OnTransfer_error_amount_ptr, amount)\n\n                        // revert(abi.encodeWithSignature(\n                        //     \"BadReturnValueFromERC20OnTransfer(\n                        //         address,address,address,uint256\n                        //     )\", token, from, to, amount\n                        // ))\n                        revert(Generic_error_selector_offset, BadReturnValueFromERC20OnTransfer_error_length)\n                    }\n\n                    // Otherwise, revert with error about token not having code:\n                    // Store left-padded selector with push4, mem[28:32]\n                    mstore(0, NoContract_error_selector)\n                    mstore(NoContract_error_account_ptr, token)\n\n                    // revert(abi.encodeWithSignature(\n                    //      \"NoContract(address)\", account\n                    // ))\n                    revert(Generic_error_selector_offset, NoContract_error_length)\n                }\n\n                // Otherwise, the token just returned no data despite the call\n                // having succeeded; no need to optimize for this as it's not\n                // technically ERC20 compliant.\n            }\n\n            // Restore the original free memory pointer.\n            mstore(FreeMemoryPointerSlot, memPointer)\n\n            // Restore the zero slot to zero.\n            mstore(ZeroSlot, 0)\n        }\n    }\n\n    /**\n     * @dev Internal function to transfer an ERC721 token from a given\n     *      originator to a given recipient. Sufficient approvals must be set on\n     *      the contract performing the transfer. Note that this function does\n     *      not check whether the receiver can accept the ERC721 token (i.e. it\n     *      does not use `safeTransferFrom`).\n     *\n     * @param token      The ERC721 token to transfer.\n     * @param from       The originator of the transfer.\n     * @param to         The recipient of the transfer.\n     * @param identifier The tokenId to transfer.\n     */\n    function _performERC721Transfer(address token, address from, address to, uint256 identifier) internal {\n        // Utilize assembly to perform an optimized ERC721 token transfer.\n        assembly {\n            // If the token has no code, revert.\n            if iszero(extcodesize(token)) {\n                // Store left-padded selector with push4, mem[28:32] = selector\n                mstore(0, NoContract_error_selector)\n                mstore(NoContract_error_account_ptr, token)\n\n                // revert(abi.encodeWithSignature(\n                //     \"NoContract(address)\", account\n                // ))\n                revert(Generic_error_selector_offset, NoContract_error_length)\n            }\n\n            // The free memory pointer memory slot will be used when populating\n            // call data for the transfer; read the value and restore it later.\n            let memPointer := mload(FreeMemoryPointerSlot)\n\n            // Write call data to memory starting with function selector.\n            mstore(ERC721_transferFrom_sig_ptr, ERC721_transferFrom_signature)\n            mstore(ERC721_transferFrom_from_ptr, from)\n            mstore(ERC721_transferFrom_to_ptr, to)\n            mstore(ERC721_transferFrom_id_ptr, identifier)\n\n            // Perform the call, ignoring return data.\n            let success := call(gas(), token, 0, ERC721_transferFrom_sig_ptr, ERC721_transferFrom_length, 0, 0)\n\n            // If the transfer reverted:\n            if iszero(success) {\n                // If it returned a message, bubble it up as long as sufficient\n                // gas remains to do so:\n                if returndatasize() {\n                    // Ensure that sufficient gas is available to copy\n                    // returndata while expanding memory where necessary. Start\n                    // by computing word size of returndata & allocated memory.\n                    // Round up to the nearest full word.\n                    let returnDataWords := shr(OneWordShift, add(returndatasize(), ThirtyOneBytes))\n\n                    // Note: use the free memory pointer in place of msize() to\n                    // work around a Yul warning that prevents accessing msize\n                    // directly when the IR pipeline is activated.\n                    let msizeWords := shr(OneWordShift, memPointer)\n\n                    // Next, compute the cost of the returndatacopy.\n                    let cost := mul(CostPerWord, returnDataWords)\n\n                    // Then, compute cost of new memory allocation.\n                    if gt(returnDataWords, msizeWords) {\n                        cost :=\n                            add(\n                                cost,\n                                add(\n                                    mul(sub(returnDataWords, msizeWords), CostPerWord),\n                                    shr(\n                                        MemoryExpansionCoefficientShift,\n                                        sub(mul(returnDataWords, returnDataWords), mul(msizeWords, msizeWords))\n                                    )\n                                )\n                            )\n                    }\n\n                    // Finally, add a small constant and compare to gas\n                    // remaining; bubble up the revert data if enough gas is\n                    // still available.\n                    if lt(add(cost, ExtraGasBuffer), gas()) {\n                        // Copy returndata to memory; overwrite existing memory.\n                        returndatacopy(0, 0, returndatasize())\n\n                        // Revert, giving memory region with copied returndata.\n                        revert(0, returndatasize())\n                    }\n                }\n\n                // Otherwise revert with a generic error message.\n                // Store left-padded selector with push4, mem[28:32] = selector\n                mstore(0, TokenTransferGenericFailure_error_selector)\n                mstore(TokenTransferGenericFailure_error_token_ptr, token)\n                mstore(TokenTransferGenericFailure_error_from_ptr, from)\n                mstore(TokenTransferGenericFailure_error_to_ptr, to)\n                mstore(TokenTransferGenericFailure_error_identifier_ptr, identifier)\n                mstore(TokenTransferGenericFailure_error_amount_ptr, 1)\n\n                // revert(abi.encodeWithSignature(\n                //     \"TokenTransferGenericFailure(\n                //         address,address,address,uint256,uint256\n                //     )\", token, from, to, identifier, amount\n                // ))\n                revert(Generic_error_selector_offset, TokenTransferGenericFailure_error_length)\n            }\n\n            // Restore the original free memory pointer.\n            mstore(FreeMemoryPointerSlot, memPointer)\n\n            // Restore the zero slot to zero.\n            mstore(ZeroSlot, 0)\n        }\n    }\n\n    /**\n     * @dev Internal function to transfer ERC1155 tokens from a given\n     *      originator to a given recipient. Sufficient approvals must be set on\n     *      the contract performing the transfer and contract recipients must\n     *      implement the ERC1155TokenReceiver interface to indicate that they\n     *      are willing to accept the transfer.\n     *\n     * @param token      The ERC1155 token to transfer.\n     * @param from       The originator of the transfer.\n     * @param to         The recipient of the transfer.\n     * @param identifier The id to transfer.\n     * @param amount     The amount to transfer.\n     */\n    function _performERC1155Transfer(address token, address from, address to, uint256 identifier, uint256 amount)\n        internal\n    {\n        // Utilize assembly to perform an optimized ERC1155 token transfer.\n        assembly {\n            // If the token has no code, revert.\n            if iszero(extcodesize(token)) {\n                // Store left-padded selector with push4, mem[28:32] = selector\n                mstore(0, NoContract_error_selector)\n                mstore(NoContract_error_account_ptr, token)\n\n                // revert(abi.encodeWithSignature(\n                //     \"NoContract(address)\", account\n                // ))\n                revert(Generic_error_selector_offset, NoContract_error_length)\n            }\n\n            // The following memory slots will be used when populating call data\n            // for the transfer; read the values and restore them later.\n            let memPointer := mload(FreeMemoryPointerSlot)\n            let slot0x80 := mload(Slot0x80)\n            let slot0xA0 := mload(Slot0xA0)\n            let slot0xC0 := mload(Slot0xC0)\n\n            // Write call data into memory, beginning with function selector.\n            mstore(ERC1155_safeTransferFrom_sig_ptr, ERC1155_safeTransferFrom_signature)\n            mstore(ERC1155_safeTransferFrom_from_ptr, from)\n            mstore(ERC1155_safeTransferFrom_to_ptr, to)\n            mstore(ERC1155_safeTransferFrom_id_ptr, identifier)\n            mstore(ERC1155_safeTransferFrom_amount_ptr, amount)\n            mstore(ERC1155_safeTransferFrom_data_offset_ptr, ERC1155_safeTransferFrom_data_length_offset)\n            mstore(ERC1155_safeTransferFrom_data_length_ptr, 0)\n\n            // Perform the call, ignoring return data.\n            let success :=\n                call(gas(), token, 0, ERC1155_safeTransferFrom_sig_ptr, ERC1155_safeTransferFrom_length, 0, 0)\n\n            // If the transfer reverted:\n            if iszero(success) {\n                // If it returned a message, bubble it up as long as sufficient\n                // gas remains to do so:\n                if returndatasize() {\n                    // Ensure that sufficient gas is available to copy\n                    // returndata while expanding memory where necessary. Start\n                    // by computing word size of returndata & allocated memory.\n                    // Round up to the nearest full word.\n                    let returnDataWords := shr(OneWordShift, add(returndatasize(), ThirtyOneBytes))\n\n                    // Note: use the free memory pointer in place of msize() to\n                    // work around a Yul warning that prevents accessing msize\n                    // directly when the IR pipeline is activated.\n                    let msizeWords := shr(OneWordShift, memPointer)\n\n                    // Next, compute the cost of the returndatacopy.\n                    let cost := mul(CostPerWord, returnDataWords)\n\n                    // Then, compute cost of new memory allocation.\n                    if gt(returnDataWords, msizeWords) {\n                        cost :=\n                            add(\n                                cost,\n                                add(\n                                    mul(sub(returnDataWords, msizeWords), CostPerWord),\n                                    shr(\n                                        MemoryExpansionCoefficientShift,\n                                        sub(mul(returnDataWords, returnDataWords), mul(msizeWords, msizeWords))\n                                    )\n                                )\n                            )\n                    }\n\n                    // Finally, add a small constant and compare to gas\n                    // remaining; bubble up the revert data if enough gas is\n                    // still available.\n                    if lt(add(cost, ExtraGasBuffer), gas()) {\n                        // Copy returndata to memory; overwrite existing memory.\n                        returndatacopy(0, 0, returndatasize())\n\n                        // Revert, giving memory region with copied returndata.\n                        revert(0, returndatasize())\n                    }\n                }\n\n                // Otherwise revert with a generic error message.\n\n                // Store left-padded selector with push4, mem[28:32] = selector\n                mstore(0, TokenTransferGenericFailure_error_selector)\n                mstore(TokenTransferGenericFailure_error_token_ptr, token)\n                mstore(TokenTransferGenericFailure_error_from_ptr, from)\n                mstore(TokenTransferGenericFailure_error_to_ptr, to)\n                mstore(TokenTransferGenericFailure_error_identifier_ptr, identifier)\n                mstore(TokenTransferGenericFailure_error_amount_ptr, amount)\n\n                // revert(abi.encodeWithSignature(\n                //     \"TokenTransferGenericFailure(\n                //         address,address,address,uint256,uint256\n                //     )\", token, from, to, identifier, amount\n                // ))\n                revert(Generic_error_selector_offset, TokenTransferGenericFailure_error_length)\n            }\n\n            mstore(Slot0x80, slot0x80) // Restore slot 0x80.\n            mstore(Slot0xA0, slot0xA0) // Restore slot 0xA0.\n            mstore(Slot0xC0, slot0xC0) // Restore slot 0xC0.\n\n            // Restore the original free memory pointer.\n            mstore(FreeMemoryPointerSlot, memPointer)\n\n            // Restore the zero slot to zero.\n            mstore(ZeroSlot, 0)\n        }\n    }\n\n    /**\n     * @dev Internal function to transfer ERC1155 tokens from a given\n     *      originator to a given recipient. Sufficient approvals must be set on\n     *      the contract performing the transfer and contract recipients must\n     *      implement the ERC1155TokenReceiver interface to indicate that they\n     *      are willing to accept the transfer. NOTE: this function is not\n     *      memory-safe; it will overwrite existing memory, restore the free\n     *      memory pointer to the default value, and overwrite the zero slot.\n     *      This function should only be called once memory is no longer\n     *      required and when uninitialized arrays are not utilized, and memory\n     *      should be considered fully corrupted (aside from the existence of a\n     *      default-value free memory pointer) after calling this function.\n     *\n     * @param batchTransfers The group of 1155 batch transfers to perform.\n     */\n    function _performERC1155BatchTransfers(ConduitBatch1155Transfer[] calldata batchTransfers) internal {\n        // Utilize assembly to perform optimized batch 1155 transfers.\n        assembly {\n            let len := batchTransfers.length\n            // Pointer to first head in the array, which is offset to the struct\n            // at each index. This gets incremented after each loop to avoid\n            // multiplying by 32 to get the offset for each element.\n            let nextElementHeadPtr := batchTransfers.offset\n\n            // Pointer to beginning of the head of the array. This is the\n            // reference position each offset references. It's held static to\n            // let each loop calculate the data position for an element.\n            let arrayHeadPtr := nextElementHeadPtr\n\n            // Write the function selector, which will be reused for each call:\n            // safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\n            mstore(ConduitBatch1155Transfer_from_offset, ERC1155_safeBatchTransferFrom_signature)\n\n            // Iterate over each batch transfer.\n            for { let i := 0 } lt(i, len) { i := add(i, 1) } {\n                // Read the offset to the beginning of the element and add\n                // it to pointer to the beginning of the array head to get\n                // the absolute position of the element in calldata.\n                let elementPtr := add(arrayHeadPtr, calldataload(nextElementHeadPtr))\n\n                // Retrieve the token from calldata.\n                let token := calldataload(elementPtr)\n\n                // If the token has no code, revert.\n                if iszero(extcodesize(token)) {\n                    // Store left-padded selector with push4, mem[28:32]\n                    mstore(0, NoContract_error_selector)\n                    mstore(NoContract_error_account_ptr, token)\n\n                    // revert(abi.encodeWithSignature(\n                    //     \"NoContract(address)\", account\n                    // ))\n                    revert(Generic_error_selector_offset, NoContract_error_length)\n                }\n\n                // Get the total number of supplied ids.\n                let idsLength := calldataload(add(elementPtr, ConduitBatch1155Transfer_ids_length_offset))\n\n                // Determine the expected offset for the amounts array.\n                let expectedAmountsOffset :=\n                    add(ConduitBatch1155Transfer_amounts_length_baseOffset, shl(OneWordShift, idsLength))\n\n                // Validate struct encoding.\n                let invalidEncoding :=\n                    iszero(\n                        and(\n                            // ids.length == amounts.length\n                            eq(idsLength, calldataload(add(elementPtr, expectedAmountsOffset))),\n                            and(\n                                // ids_offset == 0xa0\n                                eq(\n                                    calldataload(add(elementPtr, ConduitBatch1155Transfer_ids_head_offset)),\n                                    ConduitBatch1155Transfer_ids_length_offset\n                                ),\n                                // amounts_offset == 0xc0 + ids.length*32\n                                eq(\n                                    calldataload(add(elementPtr, ConduitBatchTransfer_amounts_head_offset)),\n                                    expectedAmountsOffset\n                                )\n                            )\n                        )\n                    )\n\n                // Revert with an error if the encoding is not valid.\n                if invalidEncoding {\n                    // Store left-padded selector with push4, mem[28:32]\n                    mstore(Invalid1155BatchTransferEncoding_ptr, Invalid1155BatchTransferEncoding_selector)\n\n                    // revert(abi.encodeWithSignature(\n                    //     \"Invalid1155BatchTransferEncoding()\"\n                    // ))\n                    revert(Invalid1155BatchTransferEncoding_ptr, Invalid1155BatchTransferEncoding_length)\n                }\n\n                // Update the offset position for the next loop\n                nextElementHeadPtr := add(nextElementHeadPtr, OneWord)\n\n                // Copy the first section of calldata (before dynamic values).\n                calldatacopy(\n                    BatchTransfer1155Params_ptr,\n                    add(elementPtr, ConduitBatch1155Transfer_from_offset),\n                    ConduitBatch1155Transfer_usable_head_size\n                )\n\n                // Determine size of calldata required for ids and amounts. Note\n                // that the size includes both lengths as well as the data.\n                let idsAndAmountsSize := add(TwoWords, shl(TwoWordsShift, idsLength))\n\n                // Update the offset for the data array in memory.\n                mstore(\n                    BatchTransfer1155Params_data_head_ptr,\n                    add(BatchTransfer1155Params_ids_length_offset, idsAndAmountsSize)\n                )\n\n                // Set the length of the data array in memory to zero.\n                mstore(add(BatchTransfer1155Params_data_length_basePtr, idsAndAmountsSize), 0)\n\n                // Determine the total calldata size for the call to transfer.\n                let transferDataSize := add(BatchTransfer1155Params_calldata_baseSize, idsAndAmountsSize)\n\n                // Copy second section of calldata (including dynamic values).\n                calldatacopy(\n                    BatchTransfer1155Params_ids_length_ptr,\n                    add(elementPtr, ConduitBatch1155Transfer_ids_length_offset),\n                    idsAndAmountsSize\n                )\n\n                // Perform the call to transfer 1155 tokens.\n                let success :=\n                    call(\n                        gas(),\n                        token,\n                        0,\n                        ConduitBatch1155Transfer_from_offset, // Data portion start.\n                        transferDataSize, // Location of the length of callData.\n                        0,\n                        0\n                    )\n\n                // If the transfer reverted:\n                if iszero(success) {\n                    // If it returned a message, bubble it up as long as\n                    // sufficient gas remains to do so:\n                    if returndatasize() {\n                        // Ensure that sufficient gas is available to copy\n                        // returndata while expanding memory where necessary.\n                        // Start by computing word size of returndata and\n                        // allocated memory. Round up to the nearest full word.\n                        let returnDataWords := shr(OneWordShift, add(returndatasize(), ThirtyOneBytes))\n\n                        // Note: use transferDataSize in place of msize() to\n                        // work around a Yul warning that prevents accessing\n                        // msize directly when the IR pipeline is activated.\n                        // The free memory pointer is not used here because\n                        // this function does almost all memory management\n                        // manually and does not update it, and transferDataSize\n                        // should be the largest memory value used (unless a\n                        // previous batch was larger).\n                        let msizeWords := shr(OneWordShift, transferDataSize)\n\n                        // Next, compute the cost of the returndatacopy.\n                        let cost := mul(CostPerWord, returnDataWords)\n\n                        // Then, compute cost of new memory allocation.\n                        if gt(returnDataWords, msizeWords) {\n                            cost :=\n                                add(\n                                    cost,\n                                    add(\n                                        mul(sub(returnDataWords, msizeWords), CostPerWord),\n                                        shr(\n                                            MemoryExpansionCoefficientShift,\n                                            sub(mul(returnDataWords, returnDataWords), mul(msizeWords, msizeWords))\n                                        )\n                                    )\n                                )\n                        }\n\n                        // Finally, add a small constant and compare to gas\n                        // remaining; bubble up the revert data if enough gas is\n                        // still available.\n                        if lt(add(cost, ExtraGasBuffer), gas()) {\n                            // Copy returndata to memory; overwrite existing.\n                            returndatacopy(0, 0, returndatasize())\n\n                            // Revert with memory region containing returndata.\n                            revert(0, returndatasize())\n                        }\n                    }\n\n                    // Set the error signature.\n                    mstore(0, ERC1155BatchTransferGenericFailure_error_signature)\n\n                    // Write the token.\n                    mstore(ERC1155BatchTransferGenericFailure_token_ptr, token)\n\n                    // Increase the offset to ids by 32.\n                    mstore(BatchTransfer1155Params_ids_head_ptr, ERC1155BatchTransferGenericFailure_ids_offset)\n\n                    // Increase the offset to amounts by 32.\n                    mstore(\n                        BatchTransfer1155Params_amounts_head_ptr,\n                        add(OneWord, mload(BatchTransfer1155Params_amounts_head_ptr))\n                    )\n\n                    // Return modified region. The total size stays the same as\n                    // `token` uses the same number of bytes as `data.length`.\n                    revert(0, transferDataSize)\n                }\n            }\n\n            // Reset the free memory pointer to the default value; memory must\n            // be assumed to be dirtied and not reused from this point forward.\n            // Also note that the zero slot is not reset to zero, meaning empty\n            // arrays cannot be safely created or utilized until it is restored.\n            mstore(FreeMemoryPointerSlot, DefaultFreeMemoryPointer)\n        }\n    }\n}\n"},"seaport-types/src/conduit/lib/ConduitConstants.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\n// error ChannelClosed(address channel)\nuint256 constant ChannelClosed_error_signature = (\n    0x93daadf200000000000000000000000000000000000000000000000000000000\n);\nuint256 constant ChannelClosed_error_ptr = 0x00;\nuint256 constant ChannelClosed_channel_ptr = 0x4;\nuint256 constant ChannelClosed_error_length = 0x24;\n\n// For the mapping:\n// mapping(address => bool) channels\n// The position in storage for a particular account is:\n// keccak256(abi.encode(account, channels.slot))\nuint256 constant ChannelKey_channel_ptr = 0x00;\nuint256 constant ChannelKey_slot_ptr = 0x20;\nuint256 constant ChannelKey_length = 0x40;\n"},"seaport-types/src/conduit/lib/ConduitEnums.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nenum ConduitItemType {\n    NATIVE, // unused\n    ERC20,\n    ERC721,\n    ERC1155\n}\n"},"seaport-types/src/conduit/lib/ConduitStructs.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport { ConduitItemType } from \"./ConduitEnums.sol\";\n\n/**\n * @dev A ConduitTransfer is a struct that contains the information needed for a\n *      conduit to transfer an item from one address to another.\n */\nstruct ConduitTransfer {\n    ConduitItemType itemType;\n    address token;\n    address from;\n    address to;\n    uint256 identifier;\n    uint256 amount;\n}\n\n/**\n * @dev A ConduitBatch1155Transfer is a struct that contains the information\n *      needed for a conduit to transfer a batch of ERC-1155 tokens from one\n *      address to another.\n */\nstruct ConduitBatch1155Transfer {\n    address token;\n    address from;\n    address to;\n    uint256[] ids;\n    uint256[] amounts;\n}\n"},"seaport-types/src/interfaces/ConduitInterface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport {\n    ConduitBatch1155Transfer,\n    ConduitTransfer\n} from \"../conduit/lib/ConduitStructs.sol\";\n\n/**\n * @title ConduitInterface\n * @author 0age\n * @notice ConduitInterface contains all external function interfaces, events,\n *         and errors for conduit contracts.\n */\ninterface ConduitInterface {\n    /**\n     * @dev Revert with an error when attempting to execute transfers using a\n     *      caller that does not have an open channel.\n     */\n    error ChannelClosed(address channel);\n\n    /**\n     * @dev Revert with an error when attempting to update a channel to the\n     *      current status of that channel.\n     */\n    error ChannelStatusAlreadySet(address channel, bool isOpen);\n\n    /**\n     * @dev Revert with an error when attempting to execute a transfer for an\n     *      item that does not have an ERC20/721/1155 item type.\n     */\n    error InvalidItemType();\n\n    /**\n     * @dev Revert with an error when attempting to update the status of a\n     *      channel from a caller that is not the conduit controller.\n     */\n    error InvalidController();\n\n    /**\n     * @dev Emit an event whenever a channel is opened or closed.\n     *\n     * @param channel The channel that has been updated.\n     * @param open    A boolean indicating whether the conduit is open or not.\n     */\n    event ChannelUpdated(address indexed channel, bool open);\n\n    /**\n     * @notice Execute a sequence of ERC20/721/1155 transfers. Only a caller\n     *         with an open channel can call this function.\n     *\n     * @param transfers The ERC20/721/1155 transfers to perform.\n     *\n     * @return magicValue A magic value indicating that the transfers were\n     *                    performed successfully.\n     */\n    function execute(\n        ConduitTransfer[] calldata transfers\n    ) external returns (bytes4 magicValue);\n\n    /**\n     * @notice Execute a sequence of batch 1155 transfers. Only a caller with an\n     *         open channel can call this function.\n     *\n     * @param batch1155Transfers The 1155 batch transfers to perform.\n     *\n     * @return magicValue A magic value indicating that the transfers were\n     *                    performed successfully.\n     */\n    function executeBatch1155(\n        ConduitBatch1155Transfer[] calldata batch1155Transfers\n    ) external returns (bytes4 magicValue);\n\n    /**\n     * @notice Execute a sequence of transfers, both single and batch 1155. Only\n     *         a caller with an open channel can call this function.\n     *\n     * @param standardTransfers  The ERC20/721/1155 transfers to perform.\n     * @param batch1155Transfers The 1155 batch transfers to perform.\n     *\n     * @return magicValue A magic value indicating that the transfers were\n     *                    performed successfully.\n     */\n    function executeWithBatch1155(\n        ConduitTransfer[] calldata standardTransfers,\n        ConduitBatch1155Transfer[] calldata batch1155Transfers\n    ) external returns (bytes4 magicValue);\n\n    /**\n     * @notice Open or close a given channel. Only callable by the controller.\n     *\n     * @param channel The channel to open or close.\n     * @param isOpen  The status of the channel (either open or closed).\n     */\n    function updateChannel(address channel, bool isOpen) external;\n}\n"},"seaport-types/src/interfaces/TokenTransferrerErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\n/**\n * @title TokenTransferrerErrors\n */\ninterface TokenTransferrerErrors {\n    /**\n     * @dev Revert with an error when an ERC721 transfer with amount other than\n     *      one is attempted.\n     *\n     * @param amount The amount of the ERC721 tokens to transfer.\n     */\n    error InvalidERC721TransferAmount(uint256 amount);\n\n    /**\n     * @dev Revert with an error when attempting to fulfill an order where an\n     *      item has an amount of zero.\n     */\n    error MissingItemAmount();\n\n    /**\n     * @dev Revert with an error when attempting to fulfill an order where an\n     *      item has unused parameters. This includes both the token and the\n     *      identifier parameters for native transfers as well as the identifier\n     *      parameter for ERC20 transfers. Note that the conduit does not\n     *      perform this check, leaving it up to the calling channel to enforce\n     *      when desired.\n     */\n    error UnusedItemParameters();\n\n    /**\n     * @dev Revert with an error when an ERC20, ERC721, or ERC1155 token\n     *      transfer reverts.\n     *\n     * @param token      The token for which the transfer was attempted.\n     * @param from       The source of the attempted transfer.\n     * @param to         The recipient of the attempted transfer.\n     * @param identifier The identifier for the attempted transfer.\n     * @param amount     The amount for the attempted transfer.\n     */\n    error TokenTransferGenericFailure(\n        address token,\n        address from,\n        address to,\n        uint256 identifier,\n        uint256 amount\n    );\n\n    /**\n     * @dev Revert with an error when a batch ERC1155 token transfer reverts.\n     *\n     * @param token       The token for which the transfer was attempted.\n     * @param from        The source of the attempted transfer.\n     * @param to          The recipient of the attempted transfer.\n     * @param identifiers The identifiers for the attempted transfer.\n     * @param amounts     The amounts for the attempted transfer.\n     */\n    error ERC1155BatchTransferGenericFailure(\n        address token,\n        address from,\n        address to,\n        uint256[] identifiers,\n        uint256[] amounts\n    );\n\n    /**\n     * @dev Revert with an error when an ERC20 token transfer returns a falsey\n     *      value.\n     *\n     * @param token      The token for which the ERC20 transfer was attempted.\n     * @param from       The source of the attempted ERC20 transfer.\n     * @param to         The recipient of the attempted ERC20 transfer.\n     * @param amount     The amount for the attempted ERC20 transfer.\n     */\n    error BadReturnValueFromERC20OnTransfer(\n        address token,\n        address from,\n        address to,\n        uint256 amount\n    );\n\n    /**\n     * @dev Revert with an error when an account being called as an assumed\n     *      contract does not have code and returns no data.\n     *\n     * @param account The account that should contain code.\n     */\n    error NoContract(address account);\n\n    /**\n     * @dev Revert with an error when attempting to execute an 1155 batch\n     *      transfer using calldata not produced by default ABI encoding or with\n     *      different lengths for ids and amounts arrays.\n     */\n    error Invalid1155BatchTransferEncoding();\n}\n"},"seaport-types/src/lib/TokenTransferrerConstants.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\n/*\n * -------------------------- Disambiguation & Other Notes ---------------------\n *    - The term \"head\" is used as it is in the documentation for ABI encoding,\n *      but only in reference to dynamic types, i.e. it always refers to the\n *      offset or pointer to the body of a dynamic type. In calldata, the head\n *      is always an offset (relative to the parent object), while in memory,\n *      the head is always the pointer to the body. More information found here:\n *      https://docs.soliditylang.org/en/v0.8.17/abi-spec.html#argument-encoding\n *        - Note that the length of an array is separate from and precedes the\n *          head of the array.\n *\n *    - The term \"body\" is used in place of the term \"head\" used in the ABI\n *      documentation. It refers to the start of the data for a dynamic type,\n *      e.g. the first word of a struct or the first word of the first element\n *      in an array.\n *\n *    - The term \"pointer\" is used to describe the absolute position of a value\n *      and never an offset relative to another value.\n *        - The suffix \"_ptr\" refers to a memory pointer.\n *        - The suffix \"_cdPtr\" refers to a calldata pointer.\n *\n *    - The term \"offset\" is used to describe the position of a value relative\n *      to some parent value. For example, OrderParameters_conduit_offset is the\n *      offset to the \"conduit\" value in the OrderParameters struct relative to\n *      the start of the body.\n *        - Note: Offsets are used to derive pointers.\n *\n *    - Some structs have pointers defined for all of their fields in this file.\n *      Lines which are commented out are fields that are not used in the\n *      codebase but have been left in for readability.\n */\n\nuint256 constant ThirtyOneBytes = 0x1f;\nuint256 constant OneWord = 0x20;\nuint256 constant TwoWords = 0x40;\nuint256 constant ThreeWords = 0x60;\n\nuint256 constant OneWordShift = 0x5;\nuint256 constant TwoWordsShift = 0x6;\n\nuint256 constant FreeMemoryPointerSlot = 0x40;\nuint256 constant ZeroSlot = 0x60;\nuint256 constant DefaultFreeMemoryPointer = 0x80;\n\nuint256 constant Slot0x80 = 0x80;\nuint256 constant Slot0xA0 = 0xa0;\nuint256 constant Slot0xC0 = 0xc0;\n\nuint256 constant Generic_error_selector_offset = 0x1c;\n\n// abi.encodeWithSignature(\"transferFrom(address,address,uint256)\")\nuint256 constant ERC20_transferFrom_signature = (\n    0x23b872dd00000000000000000000000000000000000000000000000000000000\n);\nuint256 constant ERC20_transferFrom_sig_ptr = 0x0;\nuint256 constant ERC20_transferFrom_from_ptr = 0x04;\nuint256 constant ERC20_transferFrom_to_ptr = 0x24;\nuint256 constant ERC20_transferFrom_amount_ptr = 0x44;\nuint256 constant ERC20_transferFrom_length = 0x64; // 4 + 32 * 3 == 100\n\n// abi.encodeWithSignature(\n//     \"safeTransferFrom(address,address,uint256,uint256,bytes)\"\n// )\nuint256 constant ERC1155_safeTransferFrom_signature = (\n    0xf242432a00000000000000000000000000000000000000000000000000000000\n);\nuint256 constant ERC1155_safeTransferFrom_sig_ptr = 0x0;\nuint256 constant ERC1155_safeTransferFrom_from_ptr = 0x04;\nuint256 constant ERC1155_safeTransferFrom_to_ptr = 0x24;\nuint256 constant ERC1155_safeTransferFrom_id_ptr = 0x44;\nuint256 constant ERC1155_safeTransferFrom_amount_ptr = 0x64;\nuint256 constant ERC1155_safeTransferFrom_data_offset_ptr = 0x84;\nuint256 constant ERC1155_safeTransferFrom_data_length_ptr = 0xa4;\nuint256 constant ERC1155_safeTransferFrom_length = 0xc4; // 4 + 32 * 6 == 196\nuint256 constant ERC1155_safeTransferFrom_data_length_offset = 0xa0;\n\n// abi.encodeWithSignature(\n//     \"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\"\n// )\nuint256 constant ERC1155_safeBatchTransferFrom_signature = (\n    0x2eb2c2d600000000000000000000000000000000000000000000000000000000\n);\n\n// bytes4 constant ERC1155_safeBatchTransferFrom_selector = bytes4(\n//     bytes32(ERC1155_safeBatchTransferFrom_signature)\n// );\n\nuint256 constant ERC721_transferFrom_signature = (\n    0x23b872dd00000000000000000000000000000000000000000000000000000000\n);\nuint256 constant ERC721_transferFrom_sig_ptr = 0x0;\nuint256 constant ERC721_transferFrom_from_ptr = 0x04;\nuint256 constant ERC721_transferFrom_to_ptr = 0x24;\nuint256 constant ERC721_transferFrom_id_ptr = 0x44;\nuint256 constant ERC721_transferFrom_length = 0x64; // 4 + 32 * 3 == 100\n\n/*\n *  error NoContract(address account)\n *    - Defined in TokenTransferrerErrors.sol\n *  Memory layout:\n *    - 0x00: Left-padded selector (data begins at 0x1c)\n *    - 0x00: account\n * Revert buffer is memory[0x1c:0x40]\n */\nuint256 constant NoContract_error_selector = 0x5f15d672;\nuint256 constant NoContract_error_account_ptr = 0x20;\nuint256 constant NoContract_error_length = 0x24;\n\n/*\n *  error TokenTransferGenericFailure(\n *      address token,\n *      address from,\n *      address to,\n *      uint256 identifier,\n *      uint256 amount\n *  )\n *    - Defined in TokenTransferrerErrors.sol\n *  Memory layout:\n *    - 0x00: Left-padded selector (data begins at 0x1c)\n *    - 0x20: token\n *    - 0x40: from\n *    - 0x60: to\n *    - 0x80: identifier\n *    - 0xa0: amount\n * Revert buffer is memory[0x1c:0xc0]\n */\nuint256 constant TokenTransferGenericFailure_error_selector = 0xf486bc87;\nuint256 constant TokenTransferGenericFailure_error_token_ptr = 0x20;\nuint256 constant TokenTransferGenericFailure_error_from_ptr = 0x40;\nuint256 constant TokenTransferGenericFailure_error_to_ptr = 0x60;\nuint256 constant TokenTransferGenericFailure_error_identifier_ptr = 0x80;\nuint256 constant TokenTransferGenericFailure_err_identifier_ptr = 0x80;\nuint256 constant TokenTransferGenericFailure_error_amount_ptr = 0xa0;\nuint256 constant TokenTransferGenericFailure_error_length = 0xa4;\n\nuint256 constant ExtraGasBuffer = 0x20;\nuint256 constant CostPerWord = 0x3;\nuint256 constant MemoryExpansionCoefficientShift = 0x9;\n\n// Values are offset by 32 bytes in order to write the token to the beginning\n// in the event of a revert\nuint256 constant BatchTransfer1155Params_ptr = 0x24;\nuint256 constant BatchTransfer1155Params_ids_head_ptr = 0x64;\nuint256 constant BatchTransfer1155Params_amounts_head_ptr = 0x84;\nuint256 constant BatchTransfer1155Params_data_head_ptr = 0xa4;\nuint256 constant BatchTransfer1155Params_data_length_basePtr = 0xc4;\nuint256 constant BatchTransfer1155Params_calldata_baseSize = 0xc4;\n\nuint256 constant BatchTransfer1155Params_ids_length_ptr = 0xc4;\n\nuint256 constant BatchTransfer1155Params_ids_length_offset = 0xa0;\n// uint256 constant BatchTransfer1155Params_amounts_length_baseOffset = 0xc0;\n// uint256 constant BatchTransfer1155Params_data_length_baseOffset = 0xe0;\n\nuint256 constant ConduitBatch1155Transfer_usable_head_size = 0x80;\n\nuint256 constant ConduitBatch1155Transfer_from_offset = 0x20;\nuint256 constant ConduitBatch1155Transfer_ids_head_offset = 0x60;\n// uint256 constant ConduitBatch1155Transfer_amounts_head_offset = 0x80;\nuint256 constant ConduitBatch1155Transfer_ids_length_offset = 0xa0;\nuint256 constant ConduitBatch1155Transfer_amounts_length_baseOffset = 0xc0;\n// uint256 constant ConduitBatch1155Transfer_calldata_baseSize = 0xc0;\n\n// Note: abbreviated version of above constant to adhere to line length limit.\nuint256 constant ConduitBatchTransfer_amounts_head_offset = 0x80;\n\nuint256 constant Invalid1155BatchTransferEncoding_ptr = 0x00;\nuint256 constant Invalid1155BatchTransferEncoding_length = 0x04;\nuint256 constant Invalid1155BatchTransferEncoding_selector = (\n    0xeba2084c00000000000000000000000000000000000000000000000000000000\n);\n\nuint256 constant ERC1155BatchTransferGenericFailure_error_signature = (\n    0xafc445e200000000000000000000000000000000000000000000000000000000\n);\nuint256 constant ERC1155BatchTransferGenericFailure_token_ptr = 0x04;\nuint256 constant ERC1155BatchTransferGenericFailure_ids_offset = 0xc0;\n\n/*\n *  error BadReturnValueFromERC20OnTransfer(\n *      address token, address from, address to, uint256 amount\n *  )\n *    - Defined in TokenTransferrerErrors.sol\n *  Memory layout:\n *    - 0x00: Left-padded selector (data begins at 0x1c)\n *    - 0x00: token\n *    - 0x20: from\n *    - 0x40: to\n *    - 0x60: amount\n * Revert buffer is memory[0x1c:0xa0]\n */\nuint256 constant BadReturnValueFromERC20OnTransfer_error_selector = 0x98891923;\nuint256 constant BadReturnValueFromERC20OnTransfer_error_token_ptr = 0x20;\nuint256 constant BadReturnValueFromERC20OnTransfer_error_from_ptr = 0x40;\nuint256 constant BadReturnValueFromERC20OnTransfer_error_to_ptr = 0x60;\nuint256 constant BadReturnValueFromERC20OnTransfer_error_amount_ptr = 0x80;\nuint256 constant BadReturnValueFromERC20OnTransfer_error_length = 0x84;\n"}},"settings":{"viaIR":true,"optimizer":{"enabled":true,"mode":"3"},"outputSelection":{"*":{"*":["abi","evm.methodIdentifiers","metadata"],"":["ast"]}},"libraries":{}}},"output":{"errors":[{"component":"general","errorCode":null,"formattedMessage":"\n┌──────────────────────────────────────────────────────────────────────────────────────────────────┐\n│ Warning: Your code or one of its dependencies uses the 'extcodesize' instruction, which is       │\n│ usually needed in the following cases:                                                           │\n│   1. To detect whether an address belongs to a smart contract.                                   │\n│   2. To detect whether the deploy code execution has finished.                                   │\n│ zkSync Era comes with native account abstraction support (so accounts are smart contracts,       │\n│ including private-key controlled EOAs), and you should avoid differentiating between contracts   │\n│ and non-contract addresses.                                                                      │\n└──────────────────────────────────────────────────────────────────────────────────────────────────┘\n--> seaport-core/src/lib/TokenTransferrer.sol\n","message":"\n┌──────────────────────────────────────────────────────────────────────────────────────────────────┐\n│ Warning: Your code or one of its dependencies uses the 'extcodesize' instruction, which is       │\n│ usually needed in the following cases:                                                           │\n│   1. To detect whether an address belongs to a smart contract.                                   │\n│   2. To detect whether the deploy code execution has finished.                                   │\n│ zkSync Era comes with native account abstraction support (so accounts are smart contracts,       │\n│ including private-key controlled EOAs), and you should avoid differentiating between contracts   │\n│ and non-contract addresses.                                                                      │\n└──────────────────────────────────────────────────────────────────────────────────────────────────┘","severity":"warning","sourceLocation":{"file":"2","start":6720,"end":6738},"type":"Warning"},{"component":"general","errorCode":null,"formattedMessage":"\n┌──────────────────────────────────────────────────────────────────────────────────────────────────┐\n│ Warning: Your code or one of its dependencies uses the 'extcodesize' instruction, which is       │\n│ usually needed in the following cases:                                                           │\n│   1. To detect whether an address belongs to a smart contract.                                   │\n│   2. To detect whether the deploy code execution has finished.                                   │\n│ zkSync Era comes with native account abstraction support (so accounts are smart contracts,       │\n│ including private-key controlled EOAs), and you should avoid differentiating between contracts   │\n│ and non-contract addresses.                                                                      │\n└──────────────────────────────────────────────────────────────────────────────────────────────────┘\n--> seaport-core/src/lib/TokenTransferrer.sol\n","message":"\n┌──────────────────────────────────────────────────────────────────────────────────────────────────┐\n│ Warning: Your code or one of its dependencies uses the 'extcodesize' instruction, which is       │\n│ usually needed in the following cases:                                                           │\n│   1. To detect whether an address belongs to a smart contract.                                   │\n│   2. To detect whether the deploy code execution has finished.                                   │\n│ zkSync Era comes with native account abstraction support (so accounts are smart contracts,       │\n│ including private-key controlled EOAs), and you should avoid differentiating between contracts   │\n│ and non-contract addresses.                                                                      │\n└──────────────────────────────────────────────────────────────────────────────────────────────────┘","severity":"warning","sourceLocation":{"file":"2","start":13748,"end":13766},"type":"Warning"},{"component":"general","errorCode":null,"formattedMessage":"\n┌──────────────────────────────────────────────────────────────────────────────────────────────────┐\n│ Warning: Your code or one of its dependencies uses the 'extcodesize' instruction, which is       │\n│ usually needed in the following cases:                                                           │\n│   1. To detect whether an address belongs to a smart contract.                                   │\n│   2. To detect whether the deploy code execution has finished.                                   │\n│ zkSync Era comes with native account abstraction support (so accounts are smart contracts,       │\n│ including private-key controlled EOAs), and you should avoid differentiating between contracts   │\n│ and non-contract addresses.                                                                      │\n└──────────────────────────────────────────────────────────────────────────────────────────────────┘\n--> seaport-core/src/lib/TokenTransferrer.sol\n","message":"\n┌──────────────────────────────────────────────────────────────────────────────────────────────────┐\n│ Warning: Your code or one of its dependencies uses the 'extcodesize' instruction, which is       │\n│ usually needed in the following cases:                                                           │\n│   1. To detect whether an address belongs to a smart contract.                                   │\n│   2. To detect whether the deploy code execution has finished.                                   │\n│ zkSync Era comes with native account abstraction support (so accounts are smart contracts,       │\n│ including private-key controlled EOAs), and you should avoid differentiating between contracts   │\n│ and non-contract addresses.                                                                      │\n└──────────────────────────────────────────────────────────────────────────────────────────────────┘","severity":"warning","sourceLocation":{"file":"2","start":19329,"end":19347},"type":"Warning"},{"component":"general","errorCode":null,"formattedMessage":"\n┌──────────────────────────────────────────────────────────────────────────────────────────────────┐\n│ Warning: Your code or one of its dependencies uses the 'extcodesize' instruction, which is       │\n│ usually needed in the following cases:                                                           │\n│   1. To detect whether an address belongs to a smart contract.                                   │\n│   2. To detect whether the deploy code execution has finished.                                   │\n│ zkSync Era comes with native account abstraction support (so accounts are smart contracts,       │\n│ including private-key controlled EOAs), and you should avoid differentiating between contracts   │\n│ and non-contract addresses.                                                                      │\n└──────────────────────────────────────────────────────────────────────────────────────────────────┘\n--> seaport-core/src/lib/TokenTransferrer.sol\n","message":"\n┌──────────────────────────────────────────────────────────────────────────────────────────────────┐\n│ Warning: Your code or one of its dependencies uses the 'extcodesize' instruction, which is       │\n│ usually needed in the following cases:                                                           │\n│   1. To detect whether an address belongs to a smart contract.                                   │\n│   2. To detect whether the deploy code execution has finished.                                   │\n│ zkSync Era comes with native account abstraction support (so accounts are smart contracts,       │\n│ including private-key controlled EOAs), and you should avoid differentiating between contracts   │\n│ and non-contract addresses.                                                                      │\n└──────────────────────────────────────────────────────────────────────────────────────────────────┘","severity":"warning","sourceLocation":{"file":"2","start":27185,"end":27203},"type":"Warning"}],"version":"0.8.14","long_version":"0.8.14+commit.80d49f37.Darwin.appleclang","zk_version":"1.3.16","sources":{"contracts/conduit/Conduit.sol":{"id":0,"ast":{"absolutePath":"contracts/conduit/Conduit.sol","exportedSymbols":{"CoreConduit":[295],"LocalConduit":[7]},"id":8,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".13"],"nodeType":"PragmaDirective","src":"32:24:0"},{"absolutePath":"seaport-core/src/conduit/Conduit.sol","file":"seaport-core/src/conduit/Conduit.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":8,"sourceUnit":296,"src":"58:78:0","symbolAliases":[{"foreign":{"id":2,"name":"Conduit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":295,"src":"67:7:0","typeDescriptions":{}},"local":"CoreConduit","nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":5,"name":"CoreConduit","nodeType":"IdentifierPath","referencedDeclaration":295,"src":"835:11:0"},"id":6,"nodeType":"InheritanceSpecifier","src":"835:11:0"}],"canonicalName":"LocalConduit","contractDependencies":[],"contractKind":"contract","documentation":{"id":4,"nodeType":"StructuredDocumentation","src":"138:671:0","text":" @title Conduit\n @author 0age\n @notice This contract serves as an originator for \"proxied\" transfers. Each\n         conduit is deployed and controlled by a \"conduit controller\" that can\n         add and remove \"channels\" or contracts that can instruct the conduit\n         to transfer approved ERC20/721/1155 tokens. *IMPORTANT NOTE: each\n         conduit has an owner that can arbitrarily add or remove channels, and\n         a malicious or negligent owner can add a channel that allows for any\n         approved ERC20/721/1155 tokens to be taken immediately — be extremely\n         cautious with what conduits you give token approvals to!*"},"fullyImplemented":true,"id":7,"linearizedBaseContracts":[7,295,435,633,571],"name":"LocalConduit","nameLocation":"819:12:0","nodeType":"ContractDefinition","nodes":[],"scope":8,"src":"810:39:0","usedErrors":[508,515,518,521,579,582,585,598,613,624,629,632]}],"src":"32:818:0"}},"seaport-core/src/conduit/Conduit.sol":{"id":1,"ast":{"absolutePath":"seaport-core/src/conduit/Conduit.sol","exportedSymbols":{"ChannelClosed_channel_ptr":[447],"ChannelClosed_error_length":[450],"ChannelClosed_error_ptr":[444],"ChannelClosed_error_signature":[441],"ChannelKey_channel_ptr":[453],"ChannelKey_length":[459],"ChannelKey_slot_ptr":[456],"Conduit":[295],"ConduitBatch1155Transfer":[497],"ConduitInterface":[571],"ConduitItemType":[466],"ConduitTransfer":[484],"TokenTransferrer":[435]},"id":296,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":9,"literals":["solidity","^","0.8",".13"],"nodeType":"PragmaDirective","src":"32:24:1"},{"absolutePath":"seaport-types/src/interfaces/ConduitInterface.sol","file":"seaport-types/src/interfaces/ConduitInterface.sol","id":11,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":296,"sourceUnit":572,"src":"58:83:1","symbolAliases":[{"foreign":{"id":10,"name":"ConduitInterface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":571,"src":"66:16:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"seaport-types/src/conduit/lib/ConduitEnums.sol","file":"seaport-types/src/conduit/lib/ConduitEnums.sol","id":13,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":296,"sourceUnit":467,"src":"143:79:1","symbolAliases":[{"foreign":{"id":12,"name":"ConduitItemType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":466,"src":"151:15:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"seaport-core/src/lib/TokenTransferrer.sol","file":"../lib/TokenTransferrer.sol","id":15,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":296,"sourceUnit":436,"src":"224:61:1","symbolAliases":[{"foreign":{"id":14,"name":"TokenTransferrer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":435,"src":"232:16:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"seaport-types/src/conduit/lib/ConduitStructs.sol","file":"seaport-types/src/conduit/lib/ConduitStructs.sol","id":18,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":296,"sourceUnit":498,"src":"287:107:1","symbolAliases":[{"foreign":{"id":16,"name":"ConduitBatch1155Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":497,"src":"295:24:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":17,"name":"ConduitTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":484,"src":"321:15:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"seaport-types/src/conduit/lib/ConduitConstants.sol","file":"seaport-types/src/conduit/lib/ConduitConstants.sol","id":26,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":296,"sourceUnit":460,"src":"396:271:1","symbolAliases":[{"foreign":{"id":19,"name":"ChannelClosed_channel_ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"409:25:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":20,"name":"ChannelClosed_error_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":450,"src":"440:26:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":21,"name":"ChannelClosed_error_ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":444,"src":"472:23:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":22,"name":"ChannelClosed_error_signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":441,"src":"501:29:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":23,"name":"ChannelKey_channel_ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":453,"src":"536:22:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":24,"name":"ChannelKey_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":459,"src":"564:17:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":25,"name":"ChannelKey_slot_ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":456,"src":"587:19:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":28,"name":"ConduitInterface","nodeType":"IdentifierPath","referencedDeclaration":571,"src":"1361:16:1"},"id":29,"nodeType":"InheritanceSpecifier","src":"1361:16:1"},{"baseName":{"id":30,"name":"TokenTransferrer","nodeType":"IdentifierPath","referencedDeclaration":435,"src":"1379:16:1"},"id":31,"nodeType":"InheritanceSpecifier","src":"1379:16:1"}],"canonicalName":"Conduit","contractDependencies":[],"contractKind":"contract","documentation":{"id":27,"nodeType":"StructuredDocumentation","src":"669:671:1","text":" @title Conduit\n @author 0age\n @notice This contract serves as an originator for \"proxied\" transfers. Each\n         conduit is deployed and controlled by a \"conduit controller\" that can\n         add and remove \"channels\" or contracts that can instruct the conduit\n         to transfer approved ERC20/721/1155 tokens. *IMPORTANT NOTE: each\n         conduit has an owner that can arbitrarily add or remove channels, and\n         a malicious or negligent owner can add a channel that allows for any\n         approved ERC20/721/1155 tokens to be taken immediately — be extremely\n         cautious with what conduits you give token approvals to!*"},"fullyImplemented":true,"id":295,"linearizedBaseContracts":[295,435,633,571],"name":"Conduit","nameLocation":"1350:7:1","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":33,"mutability":"immutable","name":"_controller","nameLocation":"1509:11:1","nodeType":"VariableDeclaration","scope":295,"src":"1483:37:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":32,"name":"address","nodeType":"ElementaryTypeName","src":"1483:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"constant":false,"id":37,"mutability":"mutable","name":"_channels","nameLocation":"1601:9:1","nodeType":"VariableDeclaration","scope":295,"src":"1568:42:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":36,"keyType":{"id":34,"name":"address","nodeType":"ElementaryTypeName","src":"1576:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1568:24:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueType":{"id":35,"name":"bool","nodeType":"ElementaryTypeName","src":"1587:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"private"},{"body":{"id":42,"nodeType":"Block","src":"1772:1284:1","statements":[{"AST":{"nodeType":"YulBlock","src":"1863:1130:1","statements":[{"expression":{"arguments":[{"name":"ChannelKey_channel_ptr","nodeType":"YulIdentifier","src":"1934:22:1"},{"arguments":[],"functionName":{"name":"caller","nodeType":"YulIdentifier","src":"1958:6:1"},"nodeType":"YulFunctionCall","src":"1958:8:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1927:6:1"},"nodeType":"YulFunctionCall","src":"1927:40:1"},"nodeType":"YulExpressionStatement","src":"1927:40:1"},{"expression":{"arguments":[{"name":"ChannelKey_slot_ptr","nodeType":"YulIdentifier","src":"2058:19:1"},{"name":"_channels.slot","nodeType":"YulIdentifier","src":"2079:14:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2051:6:1"},"nodeType":"YulFunctionCall","src":"2051:43:1"},"nodeType":"YulExpressionStatement","src":"2051:43:1"},{"body":{"nodeType":"YulBlock","src":"2304:679:1","statements":[{"expression":{"arguments":[{"name":"ChannelClosed_error_ptr","nodeType":"YulIdentifier","src":"2475:23:1"},{"name":"ChannelClosed_error_signature","nodeType":"YulIdentifier","src":"2500:29:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2468:6:1"},"nodeType":"YulFunctionCall","src":"2468:62:1"},"nodeType":"YulExpressionStatement","src":"2468:62:1"},{"expression":{"arguments":[{"name":"ChannelClosed_channel_ptr","nodeType":"YulIdentifier","src":"2612:25:1"},{"arguments":[],"functionName":{"name":"caller","nodeType":"YulIdentifier","src":"2639:6:1"},"nodeType":"YulFunctionCall","src":"2639:8:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2605:6:1"},"nodeType":"YulFunctionCall","src":"2605:43:1"},"nodeType":"YulExpressionStatement","src":"2605:43:1"},{"expression":{"arguments":[{"name":"ChannelClosed_error_ptr","nodeType":"YulIdentifier","src":"2917:23:1"},{"name":"ChannelClosed_error_length","nodeType":"YulIdentifier","src":"2942:26:1"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2910:6:1"},"nodeType":"YulFunctionCall","src":"2910:59:1"},"nodeType":"YulExpressionStatement","src":"2910:59:1"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"ChannelKey_channel_ptr","nodeType":"YulIdentifier","src":"2259:22:1"},{"name":"ChannelKey_length","nodeType":"YulIdentifier","src":"2283:17:1"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"2249:9:1"},"nodeType":"YulFunctionCall","src":"2249:52:1"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"2243:5:1"},"nodeType":"YulFunctionCall","src":"2243:59:1"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2236:6:1"},"nodeType":"YulFunctionCall","src":"2236:67:1"},"nodeType":"YulIf","src":"2233:750:1"}]},"evmVersion":"london","externalReferences":[{"declaration":447,"isOffset":false,"isSlot":false,"src":"2612:25:1","valueSize":1},{"declaration":450,"isOffset":false,"isSlot":false,"src":"2942:26:1","valueSize":1},{"declaration":444,"isOffset":false,"isSlot":false,"src":"2475:23:1","valueSize":1},{"declaration":444,"isOffset":false,"isSlot":false,"src":"2917:23:1","valueSize":1},{"declaration":441,"isOffset":false,"isSlot":false,"src":"2500:29:1","valueSize":1},{"declaration":453,"isOffset":false,"isSlot":false,"src":"1934:22:1","valueSize":1},{"declaration":453,"isOffset":false,"isSlot":false,"src":"2259:22:1","valueSize":1},{"declaration":459,"isOffset":false,"isSlot":false,"src":"2283:17:1","valueSize":1},{"declaration":456,"isOffset":false,"isSlot":false,"src":"2058:19:1","valueSize":1},{"declaration":37,"isOffset":false,"isSlot":true,"src":"2079:14:1","suffix":"slot","valueSize":1}],"id":40,"nodeType":"InlineAssembly","src":"1854:1139:1"},{"id":41,"nodeType":"PlaceholderStatement","src":"3048:1:1"}]},"documentation":{"id":38,"nodeType":"StructuredDocumentation","src":"1617:123:1","text":" @notice Ensure that the caller is currently registered as an open channel\n         on the conduit."},"id":43,"name":"onlyOpenChannel","nameLocation":"1754:15:1","nodeType":"ModifierDefinition","parameters":{"id":39,"nodeType":"ParameterList","parameters":[],"src":"1769:2:1"},"src":"1745:1311:1","virtual":false,"visibility":"internal"},{"body":{"id":52,"nodeType":"Block","src":"3163:88:1","statements":[{"expression":{"id":50,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":47,"name":"_controller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":33,"src":"3220:11:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":48,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3234:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":49,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"3234:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3220:24:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":51,"nodeType":"ExpressionStatement","src":"3220:24:1"}]},"documentation":{"id":44,"nodeType":"StructuredDocumentation","src":"3062:82:1","text":" @notice In the constructor, set the deployer as the controller."},"id":53,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":45,"nodeType":"ParameterList","parameters":[],"src":"3160:2:1"},"returnParameters":{"id":46,"nodeType":"ParameterList","parameters":[],"src":"3163:0:1"},"scope":295,"src":"3149:102:1","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[538],"body":{"id":96,"nodeType":"Block","src":"4153:620:1","statements":[{"assignments":[67],"declarations":[{"constant":false,"id":67,"mutability":"mutable","name":"totalStandardTransfers","nameLocation":"4245:22:1","nodeType":"VariableDeclaration","scope":96,"src":"4237:30:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":66,"name":"uint256","nodeType":"ElementaryTypeName","src":"4237:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":70,"initialValue":{"expression":{"id":68,"name":"transfers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":58,"src":"4270:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ConduitTransfer_$484_calldata_ptr_$dyn_calldata_ptr","typeString":"struct ConduitTransfer calldata[] calldata"}},"id":69,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"4270:16:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4237:49:1"},{"body":{"id":88,"nodeType":"Block","src":"4385:259:1","statements":[{"expression":{"arguments":[{"baseExpression":{"id":79,"name":"transfers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":58,"src":"4484:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ConduitTransfer_$484_calldata_ptr_$dyn_calldata_ptr","typeString":"struct ConduitTransfer calldata[] calldata"}},"id":81,"indexExpression":{"id":80,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":72,"src":"4494:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4484:12:1","typeDescriptions":{"typeIdentifier":"t_struct$_ConduitTransfer_$484_calldata_ptr","typeString":"struct ConduitTransfer calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_ConduitTransfer_$484_calldata_ptr","typeString":"struct ConduitTransfer calldata"}],"id":78,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":294,"src":"4474:9:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_ConduitTransfer_$484_calldata_ptr_$returns$__$","typeString":"function (struct ConduitTransfer calldata)"}},"id":82,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4474:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":83,"nodeType":"ExpressionStatement","src":"4474:23:1"},{"id":87,"nodeType":"UncheckedBlock","src":"4588:46:1","statements":[{"expression":{"id":85,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"4616:3:1","subExpression":{"id":84,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":72,"src":"4618:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":86,"nodeType":"ExpressionStatement","src":"4616:3:1"}]}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":77,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":75,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":72,"src":"4356:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":76,"name":"totalStandardTransfers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67,"src":"4360:22:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4356:26:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":89,"initializationExpression":{"assignments":[72],"declarations":[{"constant":false,"id":72,"mutability":"mutable","name":"i","nameLocation":"4349:1:1","nodeType":"VariableDeclaration","scope":89,"src":"4341:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":71,"name":"uint256","nodeType":"ElementaryTypeName","src":"4341:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":74,"initialValue":{"hexValue":"30","id":73,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4353:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"4341:13:1"},"nodeType":"ForStatement","src":"4336:308:1"},{"expression":{"id":94,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":90,"name":"magicValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":64,"src":"4732:10:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"expression":{"id":91,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4745:4:1","typeDescriptions":{"typeIdentifier":"t_contract$_Conduit_$295","typeString":"contract Conduit"}},"id":92,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"execute","nodeType":"MemberAccess","referencedDeclaration":97,"src":"4745:12:1","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_array$_t_struct$_ConduitTransfer_$484_memory_ptr_$dyn_memory_ptr_$returns$_t_bytes4_$","typeString":"function (struct ConduitTransfer memory[] memory) external returns (bytes4)"}},"id":93,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"4745:21:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"4732:34:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":95,"nodeType":"ExpressionStatement","src":"4732:34:1"}]},"documentation":{"id":54,"nodeType":"StructuredDocumentation","src":"3257:738:1","text":" @notice Execute a sequence of ERC20/721/1155 transfers. Only a caller\n         with an open channel can call this function. Note that channels\n         are expected to implement reentrancy protection if desired, and\n         that cross-channel reentrancy may be possible if the conduit has\n         multiple open channels at once. Also note that channels are\n         expected to implement checks against transferring any zero-amount\n         items if that constraint is desired.\n @param transfers The ERC20/721/1155 transfers to perform.\n @return magicValue A magic value indicating that the transfers were\n                    performed successfully."},"functionSelector":"4ce34aa2","id":97,"implemented":true,"kind":"function","modifiers":[{"id":62,"kind":"modifierInvocation","modifierName":{"id":61,"name":"onlyOpenChannel","nodeType":"IdentifierPath","referencedDeclaration":43,"src":"4097:15:1"},"nodeType":"ModifierInvocation","src":"4097:15:1"}],"name":"execute","nameLocation":"4009:7:1","nodeType":"FunctionDefinition","overrides":{"id":60,"nodeType":"OverrideSpecifier","overrides":[],"src":"4080:8:1"},"parameters":{"id":59,"nodeType":"ParameterList","parameters":[{"constant":false,"id":58,"mutability":"mutable","name":"transfers","nameLocation":"4044:9:1","nodeType":"VariableDeclaration","scope":97,"src":"4017:36:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ConduitTransfer_$484_calldata_ptr_$dyn_calldata_ptr","typeString":"struct ConduitTransfer[]"},"typeName":{"baseType":{"id":56,"nodeType":"UserDefinedTypeName","pathNode":{"id":55,"name":"ConduitTransfer","nodeType":"IdentifierPath","referencedDeclaration":484,"src":"4017:15:1"},"referencedDeclaration":484,"src":"4017:15:1","typeDescriptions":{"typeIdentifier":"t_struct$_ConduitTransfer_$484_storage_ptr","typeString":"struct ConduitTransfer"}},"id":57,"nodeType":"ArrayTypeName","src":"4017:17:1","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ConduitTransfer_$484_storage_$dyn_storage_ptr","typeString":"struct ConduitTransfer[]"}},"visibility":"internal"}],"src":"4016:38:1"},"returnParameters":{"id":65,"nodeType":"ParameterList","parameters":[{"constant":false,"id":64,"mutability":"mutable","name":"magicValue","nameLocation":"4137:10:1","nodeType":"VariableDeclaration","scope":97,"src":"4130:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":63,"name":"bytes4","nodeType":"ElementaryTypeName","src":"4130:6:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"4129:19:1"},"scope":295,"src":"4000:773:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[548],"body":{"id":120,"nodeType":"Block","src":"5710:328:1","statements":[{"expression":{"arguments":[{"id":111,"name":"batchTransfers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":102,"src":"5884:14:1","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ConduitBatch1155Transfer_$497_calldata_ptr_$dyn_calldata_ptr","typeString":"struct ConduitBatch1155Transfer calldata[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_struct$_ConduitBatch1155Transfer_$497_calldata_ptr_$dyn_calldata_ptr","typeString":"struct ConduitBatch1155Transfer calldata[] calldata"}],"id":110,"name":"_performERC1155BatchTransfers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":434,"src":"5854:29:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_array$_t_struct$_ConduitBatch1155Transfer_$497_calldata_ptr_$dyn_calldata_ptr_$returns$__$","typeString":"function (struct ConduitBatch1155Transfer calldata[] calldata)"}},"id":112,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5854:45:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":113,"nodeType":"ExpressionStatement","src":"5854:45:1"},{"expression":{"id":118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":114,"name":"magicValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":108,"src":"5988:10:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"expression":{"id":115,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"6001:4:1","typeDescriptions":{"typeIdentifier":"t_contract$_Conduit_$295","typeString":"contract Conduit"}},"id":116,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"executeBatch1155","nodeType":"MemberAccess","referencedDeclaration":121,"src":"6001:21:1","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_array$_t_struct$_ConduitBatch1155Transfer_$497_memory_ptr_$dyn_memory_ptr_$returns$_t_bytes4_$","typeString":"function (struct ConduitBatch1155Transfer memory[] memory) external returns (bytes4)"}},"id":117,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"6001:30:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"5988:43:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":119,"nodeType":"ExpressionStatement","src":"5988:43:1"}]},"documentation":{"id":98,"nodeType":"StructuredDocumentation","src":"4779:750:1","text":" @notice Execute a sequence of batch 1155 item transfers. Only a caller\n         with an open channel can call this function. Note that channels\n         are expected to implement reentrancy protection if desired, and\n         that cross-channel reentrancy may be possible if the conduit has\n         multiple open channels at once. Also note that channels are\n         expected to implement checks against transferring any zero-amount\n         items if that constraint is desired.\n @param batchTransfers The 1155 batch item transfers to perform.\n @return magicValue A magic value indicating that the item transfers were\n                    performed successfully."},"functionSelector":"8df25d92","id":121,"implemented":true,"kind":"function","modifiers":[{"id":106,"kind":"modifierInvocation","modifierName":{"id":105,"name":"onlyOpenChannel","nodeType":"IdentifierPath","referencedDeclaration":43,"src":"5654:15:1"},"nodeType":"ModifierInvocation","src":"5654:15:1"}],"name":"executeBatch1155","nameLocation":"5543:16:1","nodeType":"FunctionDefinition","overrides":{"id":104,"nodeType":"OverrideSpecifier","overrides":[],"src":"5637:8:1"},"parameters":{"id":103,"nodeType":"ParameterList","parameters":[{"constant":false,"id":102,"mutability":"mutable","name":"batchTransfers","nameLocation":"5596:14:1","nodeType":"VariableDeclaration","scope":121,"src":"5560:50:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ConduitBatch1155Transfer_$497_calldata_ptr_$dyn_calldata_ptr","typeString":"struct ConduitBatch1155Transfer[]"},"typeName":{"baseType":{"id":100,"nodeType":"UserDefinedTypeName","pathNode":{"id":99,"name":"ConduitBatch1155Transfer","nodeType":"IdentifierPath","referencedDeclaration":497,"src":"5560:24:1"},"referencedDeclaration":497,"src":"5560:24:1","typeDescriptions":{"typeIdentifier":"t_struct$_ConduitBatch1155Transfer_$497_storage_ptr","typeString":"struct ConduitBatch1155Transfer"}},"id":101,"nodeType":"ArrayTypeName","src":"5560:26:1","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ConduitBatch1155Transfer_$497_storage_$dyn_storage_ptr","typeString":"struct ConduitBatch1155Transfer[]"}},"visibility":"internal"}],"src":"5559:52:1"},"returnParameters":{"id":109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":108,"mutability":"mutable","name":"magicValue","nameLocation":"5694:10:1","nodeType":"VariableDeclaration","scope":121,"src":"5687:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":107,"name":"bytes4","nodeType":"ElementaryTypeName","src":"5687:6:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"5686:19:1"},"scope":295,"src":"5534:504:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[562],"body":{"id":172,"nodeType":"Block","src":"7171:919:1","statements":[{"assignments":[139],"declarations":[{"constant":false,"id":139,"mutability":"mutable","name":"totalStandardTransfers","nameLocation":"7263:22:1","nodeType":"VariableDeclaration","scope":172,"src":"7255:30:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":138,"name":"uint256","nodeType":"ElementaryTypeName","src":"7255:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":142,"initialValue":{"expression":{"id":140,"name":"standardTransfers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":126,"src":"7288:17:1","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ConduitTransfer_$484_calldata_ptr_$dyn_calldata_ptr","typeString":"struct ConduitTransfer calldata[] calldata"}},"id":141,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"7288:24:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7255:57:1"},{"body":{"id":160,"nodeType":"Block","src":"7420:267:1","statements":[{"expression":{"arguments":[{"baseExpression":{"id":151,"name":"standardTransfers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":126,"src":"7519:17:1","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ConduitTransfer_$484_calldata_ptr_$dyn_calldata_ptr","typeString":"struct ConduitTransfer calldata[] calldata"}},"id":153,"indexExpression":{"id":152,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":144,"src":"7537:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7519:20:1","typeDescriptions":{"typeIdentifier":"t_struct$_ConduitTransfer_$484_calldata_ptr","typeString":"struct ConduitTransfer calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_ConduitTransfer_$484_calldata_ptr","typeString":"struct ConduitTransfer calldata"}],"id":150,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":294,"src":"7509:9:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_ConduitTransfer_$484_calldata_ptr_$returns$__$","typeString":"function (struct ConduitTransfer calldata)"}},"id":154,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7509:31:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":155,"nodeType":"ExpressionStatement","src":"7509:31:1"},{"id":159,"nodeType":"UncheckedBlock","src":"7631:46:1","statements":[{"expression":{"id":157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"7659:3:1","subExpression":{"id":156,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":144,"src":"7661:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":158,"nodeType":"ExpressionStatement","src":"7659:3:1"}]}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":149,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":147,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":144,"src":"7391:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":148,"name":"totalStandardTransfers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":139,"src":"7395:22:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7391:26:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":161,"initializationExpression":{"assignments":[144],"declarations":[{"constant":false,"id":144,"mutability":"mutable","name":"i","nameLocation":"7384:1:1","nodeType":"VariableDeclaration","scope":161,"src":"7376:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":143,"name":"uint256","nodeType":"ElementaryTypeName","src":"7376:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":146,"initialValue":{"hexValue":"30","id":145,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7388:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"7376:13:1"},"nodeType":"ForStatement","src":"7371:316:1"},{"expression":{"arguments":[{"id":163,"name":"batchTransfers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":130,"src":"7932:14:1","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ConduitBatch1155Transfer_$497_calldata_ptr_$dyn_calldata_ptr","typeString":"struct ConduitBatch1155Transfer calldata[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_struct$_ConduitBatch1155Transfer_$497_calldata_ptr_$dyn_calldata_ptr","typeString":"struct ConduitBatch1155Transfer calldata[] calldata"}],"id":162,"name":"_performERC1155BatchTransfers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":434,"src":"7902:29:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_array$_t_struct$_ConduitBatch1155Transfer_$497_calldata_ptr_$dyn_calldata_ptr_$returns$__$","typeString":"function (struct ConduitBatch1155Transfer calldata[] calldata)"}},"id":164,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7902:45:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":165,"nodeType":"ExpressionStatement","src":"7902:45:1"},{"expression":{"id":170,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":166,"name":"magicValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":136,"src":"8036:10:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"expression":{"id":167,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"8049:4:1","typeDescriptions":{"typeIdentifier":"t_contract$_Conduit_$295","typeString":"contract Conduit"}},"id":168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"executeWithBatch1155","nodeType":"MemberAccess","referencedDeclaration":173,"src":"8049:25:1","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_array$_t_struct$_ConduitTransfer_$484_memory_ptr_$dyn_memory_ptr_$_t_array$_t_struct$_ConduitBatch1155Transfer_$497_memory_ptr_$dyn_memory_ptr_$returns$_t_bytes4_$","typeString":"function (struct ConduitTransfer memory[] memory,struct ConduitBatch1155Transfer memory[] memory) external returns (bytes4)"}},"id":169,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"8049:34:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"8036:47:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":171,"nodeType":"ExpressionStatement","src":"8036:47:1"}]},"documentation":{"id":122,"nodeType":"StructuredDocumentation","src":"6044:910:1","text":" @notice Execute a sequence of transfers, both single ERC20/721/1155 item\n         transfers as well as batch 1155 item transfers. Only a caller\n         with an open channel can call this function. Note that channels\n         are expected to implement reentrancy protection if desired, and\n         that cross-channel reentrancy may be possible if the conduit has\n         multiple open channels at once. Also note that channels are\n         expected to implement checks against transferring any zero-amount\n         items if that constraint is desired.\n @param standardTransfers The ERC20/721/1155 item transfers to perform.\n @param batchTransfers    The 1155 batch item transfers to perform.\n @return magicValue A magic value indicating that the item transfers were\n                    performed successfully."},"functionSelector":"899e104c","id":173,"implemented":true,"kind":"function","modifiers":[{"id":134,"kind":"modifierInvocation","modifierName":{"id":133,"name":"onlyOpenChannel","nodeType":"IdentifierPath","referencedDeclaration":43,"src":"7127:15:1"},"nodeType":"ModifierInvocation","src":"7127:15:1"}],"name":"executeWithBatch1155","nameLocation":"6968:20:1","nodeType":"FunctionDefinition","overrides":{"id":132,"nodeType":"OverrideSpecifier","overrides":[],"src":"7118:8:1"},"parameters":{"id":131,"nodeType":"ParameterList","parameters":[{"constant":false,"id":126,"mutability":"mutable","name":"standardTransfers","nameLocation":"7025:17:1","nodeType":"VariableDeclaration","scope":173,"src":"6998:44:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ConduitTransfer_$484_calldata_ptr_$dyn_calldata_ptr","typeString":"struct ConduitTransfer[]"},"typeName":{"baseType":{"id":124,"nodeType":"UserDefinedTypeName","pathNode":{"id":123,"name":"ConduitTransfer","nodeType":"IdentifierPath","referencedDeclaration":484,"src":"6998:15:1"},"referencedDeclaration":484,"src":"6998:15:1","typeDescriptions":{"typeIdentifier":"t_struct$_ConduitTransfer_$484_storage_ptr","typeString":"struct ConduitTransfer"}},"id":125,"nodeType":"ArrayTypeName","src":"6998:17:1","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ConduitTransfer_$484_storage_$dyn_storage_ptr","typeString":"struct ConduitTransfer[]"}},"visibility":"internal"},{"constant":false,"id":130,"mutability":"mutable","name":"batchTransfers","nameLocation":"7088:14:1","nodeType":"VariableDeclaration","scope":173,"src":"7052:50:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ConduitBatch1155Transfer_$497_calldata_ptr_$dyn_calldata_ptr","typeString":"struct ConduitBatch1155Transfer[]"},"typeName":{"baseType":{"id":128,"nodeType":"UserDefinedTypeName","pathNode":{"id":127,"name":"ConduitBatch1155Transfer","nodeType":"IdentifierPath","referencedDeclaration":497,"src":"7052:24:1"},"referencedDeclaration":497,"src":"7052:24:1","typeDescriptions":{"typeIdentifier":"t_struct$_ConduitBatch1155Transfer_$497_storage_ptr","typeString":"struct ConduitBatch1155Transfer"}},"id":129,"nodeType":"ArrayTypeName","src":"7052:26:1","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ConduitBatch1155Transfer_$497_storage_$dyn_storage_ptr","typeString":"struct ConduitBatch1155Transfer[]"}},"visibility":"internal"}],"src":"6988:120:1"},"returnParameters":{"id":137,"nodeType":"ParameterList","parameters":[{"constant":false,"id":136,"mutability":"mutable","name":"magicValue","nameLocation":"7159:10:1","nodeType":"VariableDeclaration","scope":173,"src":"7152:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":135,"name":"bytes4","nodeType":"ElementaryTypeName","src":"7152:6:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"7151:19:1"},"scope":295,"src":"6959:1131:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[570],"body":{"id":214,"nodeType":"Block","src":"8394:532:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":182,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"8478:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":183,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"8478:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":184,"name":"_controller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":33,"src":"8492:11:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8478:25:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":190,"nodeType":"IfStatement","src":"8474:82:1","trueBody":{"id":189,"nodeType":"Block","src":"8505:51:1","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":186,"name":"InvalidController","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":521,"src":"8526:17:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":187,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8526:19:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":188,"nodeType":"RevertStatement","src":"8519:26:1"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":195,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":191,"name":"_channels","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":37,"src":"8649:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":193,"indexExpression":{"id":192,"name":"channel","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":176,"src":"8659:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8649:18:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":194,"name":"isOpen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":178,"src":"8671:6:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8649:28:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":202,"nodeType":"IfStatement","src":"8645:106:1","trueBody":{"id":201,"nodeType":"Block","src":"8679:72:1","statements":[{"errorCall":{"arguments":[{"id":197,"name":"channel","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":176,"src":"8724:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":198,"name":"isOpen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":178,"src":"8733:6:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":196,"name":"ChannelStatusAlreadySet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":515,"src":"8700:23:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_bool_$returns$__$","typeString":"function (address,bool) pure"}},"id":199,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8700:40:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":200,"nodeType":"RevertStatement","src":"8693:47:1"}]}},{"expression":{"id":207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":203,"name":"_channels","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":37,"src":"8806:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":205,"indexExpression":{"id":204,"name":"channel","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":176,"src":"8816:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8806:18:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":206,"name":"isOpen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":178,"src":"8827:6:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8806:27:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":208,"nodeType":"ExpressionStatement","src":"8806:27:1"},{"eventCall":{"arguments":[{"id":210,"name":"channel","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":176,"src":"8903:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":211,"name":"isOpen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":178,"src":"8912:6:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":209,"name":"ChannelUpdated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":528,"src":"8888:14:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_bool_$returns$__$","typeString":"function (address,bool)"}},"id":212,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8888:31:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":213,"nodeType":"EmitStatement","src":"8883:36:1"}]},"documentation":{"id":174,"nodeType":"StructuredDocumentation","src":"8096:222:1","text":" @notice Open or close a given channel. Only callable by the controller.\n @param channel The channel to open or close.\n @param isOpen  The status of the channel (either open or closed)."},"functionSelector":"c4e8fcb5","id":215,"implemented":true,"kind":"function","modifiers":[],"name":"updateChannel","nameLocation":"8332:13:1","nodeType":"FunctionDefinition","overrides":{"id":180,"nodeType":"OverrideSpecifier","overrides":[],"src":"8385:8:1"},"parameters":{"id":179,"nodeType":"ParameterList","parameters":[{"constant":false,"id":176,"mutability":"mutable","name":"channel","nameLocation":"8354:7:1","nodeType":"VariableDeclaration","scope":215,"src":"8346:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":175,"name":"address","nodeType":"ElementaryTypeName","src":"8346:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":178,"mutability":"mutable","name":"isOpen","nameLocation":"8368:6:1","nodeType":"VariableDeclaration","scope":215,"src":"8363:11:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":177,"name":"bool","nodeType":"ElementaryTypeName","src":"8363:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8345:30:1"},"returnParameters":{"id":181,"nodeType":"ParameterList","parameters":[],"src":"8394:0:1"},"scope":295,"src":"8323:603:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":293,"nodeType":"Block","src":"9291:1177:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_ConduitItemType_$466","typeString":"enum ConduitItemType"},"id":226,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":222,"name":"item","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":219,"src":"9381:4:1","typeDescriptions":{"typeIdentifier":"t_struct$_ConduitTransfer_$484_calldata_ptr","typeString":"struct ConduitTransfer calldata"}},"id":223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"itemType","nodeType":"MemberAccess","referencedDeclaration":473,"src":"9381:13:1","typeDescriptions":{"typeIdentifier":"t_enum$_ConduitItemType_$466","typeString":"enum ConduitItemType"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":224,"name":"ConduitItemType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":466,"src":"9398:15:1","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_ConduitItemType_$466_$","typeString":"type(enum ConduitItemType)"}},"id":225,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"ERC20","nodeType":"MemberAccess","referencedDeclaration":463,"src":"9398:21:1","typeDescriptions":{"typeIdentifier":"t_enum$_ConduitItemType_$466","typeString":"enum ConduitItemType"}},"src":"9381:38:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_ConduitItemType_$466","typeString":"enum ConduitItemType"},"id":243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":239,"name":"item","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":219,"src":"9809:4:1","typeDescriptions":{"typeIdentifier":"t_struct$_ConduitTransfer_$484_calldata_ptr","typeString":"struct ConduitTransfer calldata"}},"id":240,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"itemType","nodeType":"MemberAccess","referencedDeclaration":473,"src":"9809:13:1","typeDescriptions":{"typeIdentifier":"t_enum$_ConduitItemType_$466","typeString":"enum ConduitItemType"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":241,"name":"ConduitItemType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":466,"src":"9826:15:1","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_ConduitItemType_$466_$","typeString":"type(enum ConduitItemType)"}},"id":242,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"ERC721","nodeType":"MemberAccess","referencedDeclaration":464,"src":"9826:22:1","typeDescriptions":{"typeIdentifier":"t_enum$_ConduitItemType_$466","typeString":"enum ConduitItemType"}},"src":"9809:39:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_ConduitItemType_$466","typeString":"enum ConduitItemType"},"id":271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":267,"name":"item","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":219,"src":"10180:4:1","typeDescriptions":{"typeIdentifier":"t_struct$_ConduitTransfer_$484_calldata_ptr","typeString":"struct ConduitTransfer calldata"}},"id":268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"itemType","nodeType":"MemberAccess","referencedDeclaration":473,"src":"10180:13:1","typeDescriptions":{"typeIdentifier":"t_enum$_ConduitItemType_$466","typeString":"enum ConduitItemType"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":269,"name":"ConduitItemType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":466,"src":"10197:15:1","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_ConduitItemType_$466_$","typeString":"type(enum ConduitItemType)"}},"id":270,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"ERC1155","nodeType":"MemberAccess","referencedDeclaration":465,"src":"10197:23:1","typeDescriptions":{"typeIdentifier":"t_enum$_ConduitItemType_$466","typeString":"enum ConduitItemType"}},"src":"10180:40:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":289,"nodeType":"Block","src":"10377:85:1","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":286,"name":"InvalidItemType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":518,"src":"10434:15:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":287,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10434:17:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":288,"nodeType":"RevertStatement","src":"10427:24:1"}]},"id":290,"nodeType":"IfStatement","src":"10176:286:1","trueBody":{"id":285,"nodeType":"Block","src":"10222:149:1","statements":[{"expression":{"arguments":[{"expression":{"id":273,"name":"item","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":219,"src":"10299:4:1","typeDescriptions":{"typeIdentifier":"t_struct$_ConduitTransfer_$484_calldata_ptr","typeString":"struct ConduitTransfer calldata"}},"id":274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"token","nodeType":"MemberAccess","referencedDeclaration":475,"src":"10299:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":275,"name":"item","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":219,"src":"10311:4:1","typeDescriptions":{"typeIdentifier":"t_struct$_ConduitTransfer_$484_calldata_ptr","typeString":"struct ConduitTransfer calldata"}},"id":276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"from","nodeType":"MemberAccess","referencedDeclaration":477,"src":"10311:9:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":277,"name":"item","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":219,"src":"10322:4:1","typeDescriptions":{"typeIdentifier":"t_struct$_ConduitTransfer_$484_calldata_ptr","typeString":"struct ConduitTransfer calldata"}},"id":278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"to","nodeType":"MemberAccess","referencedDeclaration":479,"src":"10322:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":279,"name":"item","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":219,"src":"10331:4:1","typeDescriptions":{"typeIdentifier":"t_struct$_ConduitTransfer_$484_calldata_ptr","typeString":"struct ConduitTransfer calldata"}},"id":280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"identifier","nodeType":"MemberAccess","referencedDeclaration":481,"src":"10331:15:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":281,"name":"item","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":219,"src":"10348:4:1","typeDescriptions":{"typeIdentifier":"t_struct$_ConduitTransfer_$484_calldata_ptr","typeString":"struct ConduitTransfer calldata"}},"id":282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":483,"src":"10348:11:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":272,"name":"_performERC1155Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":424,"src":"10275:23:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,address,uint256,uint256)"}},"id":283,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10275:85:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":284,"nodeType":"ExpressionStatement","src":"10275:85:1"}]}},"id":291,"nodeType":"IfStatement","src":"9805:657:1","trueBody":{"id":266,"nodeType":"Block","src":"9850:320:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":244,"name":"item","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":219,"src":"9938:4:1","typeDescriptions":{"typeIdentifier":"t_struct$_ConduitTransfer_$484_calldata_ptr","typeString":"struct ConduitTransfer calldata"}},"id":245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":483,"src":"9938:11:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"31","id":246,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9953:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9938:16:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":254,"nodeType":"IfStatement","src":"9934:102:1","trueBody":{"id":253,"nodeType":"Block","src":"9956:80:1","statements":[{"errorCall":{"arguments":[{"expression":{"id":249,"name":"item","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":219,"src":"10009:4:1","typeDescriptions":{"typeIdentifier":"t_struct$_ConduitTransfer_$484_calldata_ptr","typeString":"struct ConduitTransfer calldata"}},"id":250,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":483,"src":"10009:11:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":248,"name":"InvalidERC721TransferAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":579,"src":"9981:27:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":251,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9981:40:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":252,"nodeType":"RevertStatement","src":"9974:47:1"}]}},{"expression":{"arguments":[{"expression":{"id":256,"name":"item","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":219,"src":"10111:4:1","typeDescriptions":{"typeIdentifier":"t_struct$_ConduitTransfer_$484_calldata_ptr","typeString":"struct ConduitTransfer calldata"}},"id":257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"token","nodeType":"MemberAccess","referencedDeclaration":475,"src":"10111:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":258,"name":"item","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":219,"src":"10123:4:1","typeDescriptions":{"typeIdentifier":"t_struct$_ConduitTransfer_$484_calldata_ptr","typeString":"struct ConduitTransfer calldata"}},"id":259,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"from","nodeType":"MemberAccess","referencedDeclaration":477,"src":"10123:9:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":260,"name":"item","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":219,"src":"10134:4:1","typeDescriptions":{"typeIdentifier":"t_struct$_ConduitTransfer_$484_calldata_ptr","typeString":"struct ConduitTransfer calldata"}},"id":261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"to","nodeType":"MemberAccess","referencedDeclaration":479,"src":"10134:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":262,"name":"item","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":219,"src":"10143:4:1","typeDescriptions":{"typeIdentifier":"t_struct$_ConduitTransfer_$484_calldata_ptr","typeString":"struct ConduitTransfer calldata"}},"id":263,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"identifier","nodeType":"MemberAccess","referencedDeclaration":481,"src":"10143:15:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":255,"name":"_performERC721Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":408,"src":"10088:22:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,address,uint256)"}},"id":264,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10088:71:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":265,"nodeType":"ExpressionStatement","src":"10088:71:1"}]}},"id":292,"nodeType":"IfStatement","src":"9377:1085:1","trueBody":{"id":238,"nodeType":"Block","src":"9421:378:1","statements":[{"expression":{"arguments":[{"expression":{"id":228,"name":"item","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":219,"src":"9744:4:1","typeDescriptions":{"typeIdentifier":"t_struct$_ConduitTransfer_$484_calldata_ptr","typeString":"struct ConduitTransfer calldata"}},"id":229,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"token","nodeType":"MemberAccess","referencedDeclaration":475,"src":"9744:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":230,"name":"item","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":219,"src":"9756:4:1","typeDescriptions":{"typeIdentifier":"t_struct$_ConduitTransfer_$484_calldata_ptr","typeString":"struct ConduitTransfer calldata"}},"id":231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"from","nodeType":"MemberAccess","referencedDeclaration":477,"src":"9756:9:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":232,"name":"item","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":219,"src":"9767:4:1","typeDescriptions":{"typeIdentifier":"t_struct$_ConduitTransfer_$484_calldata_ptr","typeString":"struct ConduitTransfer calldata"}},"id":233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"to","nodeType":"MemberAccess","referencedDeclaration":479,"src":"9767:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":234,"name":"item","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":219,"src":"9776:4:1","typeDescriptions":{"typeIdentifier":"t_struct$_ConduitTransfer_$484_calldata_ptr","typeString":"struct ConduitTransfer calldata"}},"id":235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":483,"src":"9776:11:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":227,"name":"_performERC20Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":394,"src":"9722:21:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,address,uint256)"}},"id":236,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9722:66:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":237,"nodeType":"ExpressionStatement","src":"9722:66:1"}]}}]},"documentation":{"id":216,"nodeType":"StructuredDocumentation","src":"8932:295:1","text":" @dev Internal function to transfer a given ERC20/721/1155 item. Note that\n      channels are expected to implement checks against transferring any\n      zero-amount items if that constraint is desired.\n @param item The ERC20/721/1155 item to transfer."},"id":294,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nameLocation":"9241:9:1","nodeType":"FunctionDefinition","parameters":{"id":220,"nodeType":"ParameterList","parameters":[{"constant":false,"id":219,"mutability":"mutable","name":"item","nameLocation":"9276:4:1","nodeType":"VariableDeclaration","scope":294,"src":"9251:29:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_ConduitTransfer_$484_calldata_ptr","typeString":"struct ConduitTransfer"},"typeName":{"id":218,"nodeType":"UserDefinedTypeName","pathNode":{"id":217,"name":"ConduitTransfer","nodeType":"IdentifierPath","referencedDeclaration":484,"src":"9251:15:1"},"referencedDeclaration":484,"src":"9251:15:1","typeDescriptions":{"typeIdentifier":"t_struct$_ConduitTransfer_$484_storage_ptr","typeString":"struct ConduitTransfer"}},"visibility":"internal"}],"src":"9250:31:1"},"returnParameters":{"id":221,"nodeType":"ParameterList","parameters":[],"src":"9291:0:1"},"scope":295,"src":"9232:1236:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":296,"src":"1341:9129:1","usedErrors":[508,515,518,521,579,582,585,598,613,624,629,632]}],"src":"32:10439:1"}},"seaport-core/src/lib/TokenTransferrer.sol":{"id":2,"ast":{"absolutePath":"seaport-core/src/lib/TokenTransferrer.sol","exportedSymbols":{"BadReturnValueFromERC20OnTransfer_error_amount_ptr":[866],"BadReturnValueFromERC20OnTransfer_error_from_ptr":[860],"BadReturnValueFromERC20OnTransfer_error_length":[869],"BadReturnValueFromERC20OnTransfer_error_selector":[854],"BadReturnValueFromERC20OnTransfer_error_to_ptr":[863],"BadReturnValueFromERC20OnTransfer_error_token_ptr":[857],"BatchTransfer1155Params_amounts_head_ptr":[798],"BatchTransfer1155Params_calldata_baseSize":[807],"BatchTransfer1155Params_data_head_ptr":[801],"BatchTransfer1155Params_data_length_basePtr":[804],"BatchTransfer1155Params_ids_head_ptr":[795],"BatchTransfer1155Params_ids_length_offset":[813],"BatchTransfer1155Params_ids_length_ptr":[810],"BatchTransfer1155Params_ptr":[792],"ConduitBatch1155Transfer":[497],"ConduitBatch1155Transfer_amounts_length_baseOffset":[828],"ConduitBatch1155Transfer_from_offset":[819],"ConduitBatch1155Transfer_ids_head_offset":[822],"ConduitBatch1155Transfer_ids_length_offset":[825],"ConduitBatch1155Transfer_usable_head_size":[816],"ConduitBatchTransfer_amounts_head_offset":[831],"CostPerWord":[786],"DefaultFreeMemoryPointer":[662],"ERC1155BatchTransferGenericFailure_error_signature":[845],"ERC1155BatchTransferGenericFailure_ids_offset":[851],"ERC1155BatchTransferGenericFailure_token_ptr":[848],"ERC1155_safeBatchTransferFrom_signature":[728],"ERC1155_safeTransferFrom_amount_ptr":[712],"ERC1155_safeTransferFrom_data_length_offset":[724],"ERC1155_safeTransferFrom_data_length_ptr":[718],"ERC1155_safeTransferFrom_data_offset_ptr":[715],"ERC1155_safeTransferFrom_from_ptr":[703],"ERC1155_safeTransferFrom_id_ptr":[709],"ERC1155_safeTransferFrom_length":[721],"ERC1155_safeTransferFrom_sig_ptr":[700],"ERC1155_safeTransferFrom_signature":[697],"ERC1155_safeTransferFrom_to_ptr":[706],"ERC20_transferFrom_amount_ptr":[690],"ERC20_transferFrom_from_ptr":[684],"ERC20_transferFrom_length":[693],"ERC20_transferFrom_sig_ptr":[681],"ERC20_transferFrom_signature":[678],"ERC20_transferFrom_to_ptr":[687],"ERC721_transferFrom_from_ptr":[738],"ERC721_transferFrom_id_ptr":[744],"ERC721_transferFrom_length":[747],"ERC721_transferFrom_sig_ptr":[735],"ERC721_transferFrom_signature":[732],"ERC721_transferFrom_to_ptr":[741],"ExtraGasBuffer":[783],"FreeMemoryPointerSlot":[656],"Generic_error_selector_offset":[674],"Invalid1155BatchTransferEncoding_length":[837],"Invalid1155BatchTransferEncoding_ptr":[834],"Invalid1155BatchTransferEncoding_selector":[841],"MemoryExpansionCoefficientShift":[789],"NoContract_error_account_ptr":[753],"NoContract_error_length":[756],"NoContract_error_selector":[750],"OneWord":[641],"OneWordShift":[650],"Slot0x80":[665],"Slot0xA0":[668],"Slot0xC0":[671],"ThirtyOneBytes":[638],"TokenTransferGenericFailure_err_identifier_ptr":[774],"TokenTransferGenericFailure_error_amount_ptr":[777],"TokenTransferGenericFailure_error_from_ptr":[765],"TokenTransferGenericFailure_error_identifier_ptr":[771],"TokenTransferGenericFailure_error_length":[780],"TokenTransferGenericFailure_error_selector":[759],"TokenTransferGenericFailure_error_to_ptr":[768],"TokenTransferGenericFailure_error_token_ptr":[762],"TokenTransferrer":[435],"TokenTransferrerErrors":[633],"TwoWords":[644],"TwoWordsShift":[653],"ZeroSlot":[659]},"id":436,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":297,"literals":["solidity","^","0.8",".13"],"nodeType":"PragmaDirective","src":"32:24:2"},{"absolutePath":"seaport-types/src/lib/TokenTransferrerConstants.sol","file":"seaport-types/src/lib/TokenTransferrerConstants.sol","id":373,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":436,"sourceUnit":870,"src":"58:2961:2","symbolAliases":[{"foreign":{"id":298,"name":"BadReturnValueFromERC20OnTransfer_error_amount_ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":866,"src":"71:50:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":299,"name":"BadReturnValueFromERC20OnTransfer_error_from_ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":860,"src":"127:48:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":300,"name":"BadReturnValueFromERC20OnTransfer_error_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":869,"src":"181:46:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":301,"name":"BadReturnValueFromERC20OnTransfer_error_selector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":854,"src":"233:48:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":302,"name":"BadReturnValueFromERC20OnTransfer_error_to_ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":863,"src":"287:46:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":303,"name":"BadReturnValueFromERC20OnTransfer_error_token_ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":857,"src":"339:49:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":304,"name":"BatchTransfer1155Params_amounts_head_ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":798,"src":"394:40:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":305,"name":"BatchTransfer1155Params_calldata_baseSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":807,"src":"440:41:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":306,"name":"BatchTransfer1155Params_data_head_ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":801,"src":"487:37:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":307,"name":"BatchTransfer1155Params_data_length_basePtr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":804,"src":"530:43:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":308,"name":"BatchTransfer1155Params_ids_head_ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":795,"src":"579:36:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":309,"name":"BatchTransfer1155Params_ids_length_offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":813,"src":"621:41:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":310,"name":"BatchTransfer1155Params_ids_length_ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":810,"src":"668:38:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":311,"name":"BatchTransfer1155Params_ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":792,"src":"712:27:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":312,"name":"ConduitBatch1155Transfer_amounts_length_baseOffset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":828,"src":"745:50:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":313,"name":"ConduitBatch1155Transfer_from_offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":819,"src":"801:36:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":314,"name":"ConduitBatch1155Transfer_ids_head_offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":822,"src":"843:40:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":315,"name":"ConduitBatch1155Transfer_ids_length_offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":825,"src":"889:42:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":316,"name":"ConduitBatch1155Transfer_usable_head_size","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":816,"src":"937:41:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":317,"name":"ConduitBatchTransfer_amounts_head_offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":831,"src":"984:40:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":318,"name":"CostPerWord","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":786,"src":"1030:11:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":319,"name":"DefaultFreeMemoryPointer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":662,"src":"1047:24:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":320,"name":"ERC1155_safeBatchTransferFrom_signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":728,"src":"1077:39:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":321,"name":"ERC1155_safeTransferFrom_amount_ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":712,"src":"1122:35:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":322,"name":"ERC1155_safeTransferFrom_data_length_offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":724,"src":"1163:43:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":323,"name":"ERC1155_safeTransferFrom_data_length_ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":718,"src":"1212:40:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":324,"name":"ERC1155_safeTransferFrom_data_offset_ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":715,"src":"1258:40:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":325,"name":"ERC1155_safeTransferFrom_from_ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":703,"src":"1304:33:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":326,"name":"ERC1155_safeTransferFrom_id_ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":709,"src":"1343:31:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":327,"name":"ERC1155_safeTransferFrom_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":721,"src":"1380:31:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":328,"name":"ERC1155_safeTransferFrom_sig_ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":700,"src":"1417:32:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":329,"name":"ERC1155_safeTransferFrom_signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":697,"src":"1455:34:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":330,"name":"ERC1155_safeTransferFrom_to_ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":706,"src":"1495:31:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":331,"name":"ERC1155BatchTransferGenericFailure_error_signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":845,"src":"1532:50:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":332,"name":"ERC1155BatchTransferGenericFailure_ids_offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":851,"src":"1588:45:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":333,"name":"ERC1155BatchTransferGenericFailure_token_ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":848,"src":"1639:44:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":334,"name":"ERC20_transferFrom_amount_ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":690,"src":"1689:29:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":335,"name":"ERC20_transferFrom_from_ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":684,"src":"1724:27:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":336,"name":"ERC20_transferFrom_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":693,"src":"1757:25:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":337,"name":"ERC20_transferFrom_sig_ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":681,"src":"1788:26:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":338,"name":"ERC20_transferFrom_signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":678,"src":"1820:28:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":339,"name":"ERC20_transferFrom_to_ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":687,"src":"1854:25:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":340,"name":"ERC721_transferFrom_from_ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":738,"src":"1885:28:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":341,"name":"ERC721_transferFrom_id_ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":744,"src":"1919:26:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":342,"name":"ERC721_transferFrom_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":747,"src":"1951:26:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":343,"name":"ERC721_transferFrom_sig_ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":735,"src":"1983:27:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":344,"name":"ERC721_transferFrom_signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":732,"src":"2016:29:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":345,"name":"ERC721_transferFrom_to_ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":741,"src":"2051:26:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":346,"name":"ExtraGasBuffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":783,"src":"2083:14:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":347,"name":"FreeMemoryPointerSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":656,"src":"2103:21:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":348,"name":"Generic_error_selector_offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":674,"src":"2130:29:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":349,"name":"Invalid1155BatchTransferEncoding_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":837,"src":"2165:39:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":350,"name":"Invalid1155BatchTransferEncoding_ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":834,"src":"2210:36:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":351,"name":"Invalid1155BatchTransferEncoding_selector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":841,"src":"2252:41:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":352,"name":"MemoryExpansionCoefficientShift","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":789,"src":"2299:31:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":353,"name":"NoContract_error_account_ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":753,"src":"2336:28:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":354,"name":"NoContract_error_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":756,"src":"2370:23:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":355,"name":"NoContract_error_selector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":750,"src":"2399:25:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":356,"name":"OneWord","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":641,"src":"2430:7:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":357,"name":"OneWordShift","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":650,"src":"2443:12:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":358,"name":"Slot0x80","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":665,"src":"2461:8:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":359,"name":"Slot0xA0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":668,"src":"2475:8:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":360,"name":"Slot0xC0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":671,"src":"2489:8:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":361,"name":"ThirtyOneBytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":638,"src":"2503:14:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":362,"name":"TokenTransferGenericFailure_err_identifier_ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":774,"src":"2523:46:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":363,"name":"TokenTransferGenericFailure_error_amount_ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":777,"src":"2575:44:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":364,"name":"TokenTransferGenericFailure_error_from_ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":765,"src":"2625:42:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":365,"name":"TokenTransferGenericFailure_error_identifier_ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":771,"src":"2673:48:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":366,"name":"TokenTransferGenericFailure_error_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":780,"src":"2727:40:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":367,"name":"TokenTransferGenericFailure_error_selector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":759,"src":"2773:42:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":368,"name":"TokenTransferGenericFailure_error_to_ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":768,"src":"2821:40:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":369,"name":"TokenTransferGenericFailure_error_token_ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":762,"src":"2867:43:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":370,"name":"TwoWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":644,"src":"2916:8:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":371,"name":"TwoWordsShift","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":653,"src":"2930:13:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":372,"name":"ZeroSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":659,"src":"2949:8:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"seaport-types/src/interfaces/TokenTransferrerErrors.sol","file":"seaport-types/src/interfaces/TokenTransferrerErrors.sol","id":375,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":436,"sourceUnit":634,"src":"3021:95:2","symbolAliases":[{"foreign":{"id":374,"name":"TokenTransferrerErrors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"3029:22:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"seaport-types/src/conduit/lib/ConduitStructs.sol","file":"seaport-types/src/conduit/lib/ConduitStructs.sol","id":377,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":436,"sourceUnit":498,"src":"3118:90:2","symbolAliases":[{"foreign":{"id":376,"name":"ConduitBatch1155Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":497,"src":"3126:24:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":379,"name":"TokenTransferrerErrors","nodeType":"IdentifierPath","referencedDeclaration":633,"src":"3801:22:2"},"id":380,"nodeType":"InheritanceSpecifier","src":"3801:22:2"}],"canonicalName":"TokenTransferrer","contractDependencies":[],"contractKind":"contract","documentation":{"id":378,"nodeType":"StructuredDocumentation","src":"3210:561:2","text":" @title TokenTransferrer\n @author 0age\n @custom:coauthor d1ll0n\n @custom:coauthor transmissions11\n @notice TokenTransferrer is a library for performing optimized ERC20, ERC721,\n         ERC1155, and batch ERC1155 transfers, used by both Seaport as well as\n         by conduits deployed by the ConduitController. Use great caution when\n         considering these functions for use in other codebases, as there are\n         significant side effects and edge cases that need to be thoroughly\n         understood and carefully addressed."},"fullyImplemented":true,"id":435,"linearizedBaseContracts":[435,633],"name":"TokenTransferrer","nameLocation":"3781:16:2","nodeType":"ContractDefinition","nodes":[{"body":{"id":393,"nodeType":"Block","src":"4365:8510:2","statements":[{"AST":{"nodeType":"YulBlock","src":"4458:8411:2","statements":[{"nodeType":"YulVariableDeclaration","src":"4632:46:2","value":{"arguments":[{"name":"FreeMemoryPointerSlot","nodeType":"YulIdentifier","src":"4656:21:2"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4650:5:2"},"nodeType":"YulFunctionCall","src":"4650:28:2"},"variables":[{"name":"memPointer","nodeType":"YulTypedName","src":"4636:10:2","type":""}]},{"expression":{"arguments":[{"name":"ERC20_transferFrom_sig_ptr","nodeType":"YulIdentifier","src":"4776:26:2"},{"name":"ERC20_transferFrom_signature","nodeType":"YulIdentifier","src":"4804:28:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4769:6:2"},"nodeType":"YulFunctionCall","src":"4769:64:2"},"nodeType":"YulExpressionStatement","src":"4769:64:2"},{"expression":{"arguments":[{"name":"ERC20_transferFrom_from_ptr","nodeType":"YulIdentifier","src":"4853:27:2"},{"name":"from","nodeType":"YulIdentifier","src":"4882:4:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4846:6:2"},"nodeType":"YulFunctionCall","src":"4846:41:2"},"nodeType":"YulExpressionStatement","src":"4846:41:2"},{"expression":{"arguments":[{"name":"ERC20_transferFrom_to_ptr","nodeType":"YulIdentifier","src":"4907:25:2"},{"name":"to","nodeType":"YulIdentifier","src":"4934:2:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4900:6:2"},"nodeType":"YulFunctionCall","src":"4900:37:2"},"nodeType":"YulExpressionStatement","src":"4900:37:2"},{"expression":{"arguments":[{"name":"ERC20_transferFrom_amount_ptr","nodeType":"YulIdentifier","src":"4957:29:2"},{"name":"amount","nodeType":"YulIdentifier","src":"4988:6:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4950:6:2"},"nodeType":"YulFunctionCall","src":"4950:45:2"},"nodeType":"YulExpressionStatement","src":"4950:45:2"},{"nodeType":"YulVariableDeclaration","src":"5471:106:2","value":{"arguments":[{"arguments":[],"functionName":{"name":"gas","nodeType":"YulIdentifier","src":"5494:3:2"},"nodeType":"YulFunctionCall","src":"5494:5:2"},{"name":"token","nodeType":"YulIdentifier","src":"5501:5:2"},{"kind":"number","nodeType":"YulLiteral","src":"5508:1:2","type":"","value":"0"},{"name":"ERC20_transferFrom_sig_ptr","nodeType":"YulIdentifier","src":"5511:26:2"},{"name":"ERC20_transferFrom_length","nodeType":"YulIdentifier","src":"5539:25:2"},{"kind":"number","nodeType":"YulLiteral","src":"5566:1:2","type":"","value":"0"},{"name":"OneWord","nodeType":"YulIdentifier","src":"5569:7:2"}],"functionName":{"name":"call","nodeType":"YulIdentifier","src":"5489:4:2"},"nodeType":"YulFunctionCall","src":"5489:88:2"},"variables":[{"name":"callStatus","nodeType":"YulTypedName","src":"5475:10:2","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5671:389:2","value":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5950:1:2","type":"","value":"0"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5944:5:2"},"nodeType":"YulFunctionCall","src":"5944:8:2"},{"kind":"number","nodeType":"YulLiteral","src":"5954:1:2","type":"","value":"1"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"5941:2:2"},"nodeType":"YulFunctionCall","src":"5941:15:2"},{"arguments":[{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"5961:14:2"},"nodeType":"YulFunctionCall","src":"5961:16:2"},{"kind":"number","nodeType":"YulLiteral","src":"5979:2:2","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5958:2:2"},"nodeType":"YulFunctionCall","src":"5958:24:2"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5937:3:2"},"nodeType":"YulFunctionCall","src":"5937:46:2"},{"arguments":[{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"5992:14:2"},"nodeType":"YulFunctionCall","src":"5992:16:2"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5985:6:2"},"nodeType":"YulFunctionCall","src":"5985:24:2"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"5934:2:2"},"nodeType":"YulFunctionCall","src":"5934:76:2"},{"name":"callStatus","nodeType":"YulIdentifier","src":"6032:10:2"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5702:3:2"},"nodeType":"YulFunctionCall","src":"5702:358:2"},"variables":[{"name":"success","nodeType":"YulTypedName","src":"5675:7:2","type":""}]},{"body":{"nodeType":"YulBlock","src":"6442:6226:2","statements":[{"body":{"nodeType":"YulBlock","src":"6752:5696:2","statements":[{"body":{"nodeType":"YulBlock","src":"6840:5090:2","statements":[{"body":{"nodeType":"YulBlock","src":"6942:3910:2","statements":[{"body":{"nodeType":"YulBlock","src":"7137:2672:2","statements":[{"nodeType":"YulVariableDeclaration","src":"7549:79:2","value":{"arguments":[{"name":"OneWordShift","nodeType":"YulIdentifier","src":"7576:12:2"},{"arguments":[{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"7594:14:2"},"nodeType":"YulFunctionCall","src":"7594:16:2"},{"name":"ThirtyOneBytes","nodeType":"YulIdentifier","src":"7612:14:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7590:3:2"},"nodeType":"YulFunctionCall","src":"7590:37:2"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7572:3:2"},"nodeType":"YulFunctionCall","src":"7572:56:2"},"variables":[{"name":"returnDataWords","nodeType":"YulTypedName","src":"7553:15:2","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7959:47:2","value":{"arguments":[{"name":"OneWordShift","nodeType":"YulIdentifier","src":"7981:12:2"},{"name":"memPointer","nodeType":"YulIdentifier","src":"7995:10:2"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7977:3:2"},"nodeType":"YulFunctionCall","src":"7977:29:2"},"variables":[{"name":"msizeWords","nodeType":"YulTypedName","src":"7963:10:2","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8121:45:2","value":{"arguments":[{"name":"CostPerWord","nodeType":"YulIdentifier","src":"8137:11:2"},{"name":"returnDataWords","nodeType":"YulIdentifier","src":"8150:15:2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"8133:3:2"},"nodeType":"YulFunctionCall","src":"8133:33:2"},"variables":[{"name":"cost","nodeType":"YulTypedName","src":"8125:4:2","type":""}]},{"body":{"nodeType":"YulBlock","src":"8315:723:2","statements":[{"nodeType":"YulAssignment","src":"8353:651:2","value":{"arguments":[{"name":"cost","nodeType":"YulIdentifier","src":"8450:4:2"},{"arguments":[{"arguments":[{"arguments":[{"name":"returnDataWords","nodeType":"YulIdentifier","src":"8561:15:2"},{"name":"msizeWords","nodeType":"YulIdentifier","src":"8578:10:2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8557:3:2"},"nodeType":"YulFunctionCall","src":"8557:32:2"},{"name":"CostPerWord","nodeType":"YulIdentifier","src":"8591:11:2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"8553:3:2"},"nodeType":"YulFunctionCall","src":"8553:50:2"},{"arguments":[{"name":"MemoryExpansionCoefficientShift","nodeType":"YulIdentifier","src":"8710:31:2"},{"arguments":[{"arguments":[{"name":"returnDataWords","nodeType":"YulIdentifier","src":"8803:15:2"},{"name":"returnDataWords","nodeType":"YulIdentifier","src":"8820:15:2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"8799:3:2"},"nodeType":"YulFunctionCall","src":"8799:37:2"},{"arguments":[{"name":"msizeWords","nodeType":"YulIdentifier","src":"8842:10:2"},{"name":"msizeWords","nodeType":"YulIdentifier","src":"8854:10:2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"8838:3:2"},"nodeType":"YulFunctionCall","src":"8838:27:2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8795:3:2"},"nodeType":"YulFunctionCall","src":"8795:71:2"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"8653:3:2"},"nodeType":"YulFunctionCall","src":"8653:263:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8500:3:2"},"nodeType":"YulFunctionCall","src":"8500:462:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8401:3:2"},"nodeType":"YulFunctionCall","src":"8401:603:2"},"variableNames":[{"name":"cost","nodeType":"YulIdentifier","src":"8353:4:2"}]}]},"condition":{"arguments":[{"name":"returnDataWords","nodeType":"YulIdentifier","src":"8286:15:2"},{"name":"msizeWords","nodeType":"YulIdentifier","src":"8303:10:2"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8283:2:2"},"nodeType":"YulFunctionCall","src":"8283:31:2"},"nodeType":"YulIf","src":"8280:758:2"},{"body":{"nodeType":"YulBlock","src":"9337:442:2","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9522:1:2","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9525:1:2","type":"","value":"0"},{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"9528:14:2"},"nodeType":"YulFunctionCall","src":"9528:16:2"}],"functionName":{"name":"returndatacopy","nodeType":"YulIdentifier","src":"9507:14:2"},"nodeType":"YulFunctionCall","src":"9507:38:2"},"nodeType":"YulExpressionStatement","src":"9507:38:2"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9725:1:2","type":"","value":"0"},{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"9728:14:2"},"nodeType":"YulFunctionCall","src":"9728:16:2"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9718:6:2"},"nodeType":"YulFunctionCall","src":"9718:27:2"},"nodeType":"YulExpressionStatement","src":"9718:27:2"}]},"condition":{"arguments":[{"arguments":[{"name":"cost","nodeType":"YulIdentifier","src":"9307:4:2"},{"name":"ExtraGasBuffer","nodeType":"YulIdentifier","src":"9313:14:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9303:3:2"},"nodeType":"YulFunctionCall","src":"9303:25:2"},{"arguments":[],"functionName":{"name":"gas","nodeType":"YulIdentifier","src":"9330:3:2"},"nodeType":"YulFunctionCall","src":"9330:5:2"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"9300:2:2"},"nodeType":"YulFunctionCall","src":"9300:36:2"},"nodeType":"YulIf","src":"9297:482:2"}]},"condition":{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"7120:14:2"},"nodeType":"YulFunctionCall","src":"7120:16:2"},"nodeType":"YulIf","src":"7117:2692:2"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9927:1:2","type":"","value":"0"},{"name":"TokenTransferGenericFailure_error_selector","nodeType":"YulIdentifier","src":"9930:42:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9920:6:2"},"nodeType":"YulFunctionCall","src":"9920:53:2"},"nodeType":"YulExpressionStatement","src":"9920:53:2"},{"expression":{"arguments":[{"name":"TokenTransferGenericFailure_error_token_ptr","nodeType":"YulIdentifier","src":"10009:43:2"},{"name":"token","nodeType":"YulIdentifier","src":"10054:5:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10002:6:2"},"nodeType":"YulFunctionCall","src":"10002:58:2"},"nodeType":"YulExpressionStatement","src":"10002:58:2"},{"expression":{"arguments":[{"name":"TokenTransferGenericFailure_error_from_ptr","nodeType":"YulIdentifier","src":"10096:42:2"},{"name":"from","nodeType":"YulIdentifier","src":"10140:4:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10089:6:2"},"nodeType":"YulFunctionCall","src":"10089:56:2"},"nodeType":"YulExpressionStatement","src":"10089:56:2"},{"expression":{"arguments":[{"name":"TokenTransferGenericFailure_error_to_ptr","nodeType":"YulIdentifier","src":"10181:40:2"},{"name":"to","nodeType":"YulIdentifier","src":"10223:2:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10174:6:2"},"nodeType":"YulFunctionCall","src":"10174:52:2"},"nodeType":"YulExpressionStatement","src":"10174:52:2"},{"expression":{"arguments":[{"name":"TokenTransferGenericFailure_err_identifier_ptr","nodeType":"YulIdentifier","src":"10262:46:2"},{"kind":"number","nodeType":"YulLiteral","src":"10310:1:2","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10255:6:2"},"nodeType":"YulFunctionCall","src":"10255:57:2"},"nodeType":"YulExpressionStatement","src":"10255:57:2"},{"expression":{"arguments":[{"name":"TokenTransferGenericFailure_error_amount_ptr","nodeType":"YulIdentifier","src":"10348:44:2"},{"name":"amount","nodeType":"YulIdentifier","src":"10394:6:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10341:6:2"},"nodeType":"YulFunctionCall","src":"10341:60:2"},"nodeType":"YulExpressionStatement","src":"10341:60:2"},{"expression":{"arguments":[{"name":"Generic_error_selector_offset","nodeType":"YulIdentifier","src":"10754:29:2"},{"name":"TokenTransferGenericFailure_error_length","nodeType":"YulIdentifier","src":"10785:40:2"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10747:6:2"},"nodeType":"YulFunctionCall","src":"10747:79:2"},"nodeType":"YulExpressionStatement","src":"10747:79:2"}]},"condition":{"arguments":[{"name":"callStatus","nodeType":"YulIdentifier","src":"6930:10:2"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6923:6:2"},"nodeType":"YulFunctionCall","src":"6923:18:2"},"nodeType":"YulIf","src":"6920:3932:2"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11113:1:2","type":"","value":"0"},{"name":"BadReturnValueFromERC20OnTransfer_error_selector","nodeType":"YulIdentifier","src":"11116:48:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11106:6:2"},"nodeType":"YulFunctionCall","src":"11106:59:2"},"nodeType":"YulExpressionStatement","src":"11106:59:2"},{"expression":{"arguments":[{"name":"BadReturnValueFromERC20OnTransfer_error_token_ptr","nodeType":"YulIdentifier","src":"11197:49:2"},{"name":"token","nodeType":"YulIdentifier","src":"11248:5:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11190:6:2"},"nodeType":"YulFunctionCall","src":"11190:64:2"},"nodeType":"YulExpressionStatement","src":"11190:64:2"},{"expression":{"arguments":[{"name":"BadReturnValueFromERC20OnTransfer_error_from_ptr","nodeType":"YulIdentifier","src":"11286:48:2"},{"name":"from","nodeType":"YulIdentifier","src":"11336:4:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11279:6:2"},"nodeType":"YulFunctionCall","src":"11279:62:2"},"nodeType":"YulExpressionStatement","src":"11279:62:2"},{"expression":{"arguments":[{"name":"BadReturnValueFromERC20OnTransfer_error_to_ptr","nodeType":"YulIdentifier","src":"11373:46:2"},{"name":"to","nodeType":"YulIdentifier","src":"11421:2:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11366:6:2"},"nodeType":"YulFunctionCall","src":"11366:58:2"},"nodeType":"YulExpressionStatement","src":"11366:58:2"},{"expression":{"arguments":[{"name":"BadReturnValueFromERC20OnTransfer_error_amount_ptr","nodeType":"YulIdentifier","src":"11456:50:2"},{"name":"amount","nodeType":"YulIdentifier","src":"11508:6:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11449:6:2"},"nodeType":"YulFunctionCall","src":"11449:66:2"},"nodeType":"YulExpressionStatement","src":"11449:66:2"},{"expression":{"arguments":[{"name":"Generic_error_selector_offset","nodeType":"YulIdentifier","src":"11830:29:2"},{"name":"BadReturnValueFromERC20OnTransfer_error_length","nodeType":"YulIdentifier","src":"11861:46:2"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11823:6:2"},"nodeType":"YulFunctionCall","src":"11823:85:2"},"nodeType":"YulExpressionStatement","src":"11823:85:2"}]},"condition":{"arguments":[{"name":"success","nodeType":"YulIdentifier","src":"6831:7:2"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6824:6:2"},"nodeType":"YulFunctionCall","src":"6824:15:2"},"nodeType":"YulIf","src":"6821:5109:2"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12113:1:2","type":"","value":"0"},{"name":"NoContract_error_selector","nodeType":"YulIdentifier","src":"12116:25:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12106:6:2"},"nodeType":"YulFunctionCall","src":"12106:36:2"},"nodeType":"YulExpressionStatement","src":"12106:36:2"},{"expression":{"arguments":[{"name":"NoContract_error_account_ptr","nodeType":"YulIdentifier","src":"12170:28:2"},{"name":"token","nodeType":"YulIdentifier","src":"12200:5:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12163:6:2"},"nodeType":"YulFunctionCall","src":"12163:43:2"},"nodeType":"YulExpressionStatement","src":"12163:43:2"},{"expression":{"arguments":[{"name":"Generic_error_selector_offset","nodeType":"YulIdentifier","src":"12375:29:2"},{"name":"NoContract_error_length","nodeType":"YulIdentifier","src":"12406:23:2"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12368:6:2"},"nodeType":"YulFunctionCall","src":"12368:62:2"},"nodeType":"YulExpressionStatement","src":"12368:62:2"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"token","nodeType":"YulIdentifier","src":"6732:5:2"}],"functionName":{"name":"extcodesize","nodeType":"YulIdentifier","src":"6720:11:2"},"nodeType":"YulFunctionCall","src":"6720:18:2"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6713:6:2"},"nodeType":"YulFunctionCall","src":"6713:26:2"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6706:6:2"},"nodeType":"YulFunctionCall","src":"6706:34:2"},{"name":"success","nodeType":"YulIdentifier","src":"6742:7:2"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6702:3:2"},"nodeType":"YulFunctionCall","src":"6702:48:2"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6695:6:2"},"nodeType":"YulFunctionCall","src":"6695:56:2"},"nodeType":"YulIf","src":"6692:5756:2"}]},"condition":{"arguments":[{"arguments":[{"name":"success","nodeType":"YulIdentifier","src":"6398:7:2"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"6421:14:2"},"nodeType":"YulFunctionCall","src":"6421:16:2"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6414:6:2"},"nodeType":"YulFunctionCall","src":"6414:24:2"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6407:6:2"},"nodeType":"YulFunctionCall","src":"6407:32:2"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6394:3:2"},"nodeType":"YulFunctionCall","src":"6394:46:2"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6387:6:2"},"nodeType":"YulFunctionCall","src":"6387:54:2"},"nodeType":"YulIf","src":"6384:6284:2"},{"expression":{"arguments":[{"name":"FreeMemoryPointerSlot","nodeType":"YulIdentifier","src":"12746:21:2"},{"name":"memPointer","nodeType":"YulIdentifier","src":"12769:10:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12739:6:2"},"nodeType":"YulFunctionCall","src":"12739:41:2"},"nodeType":"YulExpressionStatement","src":"12739:41:2"},{"expression":{"arguments":[{"name":"ZeroSlot","nodeType":"YulIdentifier","src":"12847:8:2"},{"kind":"number","nodeType":"YulLiteral","src":"12857:1:2","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12840:6:2"},"nodeType":"YulFunctionCall","src":"12840:19:2"},"nodeType":"YulExpressionStatement","src":"12840:19:2"}]},"evmVersion":"london","externalReferences":[{"declaration":866,"isOffset":false,"isSlot":false,"src":"11456:50:2","valueSize":1},{"declaration":860,"isOffset":false,"isSlot":false,"src":"11286:48:2","valueSize":1},{"declaration":869,"isOffset":false,"isSlot":false,"src":"11861:46:2","valueSize":1},{"declaration":854,"isOffset":false,"isSlot":false,"src":"11116:48:2","valueSize":1},{"declaration":863,"isOffset":false,"isSlot":false,"src":"11373:46:2","valueSize":1},{"declaration":857,"isOffset":false,"isSlot":false,"src":"11197:49:2","valueSize":1},{"declaration":786,"isOffset":false,"isSlot":false,"src":"8137:11:2","valueSize":1},{"declaration":786,"isOffset":false,"isSlot":false,"src":"8591:11:2","valueSize":1},{"declaration":690,"isOffset":false,"isSlot":false,"src":"4957:29:2","valueSize":1},{"declaration":684,"isOffset":false,"isSlot":false,"src":"4853:27:2","valueSize":1},{"declaration":693,"isOffset":false,"isSlot":false,"src":"5539:25:2","valueSize":1},{"declaration":681,"isOffset":false,"isSlot":false,"src":"4776:26:2","valueSize":1},{"declaration":681,"isOffset":false,"isSlot":false,"src":"5511:26:2","valueSize":1},{"declaration":678,"isOffset":false,"isSlot":false,"src":"4804:28:2","valueSize":1},{"declaration":687,"isOffset":false,"isSlot":false,"src":"4907:25:2","valueSize":1},{"declaration":783,"isOffset":false,"isSlot":false,"src":"9313:14:2","valueSize":1},{"declaration":656,"isOffset":false,"isSlot":false,"src":"12746:21:2","valueSize":1},{"declaration":656,"isOffset":false,"isSlot":false,"src":"4656:21:2","valueSize":1},{"declaration":674,"isOffset":false,"isSlot":false,"src":"10754:29:2","valueSize":1},{"declaration":674,"isOffset":false,"isSlot":false,"src":"11830:29:2","valueSize":1},{"declaration":674,"isOffset":false,"isSlot":false,"src":"12375:29:2","valueSize":1},{"declaration":789,"isOffset":false,"isSlot":false,"src":"8710:31:2","valueSize":1},{"declaration":753,"isOffset":false,"isSlot":false,"src":"12170:28:2","valueSize":1},{"declaration":756,"isOffset":false,"isSlot":false,"src":"12406:23:2","valueSize":1},{"declaration":750,"isOffset":false,"isSlot":false,"src":"12116:25:2","valueSize":1},{"declaration":641,"isOffset":false,"isSlot":false,"src":"5569:7:2","valueSize":1},{"declaration":650,"isOffset":false,"isSlot":false,"src":"7576:12:2","valueSize":1},{"declaration":650,"isOffset":false,"isSlot":false,"src":"7981:12:2","valueSize":1},{"declaration":638,"isOffset":false,"isSlot":false,"src":"7612:14:2","valueSize":1},{"declaration":774,"isOffset":false,"isSlot":false,"src":"10262:46:2","valueSize":1},{"declaration":777,"isOffset":false,"isSlot":false,"src":"10348:44:2","valueSize":1},{"declaration":765,"isOffset":false,"isSlot":false,"src":"10096:42:2","valueSize":1},{"declaration":780,"isOffset":false,"isSlot":false,"src":"10785:40:2","valueSize":1},{"declaration":759,"isOffset":false,"isSlot":false,"src":"9930:42:2","valueSize":1},{"declaration":768,"isOffset":false,"isSlot":false,"src":"10181:40:2","valueSize":1},{"declaration":762,"isOffset":false,"isSlot":false,"src":"10009:43:2","valueSize":1},{"declaration":659,"isOffset":false,"isSlot":false,"src":"12847:8:2","valueSize":1},{"declaration":389,"isOffset":false,"isSlot":false,"src":"10394:6:2","valueSize":1},{"declaration":389,"isOffset":false,"isSlot":false,"src":"11508:6:2","valueSize":1},{"declaration":389,"isOffset":false,"isSlot":false,"src":"4988:6:2","valueSize":1},{"declaration":385,"isOffset":false,"isSlot":false,"src":"10140:4:2","valueSize":1},{"declaration":385,"isOffset":false,"isSlot":false,"src":"11336:4:2","valueSize":1},{"declaration":385,"isOffset":false,"isSlot":false,"src":"4882:4:2","valueSize":1},{"declaration":387,"isOffset":false,"isSlot":false,"src":"10223:2:2","valueSize":1},{"declaration":387,"isOffset":false,"isSlot":false,"src":"11421:2:2","valueSize":1},{"declaration":387,"isOffset":false,"isSlot":false,"src":"4934:2:2","valueSize":1},{"declaration":383,"isOffset":false,"isSlot":false,"src":"10054:5:2","valueSize":1},{"declaration":383,"isOffset":false,"isSlot":false,"src":"11248:5:2","valueSize":1},{"declaration":383,"isOffset":false,"isSlot":false,"src":"12200:5:2","valueSize":1},{"declaration":383,"isOffset":false,"isSlot":false,"src":"5501:5:2","valueSize":1},{"declaration":383,"isOffset":false,"isSlot":false,"src":"6732:5:2","valueSize":1}],"id":392,"nodeType":"InlineAssembly","src":"4449:8420:2"}]},"documentation":{"id":381,"nodeType":"StructuredDocumentation","src":"3830:433:2","text":" @dev Internal function to transfer ERC20 tokens from a given originator\n      to a given recipient. Sufficient approvals must be set on the\n      contract performing the transfer.\n @param token      The ERC20 token to transfer.\n @param from       The originator of the transfer.\n @param to         The recipient of the transfer.\n @param amount     The amount to transfer."},"id":394,"implemented":true,"kind":"function","modifiers":[],"name":"_performERC20Transfer","nameLocation":"4277:21:2","nodeType":"FunctionDefinition","parameters":{"id":390,"nodeType":"ParameterList","parameters":[{"constant":false,"id":383,"mutability":"mutable","name":"token","nameLocation":"4307:5:2","nodeType":"VariableDeclaration","scope":394,"src":"4299:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":382,"name":"address","nodeType":"ElementaryTypeName","src":"4299:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":385,"mutability":"mutable","name":"from","nameLocation":"4322:4:2","nodeType":"VariableDeclaration","scope":394,"src":"4314:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":384,"name":"address","nodeType":"ElementaryTypeName","src":"4314:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":387,"mutability":"mutable","name":"to","nameLocation":"4336:2:2","nodeType":"VariableDeclaration","scope":394,"src":"4328:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":386,"name":"address","nodeType":"ElementaryTypeName","src":"4328:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":389,"mutability":"mutable","name":"amount","nameLocation":"4348:6:2","nodeType":"VariableDeclaration","scope":394,"src":"4340:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":388,"name":"uint256","nodeType":"ElementaryTypeName","src":"4340:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4298:57:2"},"returnParameters":{"id":391,"nodeType":"ParameterList","parameters":[],"src":"4365:0:2"},"scope":435,"src":"4268:8607:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":407,"nodeType":"Block","src":"13581:4801:2","statements":[{"AST":{"nodeType":"YulBlock","src":"13675:4701:2","statements":[{"body":{"nodeType":"YulBlock","src":"13768:415:2","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13873:1:2","type":"","value":"0"},{"name":"NoContract_error_selector","nodeType":"YulIdentifier","src":"13876:25:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13866:6:2"},"nodeType":"YulFunctionCall","src":"13866:36:2"},"nodeType":"YulExpressionStatement","src":"13866:36:2"},{"expression":{"arguments":[{"name":"NoContract_error_account_ptr","nodeType":"YulIdentifier","src":"13926:28:2"},{"name":"token","nodeType":"YulIdentifier","src":"13956:5:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13919:6:2"},"nodeType":"YulFunctionCall","src":"13919:43:2"},"nodeType":"YulExpressionStatement","src":"13919:43:2"},{"expression":{"arguments":[{"name":"Generic_error_selector_offset","nodeType":"YulIdentifier","src":"14114:29:2"},{"name":"NoContract_error_length","nodeType":"YulIdentifier","src":"14145:23:2"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14107:6:2"},"nodeType":"YulFunctionCall","src":"14107:62:2"},"nodeType":"YulExpressionStatement","src":"14107:62:2"}]},"condition":{"arguments":[{"arguments":[{"name":"token","nodeType":"YulIdentifier","src":"13760:5:2"}],"functionName":{"name":"extcodesize","nodeType":"YulIdentifier","src":"13748:11:2"},"nodeType":"YulFunctionCall","src":"13748:18:2"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"13741:6:2"},"nodeType":"YulFunctionCall","src":"13741:26:2"},"nodeType":"YulIf","src":"13738:445:2"},{"nodeType":"YulVariableDeclaration","src":"14357:46:2","value":{"arguments":[{"name":"FreeMemoryPointerSlot","nodeType":"YulIdentifier","src":"14381:21:2"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14375:5:2"},"nodeType":"YulFunctionCall","src":"14375:28:2"},"variables":[{"name":"memPointer","nodeType":"YulTypedName","src":"14361:10:2","type":""}]},{"expression":{"arguments":[{"name":"ERC721_transferFrom_sig_ptr","nodeType":"YulIdentifier","src":"14498:27:2"},{"name":"ERC721_transferFrom_signature","nodeType":"YulIdentifier","src":"14527:29:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14491:6:2"},"nodeType":"YulFunctionCall","src":"14491:66:2"},"nodeType":"YulExpressionStatement","src":"14491:66:2"},{"expression":{"arguments":[{"name":"ERC721_transferFrom_from_ptr","nodeType":"YulIdentifier","src":"14577:28:2"},{"name":"from","nodeType":"YulIdentifier","src":"14607:4:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14570:6:2"},"nodeType":"YulFunctionCall","src":"14570:42:2"},"nodeType":"YulExpressionStatement","src":"14570:42:2"},{"expression":{"arguments":[{"name":"ERC721_transferFrom_to_ptr","nodeType":"YulIdentifier","src":"14632:26:2"},{"name":"to","nodeType":"YulIdentifier","src":"14660:2:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14625:6:2"},"nodeType":"YulFunctionCall","src":"14625:38:2"},"nodeType":"YulExpressionStatement","src":"14625:38:2"},{"expression":{"arguments":[{"name":"ERC721_transferFrom_id_ptr","nodeType":"YulIdentifier","src":"14683:26:2"},{"name":"identifier","nodeType":"YulIdentifier","src":"14711:10:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14676:6:2"},"nodeType":"YulFunctionCall","src":"14676:46:2"},"nodeType":"YulExpressionStatement","src":"14676:46:2"},{"nodeType":"YulVariableDeclaration","src":"14791:99:2","value":{"arguments":[{"arguments":[],"functionName":{"name":"gas","nodeType":"YulIdentifier","src":"14811:3:2"},"nodeType":"YulFunctionCall","src":"14811:5:2"},{"name":"token","nodeType":"YulIdentifier","src":"14818:5:2"},{"kind":"number","nodeType":"YulLiteral","src":"14825:1:2","type":"","value":"0"},{"name":"ERC721_transferFrom_sig_ptr","nodeType":"YulIdentifier","src":"14828:27:2"},{"name":"ERC721_transferFrom_length","nodeType":"YulIdentifier","src":"14857:26:2"},{"kind":"number","nodeType":"YulLiteral","src":"14885:1:2","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14888:1:2","type":"","value":"0"}],"functionName":{"name":"call","nodeType":"YulIdentifier","src":"14806:4:2"},"nodeType":"YulFunctionCall","src":"14806:84:2"},"variables":[{"name":"success","nodeType":"YulTypedName","src":"14795:7:2","type":""}]},{"body":{"nodeType":"YulBlock","src":"14964:3211:2","statements":[{"body":{"nodeType":"YulBlock","src":"15123:2094:2","statements":[{"nodeType":"YulVariableDeclaration","src":"15434:79:2","value":{"arguments":[{"name":"OneWordShift","nodeType":"YulIdentifier","src":"15461:12:2"},{"arguments":[{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"15479:14:2"},"nodeType":"YulFunctionCall","src":"15479:16:2"},{"name":"ThirtyOneBytes","nodeType":"YulIdentifier","src":"15497:14:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15475:3:2"},"nodeType":"YulFunctionCall","src":"15475:37:2"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"15457:3:2"},"nodeType":"YulFunctionCall","src":"15457:56:2"},"variables":[{"name":"returnDataWords","nodeType":"YulTypedName","src":"15438:15:2","type":""}]},{"nodeType":"YulVariableDeclaration","src":"15761:47:2","value":{"arguments":[{"name":"OneWordShift","nodeType":"YulIdentifier","src":"15783:12:2"},{"name":"memPointer","nodeType":"YulIdentifier","src":"15797:10:2"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"15779:3:2"},"nodeType":"YulFunctionCall","src":"15779:29:2"},"variables":[{"name":"msizeWords","nodeType":"YulTypedName","src":"15765:10:2","type":""}]},{"nodeType":"YulVariableDeclaration","src":"15899:45:2","value":{"arguments":[{"name":"CostPerWord","nodeType":"YulIdentifier","src":"15915:11:2"},{"name":"returnDataWords","nodeType":"YulIdentifier","src":"15928:15:2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"15911:3:2"},"nodeType":"YulFunctionCall","src":"15911:33:2"},"variables":[{"name":"cost","nodeType":"YulTypedName","src":"15903:4:2","type":""}]},{"body":{"nodeType":"YulBlock","src":"16069:579:2","statements":[{"nodeType":"YulAssignment","src":"16095:531:2","value":{"arguments":[{"name":"cost","nodeType":"YulIdentifier","src":"16168:4:2"},{"arguments":[{"arguments":[{"arguments":[{"name":"returnDataWords","nodeType":"YulIdentifier","src":"16255:15:2"},{"name":"msizeWords","nodeType":"YulIdentifier","src":"16272:10:2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16251:3:2"},"nodeType":"YulFunctionCall","src":"16251:32:2"},{"name":"CostPerWord","nodeType":"YulIdentifier","src":"16285:11:2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"16247:3:2"},"nodeType":"YulFunctionCall","src":"16247:50:2"},{"arguments":[{"name":"MemoryExpansionCoefficientShift","nodeType":"YulIdentifier","src":"16380:31:2"},{"arguments":[{"arguments":[{"name":"returnDataWords","nodeType":"YulIdentifier","src":"16461:15:2"},{"name":"returnDataWords","nodeType":"YulIdentifier","src":"16478:15:2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"16457:3:2"},"nodeType":"YulFunctionCall","src":"16457:37:2"},{"arguments":[{"name":"msizeWords","nodeType":"YulIdentifier","src":"16500:10:2"},{"name":"msizeWords","nodeType":"YulIdentifier","src":"16512:10:2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"16496:3:2"},"nodeType":"YulFunctionCall","src":"16496:27:2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16453:3:2"},"nodeType":"YulFunctionCall","src":"16453:71:2"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"16335:3:2"},"nodeType":"YulFunctionCall","src":"16335:227:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16206:3:2"},"nodeType":"YulFunctionCall","src":"16206:390:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16131:3:2"},"nodeType":"YulFunctionCall","src":"16131:495:2"},"variableNames":[{"name":"cost","nodeType":"YulIdentifier","src":"16095:4:2"}]}]},"condition":{"arguments":[{"name":"returnDataWords","nodeType":"YulIdentifier","src":"16040:15:2"},{"name":"msizeWords","nodeType":"YulIdentifier","src":"16057:10:2"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"16037:2:2"},"nodeType":"YulFunctionCall","src":"16037:31:2"},"nodeType":"YulIf","src":"16034:614:2"},{"body":{"nodeType":"YulBlock","src":"16899:300:2","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17021:1:2","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"17024:1:2","type":"","value":"0"},{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"17027:14:2"},"nodeType":"YulFunctionCall","src":"17027:16:2"}],"functionName":{"name":"returndatacopy","nodeType":"YulIdentifier","src":"17006:14:2"},"nodeType":"YulFunctionCall","src":"17006:38:2"},"nodeType":"YulExpressionStatement","src":"17006:38:2"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17157:1:2","type":"","value":"0"},{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"17160:14:2"},"nodeType":"YulFunctionCall","src":"17160:16:2"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"17150:6:2"},"nodeType":"YulFunctionCall","src":"17150:27:2"},"nodeType":"YulExpressionStatement","src":"17150:27:2"}]},"condition":{"arguments":[{"arguments":[{"name":"cost","nodeType":"YulIdentifier","src":"16869:4:2"},{"name":"ExtraGasBuffer","nodeType":"YulIdentifier","src":"16875:14:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16865:3:2"},"nodeType":"YulFunctionCall","src":"16865:25:2"},{"arguments":[],"functionName":{"name":"gas","nodeType":"YulIdentifier","src":"16892:3:2"},"nodeType":"YulFunctionCall","src":"16892:5:2"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"16862:2:2"},"nodeType":"YulFunctionCall","src":"16862:36:2"},"nodeType":"YulIf","src":"16859:340:2"}]},"condition":{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"15106:14:2"},"nodeType":"YulFunctionCall","src":"15106:16:2"},"nodeType":"YulIf","src":"15103:2114:2"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17388:1:2","type":"","value":"0"},{"name":"TokenTransferGenericFailure_error_selector","nodeType":"YulIdentifier","src":"17391:42:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17381:6:2"},"nodeType":"YulFunctionCall","src":"17381:53:2"},"nodeType":"YulExpressionStatement","src":"17381:53:2"},{"expression":{"arguments":[{"name":"TokenTransferGenericFailure_error_token_ptr","nodeType":"YulIdentifier","src":"17458:43:2"},{"name":"token","nodeType":"YulIdentifier","src":"17503:5:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17451:6:2"},"nodeType":"YulFunctionCall","src":"17451:58:2"},"nodeType":"YulExpressionStatement","src":"17451:58:2"},{"expression":{"arguments":[{"name":"TokenTransferGenericFailure_error_from_ptr","nodeType":"YulIdentifier","src":"17533:42:2"},{"name":"from","nodeType":"YulIdentifier","src":"17577:4:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17526:6:2"},"nodeType":"YulFunctionCall","src":"17526:56:2"},"nodeType":"YulExpressionStatement","src":"17526:56:2"},{"expression":{"arguments":[{"name":"TokenTransferGenericFailure_error_to_ptr","nodeType":"YulIdentifier","src":"17606:40:2"},{"name":"to","nodeType":"YulIdentifier","src":"17648:2:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17599:6:2"},"nodeType":"YulFunctionCall","src":"17599:52:2"},"nodeType":"YulExpressionStatement","src":"17599:52:2"},{"expression":{"arguments":[{"name":"TokenTransferGenericFailure_error_identifier_ptr","nodeType":"YulIdentifier","src":"17675:48:2"},{"name":"identifier","nodeType":"YulIdentifier","src":"17725:10:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17668:6:2"},"nodeType":"YulFunctionCall","src":"17668:68:2"},"nodeType":"YulExpressionStatement","src":"17668:68:2"},{"expression":{"arguments":[{"name":"TokenTransferGenericFailure_error_amount_ptr","nodeType":"YulIdentifier","src":"17760:44:2"},{"kind":"number","nodeType":"YulLiteral","src":"17806:1:2","type":"","value":"1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17753:6:2"},"nodeType":"YulFunctionCall","src":"17753:55:2"},"nodeType":"YulExpressionStatement","src":"17753:55:2"},{"expression":{"arguments":[{"name":"Generic_error_selector_offset","nodeType":"YulIdentifier","src":"18089:29:2"},{"name":"TokenTransferGenericFailure_error_length","nodeType":"YulIdentifier","src":"18120:40:2"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"18082:6:2"},"nodeType":"YulFunctionCall","src":"18082:79:2"},"nodeType":"YulExpressionStatement","src":"18082:79:2"}]},"condition":{"arguments":[{"name":"success","nodeType":"YulIdentifier","src":"14955:7:2"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"14948:6:2"},"nodeType":"YulFunctionCall","src":"14948:15:2"},"nodeType":"YulIf","src":"14945:3230:2"},{"expression":{"arguments":[{"name":"FreeMemoryPointerSlot","nodeType":"YulIdentifier","src":"18253:21:2"},{"name":"memPointer","nodeType":"YulIdentifier","src":"18276:10:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18246:6:2"},"nodeType":"YulFunctionCall","src":"18246:41:2"},"nodeType":"YulExpressionStatement","src":"18246:41:2"},{"expression":{"arguments":[{"name":"ZeroSlot","nodeType":"YulIdentifier","src":"18354:8:2"},{"kind":"number","nodeType":"YulLiteral","src":"18364:1:2","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18347:6:2"},"nodeType":"YulFunctionCall","src":"18347:19:2"},"nodeType":"YulExpressionStatement","src":"18347:19:2"}]},"evmVersion":"london","externalReferences":[{"declaration":786,"isOffset":false,"isSlot":false,"src":"15915:11:2","valueSize":1},{"declaration":786,"isOffset":false,"isSlot":false,"src":"16285:11:2","valueSize":1},{"declaration":738,"isOffset":false,"isSlot":false,"src":"14577:28:2","valueSize":1},{"declaration":744,"isOffset":false,"isSlot":false,"src":"14683:26:2","valueSize":1},{"declaration":747,"isOffset":false,"isSlot":false,"src":"14857:26:2","valueSize":1},{"declaration":735,"isOffset":false,"isSlot":false,"src":"14498:27:2","valueSize":1},{"declaration":735,"isOffset":false,"isSlot":false,"src":"14828:27:2","valueSize":1},{"declaration":732,"isOffset":false,"isSlot":false,"src":"14527:29:2","valueSize":1},{"declaration":741,"isOffset":false,"isSlot":false,"src":"14632:26:2","valueSize":1},{"declaration":783,"isOffset":false,"isSlot":false,"src":"16875:14:2","valueSize":1},{"declaration":656,"isOffset":false,"isSlot":false,"src":"14381:21:2","valueSize":1},{"declaration":656,"isOffset":false,"isSlot":false,"src":"18253:21:2","valueSize":1},{"declaration":674,"isOffset":false,"isSlot":false,"src":"14114:29:2","valueSize":1},{"declaration":674,"isOffset":false,"isSlot":false,"src":"18089:29:2","valueSize":1},{"declaration":789,"isOffset":false,"isSlot":false,"src":"16380:31:2","valueSize":1},{"declaration":753,"isOffset":false,"isSlot":false,"src":"13926:28:2","valueSize":1},{"declaration":756,"isOffset":false,"isSlot":false,"src":"14145:23:2","valueSize":1},{"declaration":750,"isOffset":false,"isSlot":false,"src":"13876:25:2","valueSize":1},{"declaration":650,"isOffset":false,"isSlot":false,"src":"15461:12:2","valueSize":1},{"declaration":650,"isOffset":false,"isSlot":false,"src":"15783:12:2","valueSize":1},{"declaration":638,"isOffset":false,"isSlot":false,"src":"15497:14:2","valueSize":1},{"declaration":777,"isOffset":false,"isSlot":false,"src":"17760:44:2","valueSize":1},{"declaration":765,"isOffset":false,"isSlot":false,"src":"17533:42:2","valueSize":1},{"declaration":771,"isOffset":false,"isSlot":false,"src":"17675:48:2","valueSize":1},{"declaration":780,"isOffset":false,"isSlot":false,"src":"18120:40:2","valueSize":1},{"declaration":759,"isOffset":false,"isSlot":false,"src":"17391:42:2","valueSize":1},{"declaration":768,"isOffset":false,"isSlot":false,"src":"17606:40:2","valueSize":1},{"declaration":762,"isOffset":false,"isSlot":false,"src":"17458:43:2","valueSize":1},{"declaration":659,"isOffset":false,"isSlot":false,"src":"18354:8:2","valueSize":1},{"declaration":399,"isOffset":false,"isSlot":false,"src":"14607:4:2","valueSize":1},{"declaration":399,"isOffset":false,"isSlot":false,"src":"17577:4:2","valueSize":1},{"declaration":403,"isOffset":false,"isSlot":false,"src":"14711:10:2","valueSize":1},{"declaration":403,"isOffset":false,"isSlot":false,"src":"17725:10:2","valueSize":1},{"declaration":401,"isOffset":false,"isSlot":false,"src":"14660:2:2","valueSize":1},{"declaration":401,"isOffset":false,"isSlot":false,"src":"17648:2:2","valueSize":1},{"declaration":397,"isOffset":false,"isSlot":false,"src":"13760:5:2","valueSize":1},{"declaration":397,"isOffset":false,"isSlot":false,"src":"13956:5:2","valueSize":1},{"declaration":397,"isOffset":false,"isSlot":false,"src":"14818:5:2","valueSize":1},{"declaration":397,"isOffset":false,"isSlot":false,"src":"17503:5:2","valueSize":1}],"id":406,"nodeType":"InlineAssembly","src":"13666:4710:2"}]},"documentation":{"id":395,"nodeType":"StructuredDocumentation","src":"12881:593:2","text":" @dev Internal function to transfer an ERC721 token from a given\n      originator to a given recipient. Sufficient approvals must be set on\n      the contract performing the transfer. Note that this function does\n      not check whether the receiver can accept the ERC721 token (i.e. it\n      does not use `safeTransferFrom`).\n @param token      The ERC721 token to transfer.\n @param from       The originator of the transfer.\n @param to         The recipient of the transfer.\n @param identifier The tokenId to transfer."},"id":408,"implemented":true,"kind":"function","modifiers":[],"name":"_performERC721Transfer","nameLocation":"13488:22:2","nodeType":"FunctionDefinition","parameters":{"id":404,"nodeType":"ParameterList","parameters":[{"constant":false,"id":397,"mutability":"mutable","name":"token","nameLocation":"13519:5:2","nodeType":"VariableDeclaration","scope":408,"src":"13511:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":396,"name":"address","nodeType":"ElementaryTypeName","src":"13511:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":399,"mutability":"mutable","name":"from","nameLocation":"13534:4:2","nodeType":"VariableDeclaration","scope":408,"src":"13526:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":398,"name":"address","nodeType":"ElementaryTypeName","src":"13526:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":401,"mutability":"mutable","name":"to","nameLocation":"13548:2:2","nodeType":"VariableDeclaration","scope":408,"src":"13540:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":400,"name":"address","nodeType":"ElementaryTypeName","src":"13540:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":403,"mutability":"mutable","name":"identifier","nameLocation":"13560:10:2","nodeType":"VariableDeclaration","scope":408,"src":"13552:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":402,"name":"uint256","nodeType":"ElementaryTypeName","src":"13552:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13510:61:2"},"returnParameters":{"id":405,"nodeType":"ParameterList","parameters":[],"src":"13581:0:2"},"scope":435,"src":"13479:4903:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":423,"nodeType":"Block","src":"19161:5407:2","statements":[{"AST":{"nodeType":"YulBlock","src":"19256:5306:2","statements":[{"body":{"nodeType":"YulBlock","src":"19349:415:2","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19454:1:2","type":"","value":"0"},{"name":"NoContract_error_selector","nodeType":"YulIdentifier","src":"19457:25:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19447:6:2"},"nodeType":"YulFunctionCall","src":"19447:36:2"},"nodeType":"YulExpressionStatement","src":"19447:36:2"},{"expression":{"arguments":[{"name":"NoContract_error_account_ptr","nodeType":"YulIdentifier","src":"19507:28:2"},{"name":"token","nodeType":"YulIdentifier","src":"19537:5:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19500:6:2"},"nodeType":"YulFunctionCall","src":"19500:43:2"},"nodeType":"YulExpressionStatement","src":"19500:43:2"},{"expression":{"arguments":[{"name":"Generic_error_selector_offset","nodeType":"YulIdentifier","src":"19695:29:2"},{"name":"NoContract_error_length","nodeType":"YulIdentifier","src":"19726:23:2"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"19688:6:2"},"nodeType":"YulFunctionCall","src":"19688:62:2"},"nodeType":"YulExpressionStatement","src":"19688:62:2"}]},"condition":{"arguments":[{"arguments":[{"name":"token","nodeType":"YulIdentifier","src":"19341:5:2"}],"functionName":{"name":"extcodesize","nodeType":"YulIdentifier","src":"19329:11:2"},"nodeType":"YulFunctionCall","src":"19329:18:2"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"19322:6:2"},"nodeType":"YulFunctionCall","src":"19322:26:2"},"nodeType":"YulIf","src":"19319:445:2"},{"nodeType":"YulVariableDeclaration","src":"19932:46:2","value":{"arguments":[{"name":"FreeMemoryPointerSlot","nodeType":"YulIdentifier","src":"19956:21:2"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"19950:5:2"},"nodeType":"YulFunctionCall","src":"19950:28:2"},"variables":[{"name":"memPointer","nodeType":"YulTypedName","src":"19936:10:2","type":""}]},{"nodeType":"YulVariableDeclaration","src":"19991:31:2","value":{"arguments":[{"name":"Slot0x80","nodeType":"YulIdentifier","src":"20013:8:2"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"20007:5:2"},"nodeType":"YulFunctionCall","src":"20007:15:2"},"variables":[{"name":"slot0x80","nodeType":"YulTypedName","src":"19995:8:2","type":""}]},{"nodeType":"YulVariableDeclaration","src":"20035:31:2","value":{"arguments":[{"name":"Slot0xA0","nodeType":"YulIdentifier","src":"20057:8:2"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"20051:5:2"},"nodeType":"YulFunctionCall","src":"20051:15:2"},"variables":[{"name":"slot0xA0","nodeType":"YulTypedName","src":"20039:8:2","type":""}]},{"nodeType":"YulVariableDeclaration","src":"20079:31:2","value":{"arguments":[{"name":"Slot0xC0","nodeType":"YulIdentifier","src":"20101:8:2"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"20095:5:2"},"nodeType":"YulFunctionCall","src":"20095:15:2"},"variables":[{"name":"slot0xC0","nodeType":"YulTypedName","src":"20083:8:2","type":""}]},{"expression":{"arguments":[{"name":"ERC1155_safeTransferFrom_sig_ptr","nodeType":"YulIdentifier","src":"20209:32:2"},{"name":"ERC1155_safeTransferFrom_signature","nodeType":"YulIdentifier","src":"20243:34:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20202:6:2"},"nodeType":"YulFunctionCall","src":"20202:76:2"},"nodeType":"YulExpressionStatement","src":"20202:76:2"},{"expression":{"arguments":[{"name":"ERC1155_safeTransferFrom_from_ptr","nodeType":"YulIdentifier","src":"20298:33:2"},{"name":"from","nodeType":"YulIdentifier","src":"20333:4:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20291:6:2"},"nodeType":"YulFunctionCall","src":"20291:47:2"},"nodeType":"YulExpressionStatement","src":"20291:47:2"},{"expression":{"arguments":[{"name":"ERC1155_safeTransferFrom_to_ptr","nodeType":"YulIdentifier","src":"20358:31:2"},{"name":"to","nodeType":"YulIdentifier","src":"20391:2:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20351:6:2"},"nodeType":"YulFunctionCall","src":"20351:43:2"},"nodeType":"YulExpressionStatement","src":"20351:43:2"},{"expression":{"arguments":[{"name":"ERC1155_safeTransferFrom_id_ptr","nodeType":"YulIdentifier","src":"20414:31:2"},{"name":"identifier","nodeType":"YulIdentifier","src":"20447:10:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20407:6:2"},"nodeType":"YulFunctionCall","src":"20407:51:2"},"nodeType":"YulExpressionStatement","src":"20407:51:2"},{"expression":{"arguments":[{"name":"ERC1155_safeTransferFrom_amount_ptr","nodeType":"YulIdentifier","src":"20478:35:2"},{"name":"amount","nodeType":"YulIdentifier","src":"20515:6:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20471:6:2"},"nodeType":"YulFunctionCall","src":"20471:51:2"},"nodeType":"YulExpressionStatement","src":"20471:51:2"},{"expression":{"arguments":[{"name":"ERC1155_safeTransferFrom_data_offset_ptr","nodeType":"YulIdentifier","src":"20542:40:2"},{"name":"ERC1155_safeTransferFrom_data_length_offset","nodeType":"YulIdentifier","src":"20584:43:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20535:6:2"},"nodeType":"YulFunctionCall","src":"20535:93:2"},"nodeType":"YulExpressionStatement","src":"20535:93:2"},{"expression":{"arguments":[{"name":"ERC1155_safeTransferFrom_data_length_ptr","nodeType":"YulIdentifier","src":"20648:40:2"},{"kind":"number","nodeType":"YulLiteral","src":"20690:1:2","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20641:6:2"},"nodeType":"YulFunctionCall","src":"20641:51:2"},"nodeType":"YulExpressionStatement","src":"20641:51:2"},{"nodeType":"YulVariableDeclaration","src":"20761:125:2","value":{"arguments":[{"arguments":[],"functionName":{"name":"gas","nodeType":"YulIdentifier","src":"20797:3:2"},"nodeType":"YulFunctionCall","src":"20797:5:2"},{"name":"token","nodeType":"YulIdentifier","src":"20804:5:2"},{"kind":"number","nodeType":"YulLiteral","src":"20811:1:2","type":"","value":"0"},{"name":"ERC1155_safeTransferFrom_sig_ptr","nodeType":"YulIdentifier","src":"20814:32:2"},{"name":"ERC1155_safeTransferFrom_length","nodeType":"YulIdentifier","src":"20848:31:2"},{"kind":"number","nodeType":"YulLiteral","src":"20881:1:2","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"20884:1:2","type":"","value":"0"}],"functionName":{"name":"call","nodeType":"YulIdentifier","src":"20792:4:2"},"nodeType":"YulFunctionCall","src":"20792:94:2"},"variables":[{"name":"success","nodeType":"YulTypedName","src":"20765:7:2","type":""}]},{"body":{"nodeType":"YulBlock","src":"20960:3217:2","statements":[{"body":{"nodeType":"YulBlock","src":"21119:2094:2","statements":[{"nodeType":"YulVariableDeclaration","src":"21430:79:2","value":{"arguments":[{"name":"OneWordShift","nodeType":"YulIdentifier","src":"21457:12:2"},{"arguments":[{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"21475:14:2"},"nodeType":"YulFunctionCall","src":"21475:16:2"},{"name":"ThirtyOneBytes","nodeType":"YulIdentifier","src":"21493:14:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21471:3:2"},"nodeType":"YulFunctionCall","src":"21471:37:2"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"21453:3:2"},"nodeType":"YulFunctionCall","src":"21453:56:2"},"variables":[{"name":"returnDataWords","nodeType":"YulTypedName","src":"21434:15:2","type":""}]},{"nodeType":"YulVariableDeclaration","src":"21757:47:2","value":{"arguments":[{"name":"OneWordShift","nodeType":"YulIdentifier","src":"21779:12:2"},{"name":"memPointer","nodeType":"YulIdentifier","src":"21793:10:2"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"21775:3:2"},"nodeType":"YulFunctionCall","src":"21775:29:2"},"variables":[{"name":"msizeWords","nodeType":"YulTypedName","src":"21761:10:2","type":""}]},{"nodeType":"YulVariableDeclaration","src":"21895:45:2","value":{"arguments":[{"name":"CostPerWord","nodeType":"YulIdentifier","src":"21911:11:2"},{"name":"returnDataWords","nodeType":"YulIdentifier","src":"21924:15:2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"21907:3:2"},"nodeType":"YulFunctionCall","src":"21907:33:2"},"variables":[{"name":"cost","nodeType":"YulTypedName","src":"21899:4:2","type":""}]},{"body":{"nodeType":"YulBlock","src":"22065:579:2","statements":[{"nodeType":"YulAssignment","src":"22091:531:2","value":{"arguments":[{"name":"cost","nodeType":"YulIdentifier","src":"22164:4:2"},{"arguments":[{"arguments":[{"arguments":[{"name":"returnDataWords","nodeType":"YulIdentifier","src":"22251:15:2"},{"name":"msizeWords","nodeType":"YulIdentifier","src":"22268:10:2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22247:3:2"},"nodeType":"YulFunctionCall","src":"22247:32:2"},{"name":"CostPerWord","nodeType":"YulIdentifier","src":"22281:11:2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"22243:3:2"},"nodeType":"YulFunctionCall","src":"22243:50:2"},{"arguments":[{"name":"MemoryExpansionCoefficientShift","nodeType":"YulIdentifier","src":"22376:31:2"},{"arguments":[{"arguments":[{"name":"returnDataWords","nodeType":"YulIdentifier","src":"22457:15:2"},{"name":"returnDataWords","nodeType":"YulIdentifier","src":"22474:15:2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"22453:3:2"},"nodeType":"YulFunctionCall","src":"22453:37:2"},{"arguments":[{"name":"msizeWords","nodeType":"YulIdentifier","src":"22496:10:2"},{"name":"msizeWords","nodeType":"YulIdentifier","src":"22508:10:2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"22492:3:2"},"nodeType":"YulFunctionCall","src":"22492:27:2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22449:3:2"},"nodeType":"YulFunctionCall","src":"22449:71:2"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"22331:3:2"},"nodeType":"YulFunctionCall","src":"22331:227:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22202:3:2"},"nodeType":"YulFunctionCall","src":"22202:390:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22127:3:2"},"nodeType":"YulFunctionCall","src":"22127:495:2"},"variableNames":[{"name":"cost","nodeType":"YulIdentifier","src":"22091:4:2"}]}]},"condition":{"arguments":[{"name":"returnDataWords","nodeType":"YulIdentifier","src":"22036:15:2"},{"name":"msizeWords","nodeType":"YulIdentifier","src":"22053:10:2"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"22033:2:2"},"nodeType":"YulFunctionCall","src":"22033:31:2"},"nodeType":"YulIf","src":"22030:614:2"},{"body":{"nodeType":"YulBlock","src":"22895:300:2","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23017:1:2","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"23020:1:2","type":"","value":"0"},{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"23023:14:2"},"nodeType":"YulFunctionCall","src":"23023:16:2"}],"functionName":{"name":"returndatacopy","nodeType":"YulIdentifier","src":"23002:14:2"},"nodeType":"YulFunctionCall","src":"23002:38:2"},"nodeType":"YulExpressionStatement","src":"23002:38:2"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23153:1:2","type":"","value":"0"},{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"23156:14:2"},"nodeType":"YulFunctionCall","src":"23156:16:2"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"23146:6:2"},"nodeType":"YulFunctionCall","src":"23146:27:2"},"nodeType":"YulExpressionStatement","src":"23146:27:2"}]},"condition":{"arguments":[{"arguments":[{"name":"cost","nodeType":"YulIdentifier","src":"22865:4:2"},{"name":"ExtraGasBuffer","nodeType":"YulIdentifier","src":"22871:14:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22861:3:2"},"nodeType":"YulFunctionCall","src":"22861:25:2"},{"arguments":[],"functionName":{"name":"gas","nodeType":"YulIdentifier","src":"22888:3:2"},"nodeType":"YulFunctionCall","src":"22888:5:2"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"22858:2:2"},"nodeType":"YulFunctionCall","src":"22858:36:2"},"nodeType":"YulIf","src":"22855:340:2"}]},"condition":{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"21102:14:2"},"nodeType":"YulFunctionCall","src":"21102:16:2"},"nodeType":"YulIf","src":"21099:2114:2"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23385:1:2","type":"","value":"0"},{"name":"TokenTransferGenericFailure_error_selector","nodeType":"YulIdentifier","src":"23388:42:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23378:6:2"},"nodeType":"YulFunctionCall","src":"23378:53:2"},"nodeType":"YulExpressionStatement","src":"23378:53:2"},{"expression":{"arguments":[{"name":"TokenTransferGenericFailure_error_token_ptr","nodeType":"YulIdentifier","src":"23455:43:2"},{"name":"token","nodeType":"YulIdentifier","src":"23500:5:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23448:6:2"},"nodeType":"YulFunctionCall","src":"23448:58:2"},"nodeType":"YulExpressionStatement","src":"23448:58:2"},{"expression":{"arguments":[{"name":"TokenTransferGenericFailure_error_from_ptr","nodeType":"YulIdentifier","src":"23530:42:2"},{"name":"from","nodeType":"YulIdentifier","src":"23574:4:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23523:6:2"},"nodeType":"YulFunctionCall","src":"23523:56:2"},"nodeType":"YulExpressionStatement","src":"23523:56:2"},{"expression":{"arguments":[{"name":"TokenTransferGenericFailure_error_to_ptr","nodeType":"YulIdentifier","src":"23603:40:2"},{"name":"to","nodeType":"YulIdentifier","src":"23645:2:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23596:6:2"},"nodeType":"YulFunctionCall","src":"23596:52:2"},"nodeType":"YulExpressionStatement","src":"23596:52:2"},{"expression":{"arguments":[{"name":"TokenTransferGenericFailure_error_identifier_ptr","nodeType":"YulIdentifier","src":"23672:48:2"},{"name":"identifier","nodeType":"YulIdentifier","src":"23722:10:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23665:6:2"},"nodeType":"YulFunctionCall","src":"23665:68:2"},"nodeType":"YulExpressionStatement","src":"23665:68:2"},{"expression":{"arguments":[{"name":"TokenTransferGenericFailure_error_amount_ptr","nodeType":"YulIdentifier","src":"23757:44:2"},{"name":"amount","nodeType":"YulIdentifier","src":"23803:6:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23750:6:2"},"nodeType":"YulFunctionCall","src":"23750:60:2"},"nodeType":"YulExpressionStatement","src":"23750:60:2"},{"expression":{"arguments":[{"name":"Generic_error_selector_offset","nodeType":"YulIdentifier","src":"24091:29:2"},{"name":"TokenTransferGenericFailure_error_length","nodeType":"YulIdentifier","src":"24122:40:2"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"24084:6:2"},"nodeType":"YulFunctionCall","src":"24084:79:2"},"nodeType":"YulExpressionStatement","src":"24084:79:2"}]},"condition":{"arguments":[{"name":"success","nodeType":"YulIdentifier","src":"20951:7:2"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"20944:6:2"},"nodeType":"YulFunctionCall","src":"20944:15:2"},"nodeType":"YulIf","src":"20941:3236:2"},{"expression":{"arguments":[{"name":"Slot0x80","nodeType":"YulIdentifier","src":"24198:8:2"},{"name":"slot0x80","nodeType":"YulIdentifier","src":"24208:8:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24191:6:2"},"nodeType":"YulFunctionCall","src":"24191:26:2"},"nodeType":"YulExpressionStatement","src":"24191:26:2"},{"expression":{"arguments":[{"name":"Slot0xA0","nodeType":"YulIdentifier","src":"24259:8:2"},{"name":"slot0xA0","nodeType":"YulIdentifier","src":"24269:8:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24252:6:2"},"nodeType":"YulFunctionCall","src":"24252:26:2"},"nodeType":"YulExpressionStatement","src":"24252:26:2"},{"expression":{"arguments":[{"name":"Slot0xC0","nodeType":"YulIdentifier","src":"24320:8:2"},{"name":"slot0xC0","nodeType":"YulIdentifier","src":"24330:8:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24313:6:2"},"nodeType":"YulFunctionCall","src":"24313:26:2"},"nodeType":"YulExpressionStatement","src":"24313:26:2"},{"expression":{"arguments":[{"name":"FreeMemoryPointerSlot","nodeType":"YulIdentifier","src":"24439:21:2"},{"name":"memPointer","nodeType":"YulIdentifier","src":"24462:10:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24432:6:2"},"nodeType":"YulFunctionCall","src":"24432:41:2"},"nodeType":"YulExpressionStatement","src":"24432:41:2"},{"expression":{"arguments":[{"name":"ZeroSlot","nodeType":"YulIdentifier","src":"24540:8:2"},{"kind":"number","nodeType":"YulLiteral","src":"24550:1:2","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24533:6:2"},"nodeType":"YulFunctionCall","src":"24533:19:2"},"nodeType":"YulExpressionStatement","src":"24533:19:2"}]},"evmVersion":"london","externalReferences":[{"declaration":786,"isOffset":false,"isSlot":false,"src":"21911:11:2","valueSize":1},{"declaration":786,"isOffset":false,"isSlot":false,"src":"22281:11:2","valueSize":1},{"declaration":712,"isOffset":false,"isSlot":false,"src":"20478:35:2","valueSize":1},{"declaration":724,"isOffset":false,"isSlot":false,"src":"20584:43:2","valueSize":1},{"declaration":718,"isOffset":false,"isSlot":false,"src":"20648:40:2","valueSize":1},{"declaration":715,"isOffset":false,"isSlot":false,"src":"20542:40:2","valueSize":1},{"declaration":703,"isOffset":false,"isSlot":false,"src":"20298:33:2","valueSize":1},{"declaration":709,"isOffset":false,"isSlot":false,"src":"20414:31:2","valueSize":1},{"declaration":721,"isOffset":false,"isSlot":false,"src":"20848:31:2","valueSize":1},{"declaration":700,"isOffset":false,"isSlot":false,"src":"20209:32:2","valueSize":1},{"declaration":700,"isOffset":false,"isSlot":false,"src":"20814:32:2","valueSize":1},{"declaration":697,"isOffset":false,"isSlot":false,"src":"20243:34:2","valueSize":1},{"declaration":706,"isOffset":false,"isSlot":false,"src":"20358:31:2","valueSize":1},{"declaration":783,"isOffset":false,"isSlot":false,"src":"22871:14:2","valueSize":1},{"declaration":656,"isOffset":false,"isSlot":false,"src":"19956:21:2","valueSize":1},{"declaration":656,"isOffset":false,"isSlot":false,"src":"24439:21:2","valueSize":1},{"declaration":674,"isOffset":false,"isSlot":false,"src":"19695:29:2","valueSize":1},{"declaration":674,"isOffset":false,"isSlot":false,"src":"24091:29:2","valueSize":1},{"declaration":789,"isOffset":false,"isSlot":false,"src":"22376:31:2","valueSize":1},{"declaration":753,"isOffset":false,"isSlot":false,"src":"19507:28:2","valueSize":1},{"declaration":756,"isOffset":false,"isSlot":false,"src":"19726:23:2","valueSize":1},{"declaration":750,"isOffset":false,"isSlot":false,"src":"19457:25:2","valueSize":1},{"declaration":650,"isOffset":false,"isSlot":false,"src":"21457:12:2","valueSize":1},{"declaration":650,"isOffset":false,"isSlot":false,"src":"21779:12:2","valueSize":1},{"declaration":665,"isOffset":false,"isSlot":false,"src":"20013:8:2","valueSize":1},{"declaration":665,"isOffset":false,"isSlot":false,"src":"24198:8:2","valueSize":1},{"declaration":668,"isOffset":false,"isSlot":false,"src":"20057:8:2","valueSize":1},{"declaration":668,"isOffset":false,"isSlot":false,"src":"24259:8:2","valueSize":1},{"declaration":671,"isOffset":false,"isSlot":false,"src":"20101:8:2","valueSize":1},{"declaration":671,"isOffset":false,"isSlot":false,"src":"24320:8:2","valueSize":1},{"declaration":638,"isOffset":false,"isSlot":false,"src":"21493:14:2","valueSize":1},{"declaration":777,"isOffset":false,"isSlot":false,"src":"23757:44:2","valueSize":1},{"declaration":765,"isOffset":false,"isSlot":false,"src":"23530:42:2","valueSize":1},{"declaration":771,"isOffset":false,"isSlot":false,"src":"23672:48:2","valueSize":1},{"declaration":780,"isOffset":false,"isSlot":false,"src":"24122:40:2","valueSize":1},{"declaration":759,"isOffset":false,"isSlot":false,"src":"23388:42:2","valueSize":1},{"declaration":768,"isOffset":false,"isSlot":false,"src":"23603:40:2","valueSize":1},{"declaration":762,"isOffset":false,"isSlot":false,"src":"23455:43:2","valueSize":1},{"declaration":659,"isOffset":false,"isSlot":false,"src":"24540:8:2","valueSize":1},{"declaration":419,"isOffset":false,"isSlot":false,"src":"20515:6:2","valueSize":1},{"declaration":419,"isOffset":false,"isSlot":false,"src":"23803:6:2","valueSize":1},{"declaration":413,"isOffset":false,"isSlot":false,"src":"20333:4:2","valueSize":1},{"declaration":413,"isOffset":false,"isSlot":false,"src":"23574:4:2","valueSize":1},{"declaration":417,"isOffset":false,"isSlot":false,"src":"20447:10:2","valueSize":1},{"declaration":417,"isOffset":false,"isSlot":false,"src":"23722:10:2","valueSize":1},{"declaration":415,"isOffset":false,"isSlot":false,"src":"20391:2:2","valueSize":1},{"declaration":415,"isOffset":false,"isSlot":false,"src":"23645:2:2","valueSize":1},{"declaration":411,"isOffset":false,"isSlot":false,"src":"19341:5:2","valueSize":1},{"declaration":411,"isOffset":false,"isSlot":false,"src":"19537:5:2","valueSize":1},{"declaration":411,"isOffset":false,"isSlot":false,"src":"20804:5:2","valueSize":1},{"declaration":411,"isOffset":false,"isSlot":false,"src":"23500:5:2","valueSize":1}],"id":422,"nodeType":"InlineAssembly","src":"19247:5315:2"}]},"documentation":{"id":409,"nodeType":"StructuredDocumentation","src":"18388:637:2","text":" @dev Internal function to transfer ERC1155 tokens from a given\n      originator to a given recipient. Sufficient approvals must be set on\n      the contract performing the transfer and contract recipients must\n      implement the ERC1155TokenReceiver interface to indicate that they\n      are willing to accept the transfer.\n @param token      The ERC1155 token to transfer.\n @param from       The originator of the transfer.\n @param to         The recipient of the transfer.\n @param identifier The id to transfer.\n @param amount     The amount to transfer."},"id":424,"implemented":true,"kind":"function","modifiers":[],"name":"_performERC1155Transfer","nameLocation":"19039:23:2","nodeType":"FunctionDefinition","parameters":{"id":420,"nodeType":"ParameterList","parameters":[{"constant":false,"id":411,"mutability":"mutable","name":"token","nameLocation":"19071:5:2","nodeType":"VariableDeclaration","scope":424,"src":"19063:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":410,"name":"address","nodeType":"ElementaryTypeName","src":"19063:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":413,"mutability":"mutable","name":"from","nameLocation":"19086:4:2","nodeType":"VariableDeclaration","scope":424,"src":"19078:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":412,"name":"address","nodeType":"ElementaryTypeName","src":"19078:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":415,"mutability":"mutable","name":"to","nameLocation":"19100:2:2","nodeType":"VariableDeclaration","scope":424,"src":"19092:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":414,"name":"address","nodeType":"ElementaryTypeName","src":"19092:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":417,"mutability":"mutable","name":"identifier","nameLocation":"19112:10:2","nodeType":"VariableDeclaration","scope":424,"src":"19104:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":416,"name":"uint256","nodeType":"ElementaryTypeName","src":"19104:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":419,"mutability":"mutable","name":"amount","nameLocation":"19132:6:2","nodeType":"VariableDeclaration","scope":424,"src":"19124:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":418,"name":"uint256","nodeType":"ElementaryTypeName","src":"19124:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"19062:77:2"},"returnParameters":{"id":421,"nodeType":"ParameterList","parameters":[],"src":"19161:0:2"},"scope":435,"src":"19030:5538:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":433,"nodeType":"Block","src":"25619:10234:2","statements":[{"AST":{"nodeType":"YulBlock","src":"25709:10138:2","statements":[{"nodeType":"YulVariableDeclaration","src":"25723:32:2","value":{"name":"batchTransfers.length","nodeType":"YulIdentifier","src":"25734:21:2"},"variables":[{"name":"len","nodeType":"YulTypedName","src":"25727:3:2","type":""}]},{"nodeType":"YulVariableDeclaration","src":"25995:47:2","value":{"name":"batchTransfers.offset","nodeType":"YulIdentifier","src":"26021:21:2"},"variables":[{"name":"nextElementHeadPtr","nodeType":"YulTypedName","src":"25999:18:2","type":""}]},{"nodeType":"YulVariableDeclaration","src":"26281:38:2","value":{"name":"nextElementHeadPtr","nodeType":"YulIdentifier","src":"26301:18:2"},"variables":[{"name":"arrayHeadPtr","nodeType":"YulTypedName","src":"26285:12:2","type":""}]},{"expression":{"arguments":[{"name":"ConduitBatch1155Transfer_from_offset","nodeType":"YulIdentifier","src":"26500:36:2"},{"name":"ERC1155_safeBatchTransferFrom_signature","nodeType":"YulIdentifier","src":"26538:39:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26493:6:2"},"nodeType":"YulFunctionCall","src":"26493:85:2"},"nodeType":"YulExpressionStatement","src":"26493:85:2"},{"body":{"nodeType":"YulBlock","src":"26690:8758:2","statements":[{"nodeType":"YulVariableDeclaration","src":"26927:69:2","value":{"arguments":[{"name":"arrayHeadPtr","nodeType":"YulIdentifier","src":"26949:12:2"},{"arguments":[{"name":"nextElementHeadPtr","nodeType":"YulIdentifier","src":"26976:18:2"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"26963:12:2"},"nodeType":"YulFunctionCall","src":"26963:32:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26945:3:2"},"nodeType":"YulFunctionCall","src":"26945:51:2"},"variables":[{"name":"elementPtr","nodeType":"YulTypedName","src":"26931:10:2","type":""}]},{"nodeType":"YulVariableDeclaration","src":"27067:37:2","value":{"arguments":[{"name":"elementPtr","nodeType":"YulIdentifier","src":"27093:10:2"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"27080:12:2"},"nodeType":"YulFunctionCall","src":"27080:24:2"},"variables":[{"name":"token","nodeType":"YulTypedName","src":"27071:5:2","type":""}]},{"body":{"nodeType":"YulBlock","src":"27205:436:2","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27307:1:2","type":"","value":"0"},{"name":"NoContract_error_selector","nodeType":"YulIdentifier","src":"27310:25:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27300:6:2"},"nodeType":"YulFunctionCall","src":"27300:36:2"},"nodeType":"YulExpressionStatement","src":"27300:36:2"},{"expression":{"arguments":[{"name":"NoContract_error_account_ptr","nodeType":"YulIdentifier","src":"27364:28:2"},{"name":"token","nodeType":"YulIdentifier","src":"27394:5:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27357:6:2"},"nodeType":"YulFunctionCall","src":"27357:43:2"},"nodeType":"YulExpressionStatement","src":"27357:43:2"},{"expression":{"arguments":[{"name":"Generic_error_selector_offset","nodeType":"YulIdentifier","src":"27568:29:2"},{"name":"NoContract_error_length","nodeType":"YulIdentifier","src":"27599:23:2"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"27561:6:2"},"nodeType":"YulFunctionCall","src":"27561:62:2"},"nodeType":"YulExpressionStatement","src":"27561:62:2"}]},"condition":{"arguments":[{"arguments":[{"name":"token","nodeType":"YulIdentifier","src":"27197:5:2"}],"functionName":{"name":"extcodesize","nodeType":"YulIdentifier","src":"27185:11:2"},"nodeType":"YulFunctionCall","src":"27185:18:2"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"27178:6:2"},"nodeType":"YulFunctionCall","src":"27178:26:2"},"nodeType":"YulIf","src":"27175:466:2"},{"nodeType":"YulVariableDeclaration","src":"27716:90:2","value":{"arguments":[{"arguments":[{"name":"elementPtr","nodeType":"YulIdentifier","src":"27750:10:2"},{"name":"ConduitBatch1155Transfer_ids_length_offset","nodeType":"YulIdentifier","src":"27762:42:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27746:3:2"},"nodeType":"YulFunctionCall","src":"27746:59:2"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"27733:12:2"},"nodeType":"YulFunctionCall","src":"27733:73:2"},"variables":[{"name":"idsLength","nodeType":"YulTypedName","src":"27720:9:2","type":""}]},{"nodeType":"YulVariableDeclaration","src":"27896:134:2","value":{"arguments":[{"name":"ConduitBatch1155Transfer_amounts_length_baseOffset","nodeType":"YulIdentifier","src":"27949:50:2"},{"arguments":[{"name":"OneWordShift","nodeType":"YulIdentifier","src":"28005:12:2"},{"name":"idsLength","nodeType":"YulIdentifier","src":"28019:9:2"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"28001:3:2"},"nodeType":"YulFunctionCall","src":"28001:28:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27945:3:2"},"nodeType":"YulFunctionCall","src":"27945:85:2"},"variables":[{"name":"expectedAmountsOffset","nodeType":"YulTypedName","src":"27900:21:2","type":""}]},{"nodeType":"YulVariableDeclaration","src":"28093:971:2","value":{"arguments":[{"arguments":[{"arguments":[{"name":"idsLength","nodeType":"YulIdentifier","src":"28264:9:2"},{"arguments":[{"arguments":[{"name":"elementPtr","nodeType":"YulIdentifier","src":"28292:10:2"},{"name":"expectedAmountsOffset","nodeType":"YulIdentifier","src":"28304:21:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28288:3:2"},"nodeType":"YulFunctionCall","src":"28288:38:2"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"28275:12:2"},"nodeType":"YulFunctionCall","src":"28275:52:2"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"28261:2:2"},"nodeType":"YulFunctionCall","src":"28261:67:2"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"elementPtr","nodeType":"YulIdentifier","src":"28506:10:2"},{"name":"ConduitBatch1155Transfer_ids_head_offset","nodeType":"YulIdentifier","src":"28518:40:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28502:3:2"},"nodeType":"YulFunctionCall","src":"28502:57:2"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"28489:12:2"},"nodeType":"YulFunctionCall","src":"28489:71:2"},{"name":"ConduitBatch1155Transfer_ids_length_offset","nodeType":"YulIdentifier","src":"28598:42:2"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"28449:2:2"},"nodeType":"YulFunctionCall","src":"28449:225:2"},{"arguments":[{"arguments":[{"arguments":[{"name":"elementPtr","nodeType":"YulIdentifier","src":"28839:10:2"},{"name":"ConduitBatchTransfer_amounts_head_offset","nodeType":"YulIdentifier","src":"28851:40:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28835:3:2"},"nodeType":"YulFunctionCall","src":"28835:57:2"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"28822:12:2"},"nodeType":"YulFunctionCall","src":"28822:71:2"},{"name":"expectedAmountsOffset","nodeType":"YulIdentifier","src":"28931:21:2"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"28782:2:2"},"nodeType":"YulFunctionCall","src":"28782:204:2"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"28358:3:2"},"nodeType":"YulFunctionCall","src":"28358:658:2"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"28168:3:2"},"nodeType":"YulFunctionCall","src":"28168:874:2"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"28136:6:2"},"nodeType":"YulFunctionCall","src":"28136:928:2"},"variables":[{"name":"invalidEncoding","nodeType":"YulTypedName","src":"28097:15:2","type":""}]},{"body":{"nodeType":"YulBlock","src":"29171:452:2","statements":[{"expression":{"arguments":[{"name":"Invalid1155BatchTransferEncoding_ptr","nodeType":"YulIdentifier","src":"29273:36:2"},{"name":"Invalid1155BatchTransferEncoding_selector","nodeType":"YulIdentifier","src":"29311:41:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29266:6:2"},"nodeType":"YulFunctionCall","src":"29266:87:2"},"nodeType":"YulExpressionStatement","src":"29266:87:2"},{"expression":{"arguments":[{"name":"Invalid1155BatchTransferEncoding_ptr","nodeType":"YulIdentifier","src":"29527:36:2"},{"name":"Invalid1155BatchTransferEncoding_length","nodeType":"YulIdentifier","src":"29565:39:2"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"29520:6:2"},"nodeType":"YulFunctionCall","src":"29520:85:2"},"nodeType":"YulExpressionStatement","src":"29520:85:2"}]},"condition":{"name":"invalidEncoding","nodeType":"YulIdentifier","src":"29155:15:2"},"nodeType":"YulIf","src":"29152:471:2"},{"nodeType":"YulAssignment","src":"29705:54:2","value":{"arguments":[{"name":"nextElementHeadPtr","nodeType":"YulIdentifier","src":"29731:18:2"},{"name":"OneWord","nodeType":"YulIdentifier","src":"29751:7:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29727:3:2"},"nodeType":"YulFunctionCall","src":"29727:32:2"},"variableNames":[{"name":"nextElementHeadPtr","nodeType":"YulIdentifier","src":"29705:18:2"}]},{"expression":{"arguments":[{"name":"BatchTransfer1155Params_ptr","nodeType":"YulIdentifier","src":"29890:27:2"},{"arguments":[{"name":"elementPtr","nodeType":"YulIdentifier","src":"29943:10:2"},{"name":"ConduitBatch1155Transfer_from_offset","nodeType":"YulIdentifier","src":"29955:36:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29939:3:2"},"nodeType":"YulFunctionCall","src":"29939:53:2"},{"name":"ConduitBatch1155Transfer_usable_head_size","nodeType":"YulIdentifier","src":"30014:41:2"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"29856:12:2"},"nodeType":"YulFunctionCall","src":"29856:217:2"},"nodeType":"YulExpressionStatement","src":"29856:217:2"},{"nodeType":"YulVariableDeclaration","src":"30248:69:2","value":{"arguments":[{"name":"TwoWords","nodeType":"YulIdentifier","src":"30277:8:2"},{"arguments":[{"name":"TwoWordsShift","nodeType":"YulIdentifier","src":"30291:13:2"},{"name":"idsLength","nodeType":"YulIdentifier","src":"30306:9:2"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"30287:3:2"},"nodeType":"YulFunctionCall","src":"30287:29:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30273:3:2"},"nodeType":"YulFunctionCall","src":"30273:44:2"},"variables":[{"name":"idsAndAmountsSize","nodeType":"YulTypedName","src":"30252:17:2","type":""}]},{"expression":{"arguments":[{"name":"BatchTransfer1155Params_data_head_ptr","nodeType":"YulIdentifier","src":"30430:37:2"},{"arguments":[{"name":"BatchTransfer1155Params_ids_length_offset","nodeType":"YulIdentifier","src":"30493:41:2"},{"name":"idsAndAmountsSize","nodeType":"YulIdentifier","src":"30536:17:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30489:3:2"},"nodeType":"YulFunctionCall","src":"30489:65:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30402:6:2"},"nodeType":"YulFunctionCall","src":"30402:170:2"},"nodeType":"YulExpressionStatement","src":"30402:170:2"},{"expression":{"arguments":[{"arguments":[{"name":"BatchTransfer1155Params_data_length_basePtr","nodeType":"YulIdentifier","src":"30672:43:2"},{"name":"idsAndAmountsSize","nodeType":"YulIdentifier","src":"30717:17:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30668:3:2"},"nodeType":"YulFunctionCall","src":"30668:67:2"},{"kind":"number","nodeType":"YulLiteral","src":"30737:1:2","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30661:6:2"},"nodeType":"YulFunctionCall","src":"30661:78:2"},"nodeType":"YulExpressionStatement","src":"30661:78:2"},{"nodeType":"YulVariableDeclaration","src":"30836:89:2","value":{"arguments":[{"name":"BatchTransfer1155Params_calldata_baseSize","nodeType":"YulIdentifier","src":"30864:41:2"},{"name":"idsAndAmountsSize","nodeType":"YulIdentifier","src":"30907:17:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30860:3:2"},"nodeType":"YulFunctionCall","src":"30860:65:2"},"variables":[{"name":"transferDataSize","nodeType":"YulTypedName","src":"30840:16:2","type":""}]},{"expression":{"arguments":[{"name":"BatchTransfer1155Params_ids_length_ptr","nodeType":"YulIdentifier","src":"31056:38:2"},{"arguments":[{"name":"elementPtr","nodeType":"YulIdentifier","src":"31120:10:2"},{"name":"ConduitBatch1155Transfer_ids_length_offset","nodeType":"YulIdentifier","src":"31132:42:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31116:3:2"},"nodeType":"YulFunctionCall","src":"31116:59:2"},{"name":"idsAndAmountsSize","nodeType":"YulIdentifier","src":"31197:17:2"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"31022:12:2"},"nodeType":"YulFunctionCall","src":"31022:210:2"},"nodeType":"YulExpressionStatement","src":"31022:210:2"},{"nodeType":"YulVariableDeclaration","src":"31311:370:2","value":{"arguments":[{"arguments":[],"functionName":{"name":"gas","nodeType":"YulIdentifier","src":"31376:3:2"},"nodeType":"YulFunctionCall","src":"31376:5:2"},{"name":"token","nodeType":"YulIdentifier","src":"31407:5:2"},{"kind":"number","nodeType":"YulLiteral","src":"31438:1:2","type":"","value":"0"},{"name":"ConduitBatch1155Transfer_from_offset","nodeType":"YulIdentifier","src":"31465:36:2"},{"name":"transferDataSize","nodeType":"YulIdentifier","src":"31550:16:2"},{"kind":"number","nodeType":"YulLiteral","src":"31631:1:2","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"31658:1:2","type":"","value":"0"}],"functionName":{"name":"call","nodeType":"YulIdentifier","src":"31346:4:2"},"nodeType":"YulFunctionCall","src":"31346:335:2"},"variables":[{"name":"success","nodeType":"YulTypedName","src":"31315:7:2","type":""}]},{"body":{"nodeType":"YulBlock","src":"31763:3671:2","statements":[{"body":{"nodeType":"YulBlock","src":"31934:2588:2","statements":[{"nodeType":"YulVariableDeclaration","src":"32267:79:2","value":{"arguments":[{"name":"OneWordShift","nodeType":"YulIdentifier","src":"32294:12:2"},{"arguments":[{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"32312:14:2"},"nodeType":"YulFunctionCall","src":"32312:16:2"},{"name":"ThirtyOneBytes","nodeType":"YulIdentifier","src":"32330:14:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32308:3:2"},"nodeType":"YulFunctionCall","src":"32308:37:2"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"32290:3:2"},"nodeType":"YulFunctionCall","src":"32290:56:2"},"variables":[{"name":"returnDataWords","nodeType":"YulTypedName","src":"32271:15:2","type":""}]},{"nodeType":"YulVariableDeclaration","src":"32967:53:2","value":{"arguments":[{"name":"OneWordShift","nodeType":"YulIdentifier","src":"32989:12:2"},{"name":"transferDataSize","nodeType":"YulIdentifier","src":"33003:16:2"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"32985:3:2"},"nodeType":"YulFunctionCall","src":"32985:35:2"},"variables":[{"name":"msizeWords","nodeType":"YulTypedName","src":"32971:10:2","type":""}]},{"nodeType":"YulVariableDeclaration","src":"33119:45:2","value":{"arguments":[{"name":"CostPerWord","nodeType":"YulIdentifier","src":"33135:11:2"},{"name":"returnDataWords","nodeType":"YulIdentifier","src":"33148:15:2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"33131:3:2"},"nodeType":"YulFunctionCall","src":"33131:33:2"},"variables":[{"name":"cost","nodeType":"YulTypedName","src":"33123:4:2","type":""}]},{"body":{"nodeType":"YulBlock","src":"33297:627:2","statements":[{"nodeType":"YulAssignment","src":"33327:571:2","value":{"arguments":[{"name":"cost","nodeType":"YulIdentifier","src":"33408:4:2"},{"arguments":[{"arguments":[{"arguments":[{"name":"returnDataWords","nodeType":"YulIdentifier","src":"33503:15:2"},{"name":"msizeWords","nodeType":"YulIdentifier","src":"33520:10:2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"33499:3:2"},"nodeType":"YulFunctionCall","src":"33499:32:2"},{"name":"CostPerWord","nodeType":"YulIdentifier","src":"33533:11:2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"33495:3:2"},"nodeType":"YulFunctionCall","src":"33495:50:2"},{"arguments":[{"name":"MemoryExpansionCoefficientShift","nodeType":"YulIdentifier","src":"33636:31:2"},{"arguments":[{"arguments":[{"name":"returnDataWords","nodeType":"YulIdentifier","src":"33721:15:2"},{"name":"returnDataWords","nodeType":"YulIdentifier","src":"33738:15:2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"33717:3:2"},"nodeType":"YulFunctionCall","src":"33717:37:2"},{"arguments":[{"name":"msizeWords","nodeType":"YulIdentifier","src":"33760:10:2"},{"name":"msizeWords","nodeType":"YulIdentifier","src":"33772:10:2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"33756:3:2"},"nodeType":"YulFunctionCall","src":"33756:27:2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"33713:3:2"},"nodeType":"YulFunctionCall","src":"33713:71:2"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"33587:3:2"},"nodeType":"YulFunctionCall","src":"33587:239:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33450:3:2"},"nodeType":"YulFunctionCall","src":"33450:414:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33367:3:2"},"nodeType":"YulFunctionCall","src":"33367:531:2"},"variableNames":[{"name":"cost","nodeType":"YulIdentifier","src":"33327:4:2"}]}]},"condition":{"arguments":[{"name":"returnDataWords","nodeType":"YulIdentifier","src":"33268:15:2"},{"name":"msizeWords","nodeType":"YulIdentifier","src":"33285:10:2"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"33265:2:2"},"nodeType":"YulFunctionCall","src":"33265:31:2"},"nodeType":"YulIf","src":"33262:662:2"},{"body":{"nodeType":"YulBlock","src":"34191:309:2","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"34314:1:2","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"34317:1:2","type":"","value":"0"},{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"34320:14:2"},"nodeType":"YulFunctionCall","src":"34320:16:2"}],"functionName":{"name":"returndatacopy","nodeType":"YulIdentifier","src":"34299:14:2"},"nodeType":"YulFunctionCall","src":"34299:38:2"},"nodeType":"YulExpressionStatement","src":"34299:38:2"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"34454:1:2","type":"","value":"0"},{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"34457:14:2"},"nodeType":"YulFunctionCall","src":"34457:16:2"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"34447:6:2"},"nodeType":"YulFunctionCall","src":"34447:27:2"},"nodeType":"YulExpressionStatement","src":"34447:27:2"}]},"condition":{"arguments":[{"arguments":[{"name":"cost","nodeType":"YulIdentifier","src":"34161:4:2"},{"name":"ExtraGasBuffer","nodeType":"YulIdentifier","src":"34167:14:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34157:3:2"},"nodeType":"YulFunctionCall","src":"34157:25:2"},{"arguments":[],"functionName":{"name":"gas","nodeType":"YulIdentifier","src":"34184:3:2"},"nodeType":"YulFunctionCall","src":"34184:5:2"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"34154:2:2"},"nodeType":"YulFunctionCall","src":"34154:36:2"},"nodeType":"YulIf","src":"34151:349:2"}]},"condition":{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"31917:14:2"},"nodeType":"YulFunctionCall","src":"31917:16:2"},"nodeType":"YulIf","src":"31914:2608:2"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"34599:1:2","type":"","value":"0"},{"name":"ERC1155BatchTransferGenericFailure_error_signature","nodeType":"YulIdentifier","src":"34602:50:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"34592:6:2"},"nodeType":"YulFunctionCall","src":"34592:61:2"},"nodeType":"YulExpressionStatement","src":"34592:61:2"},{"expression":{"arguments":[{"name":"ERC1155BatchTransferGenericFailure_token_ptr","nodeType":"YulIdentifier","src":"34722:44:2"},{"name":"token","nodeType":"YulIdentifier","src":"34768:5:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"34715:6:2"},"nodeType":"YulFunctionCall","src":"34715:59:2"},"nodeType":"YulExpressionStatement","src":"34715:59:2"},{"expression":{"arguments":[{"name":"BatchTransfer1155Params_ids_head_ptr","nodeType":"YulIdentifier","src":"34860:36:2"},{"name":"ERC1155BatchTransferGenericFailure_ids_offset","nodeType":"YulIdentifier","src":"34898:45:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"34853:6:2"},"nodeType":"YulFunctionCall","src":"34853:91:2"},"nodeType":"YulExpressionStatement","src":"34853:91:2"},{"expression":{"arguments":[{"name":"BatchTransfer1155Params_amounts_head_ptr","nodeType":"YulIdentifier","src":"35059:40:2"},{"arguments":[{"name":"OneWord","nodeType":"YulIdentifier","src":"35129:7:2"},{"arguments":[{"name":"BatchTransfer1155Params_amounts_head_ptr","nodeType":"YulIdentifier","src":"35144:40:2"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"35138:5:2"},"nodeType":"YulFunctionCall","src":"35138:47:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35125:3:2"},"nodeType":"YulFunctionCall","src":"35125:61:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"35027:6:2"},"nodeType":"YulFunctionCall","src":"35027:181:2"},"nodeType":"YulExpressionStatement","src":"35027:181:2"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"35396:1:2","type":"","value":"0"},{"name":"transferDataSize","nodeType":"YulIdentifier","src":"35399:16:2"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"35389:6:2"},"nodeType":"YulFunctionCall","src":"35389:27:2"},"nodeType":"YulExpressionStatement","src":"35389:27:2"}]},"condition":{"arguments":[{"name":"success","nodeType":"YulIdentifier","src":"31754:7:2"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"31747:6:2"},"nodeType":"YulFunctionCall","src":"31747:15:2"},"nodeType":"YulIf","src":"31744:3690:2"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"26663:1:2"},{"name":"len","nodeType":"YulIdentifier","src":"26666:3:2"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"26660:2:2"},"nodeType":"YulFunctionCall","src":"26660:10:2"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"26671:18:2","statements":[{"nodeType":"YulAssignment","src":"26673:14:2","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"26682:1:2"},{"kind":"number","nodeType":"YulLiteral","src":"26685:1:2","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26678:3:2"},"nodeType":"YulFunctionCall","src":"26678:9:2"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"26673:1:2"}]}]},"pre":{"nodeType":"YulBlock","src":"26645:14:2","statements":[{"nodeType":"YulVariableDeclaration","src":"26647:10:2","value":{"kind":"number","nodeType":"YulLiteral","src":"26656:1:2","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"26651:1:2","type":""}]}]},"src":"26641:8807:2"},{"expression":{"arguments":[{"name":"FreeMemoryPointerSlot","nodeType":"YulIdentifier","src":"35789:21:2"},{"name":"DefaultFreeMemoryPointer","nodeType":"YulIdentifier","src":"35812:24:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"35782:6:2"},"nodeType":"YulFunctionCall","src":"35782:55:2"},"nodeType":"YulExpressionStatement","src":"35782:55:2"}]},"evmVersion":"london","externalReferences":[{"declaration":798,"isOffset":false,"isSlot":false,"src":"35059:40:2","valueSize":1},{"declaration":798,"isOffset":false,"isSlot":false,"src":"35144:40:2","valueSize":1},{"declaration":807,"isOffset":false,"isSlot":false,"src":"30864:41:2","valueSize":1},{"declaration":801,"isOffset":false,"isSlot":false,"src":"30430:37:2","valueSize":1},{"declaration":804,"isOffset":false,"isSlot":false,"src":"30672:43:2","valueSize":1},{"declaration":795,"isOffset":false,"isSlot":false,"src":"34860:36:2","valueSize":1},{"declaration":813,"isOffset":false,"isSlot":false,"src":"30493:41:2","valueSize":1},{"declaration":810,"isOffset":false,"isSlot":false,"src":"31056:38:2","valueSize":1},{"declaration":792,"isOffset":false,"isSlot":false,"src":"29890:27:2","valueSize":1},{"declaration":828,"isOffset":false,"isSlot":false,"src":"27949:50:2","valueSize":1},{"declaration":819,"isOffset":false,"isSlot":false,"src":"26500:36:2","valueSize":1},{"declaration":819,"isOffset":false,"isSlot":false,"src":"29955:36:2","valueSize":1},{"declaration":819,"isOffset":false,"isSlot":false,"src":"31465:36:2","valueSize":1},{"declaration":822,"isOffset":false,"isSlot":false,"src":"28518:40:2","valueSize":1},{"declaration":825,"isOffset":false,"isSlot":false,"src":"27762:42:2","valueSize":1},{"declaration":825,"isOffset":false,"isSlot":false,"src":"28598:42:2","valueSize":1},{"declaration":825,"isOffset":false,"isSlot":false,"src":"31132:42:2","valueSize":1},{"declaration":816,"isOffset":false,"isSlot":false,"src":"30014:41:2","valueSize":1},{"declaration":831,"isOffset":false,"isSlot":false,"src":"28851:40:2","valueSize":1},{"declaration":786,"isOffset":false,"isSlot":false,"src":"33135:11:2","valueSize":1},{"declaration":786,"isOffset":false,"isSlot":false,"src":"33533:11:2","valueSize":1},{"declaration":662,"isOffset":false,"isSlot":false,"src":"35812:24:2","valueSize":1},{"declaration":845,"isOffset":false,"isSlot":false,"src":"34602:50:2","valueSize":1},{"declaration":851,"isOffset":false,"isSlot":false,"src":"34898:45:2","valueSize":1},{"declaration":848,"isOffset":false,"isSlot":false,"src":"34722:44:2","valueSize":1},{"declaration":728,"isOffset":false,"isSlot":false,"src":"26538:39:2","valueSize":1},{"declaration":783,"isOffset":false,"isSlot":false,"src":"34167:14:2","valueSize":1},{"declaration":656,"isOffset":false,"isSlot":false,"src":"35789:21:2","valueSize":1},{"declaration":674,"isOffset":false,"isSlot":false,"src":"27568:29:2","valueSize":1},{"declaration":837,"isOffset":false,"isSlot":false,"src":"29565:39:2","valueSize":1},{"declaration":834,"isOffset":false,"isSlot":false,"src":"29273:36:2","valueSize":1},{"declaration":834,"isOffset":false,"isSlot":false,"src":"29527:36:2","valueSize":1},{"declaration":841,"isOffset":false,"isSlot":false,"src":"29311:41:2","valueSize":1},{"declaration":789,"isOffset":false,"isSlot":false,"src":"33636:31:2","valueSize":1},{"declaration":753,"isOffset":false,"isSlot":false,"src":"27364:28:2","valueSize":1},{"declaration":756,"isOffset":false,"isSlot":false,"src":"27599:23:2","valueSize":1},{"declaration":750,"isOffset":false,"isSlot":false,"src":"27310:25:2","valueSize":1},{"declaration":641,"isOffset":false,"isSlot":false,"src":"29751:7:2","valueSize":1},{"declaration":641,"isOffset":false,"isSlot":false,"src":"35129:7:2","valueSize":1},{"declaration":650,"isOffset":false,"isSlot":false,"src":"28005:12:2","valueSize":1},{"declaration":650,"isOffset":false,"isSlot":false,"src":"32294:12:2","valueSize":1},{"declaration":650,"isOffset":false,"isSlot":false,"src":"32989:12:2","valueSize":1},{"declaration":638,"isOffset":false,"isSlot":false,"src":"32330:14:2","valueSize":1},{"declaration":644,"isOffset":false,"isSlot":false,"src":"30277:8:2","valueSize":1},{"declaration":653,"isOffset":false,"isSlot":false,"src":"30291:13:2","valueSize":1},{"declaration":429,"isOffset":false,"isSlot":false,"src":"25734:21:2","suffix":"length","valueSize":1},{"declaration":429,"isOffset":true,"isSlot":false,"src":"26021:21:2","suffix":"offset","valueSize":1}],"id":432,"nodeType":"InlineAssembly","src":"25700:10147:2"}]},"documentation":{"id":425,"nodeType":"StructuredDocumentation","src":"24574:940:2","text":" @dev Internal function to transfer ERC1155 tokens from a given\n      originator to a given recipient. Sufficient approvals must be set on\n      the contract performing the transfer and contract recipients must\n      implement the ERC1155TokenReceiver interface to indicate that they\n      are willing to accept the transfer. NOTE: this function is not\n      memory-safe; it will overwrite existing memory, restore the free\n      memory pointer to the default value, and overwrite the zero slot.\n      This function should only be called once memory is no longer\n      required and when uninitialized arrays are not utilized, and memory\n      should be considered fully corrupted (aside from the existence of a\n      default-value free memory pointer) after calling this function.\n @param batchTransfers The group of 1155 batch transfers to perform."},"id":434,"implemented":true,"kind":"function","modifiers":[],"name":"_performERC1155BatchTransfers","nameLocation":"25528:29:2","nodeType":"FunctionDefinition","parameters":{"id":430,"nodeType":"ParameterList","parameters":[{"constant":false,"id":429,"mutability":"mutable","name":"batchTransfers","nameLocation":"25594:14:2","nodeType":"VariableDeclaration","scope":434,"src":"25558:50:2","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ConduitBatch1155Transfer_$497_calldata_ptr_$dyn_calldata_ptr","typeString":"struct ConduitBatch1155Transfer[]"},"typeName":{"baseType":{"id":427,"nodeType":"UserDefinedTypeName","pathNode":{"id":426,"name":"ConduitBatch1155Transfer","nodeType":"IdentifierPath","referencedDeclaration":497,"src":"25558:24:2"},"referencedDeclaration":497,"src":"25558:24:2","typeDescriptions":{"typeIdentifier":"t_struct$_ConduitBatch1155Transfer_$497_storage_ptr","typeString":"struct ConduitBatch1155Transfer"}},"id":428,"nodeType":"ArrayTypeName","src":"25558:26:2","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ConduitBatch1155Transfer_$497_storage_$dyn_storage_ptr","typeString":"struct ConduitBatch1155Transfer[]"}},"visibility":"internal"}],"src":"25557:52:2"},"returnParameters":{"id":431,"nodeType":"ParameterList","parameters":[],"src":"25619:0:2"},"scope":435,"src":"25519:10334:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":436,"src":"3772:32083:2","usedErrors":[579,582,585,598,613,624,629,632]}],"src":"32:35824:2"}},"seaport-types/src/conduit/lib/ConduitConstants.sol":{"id":3,"ast":{"absolutePath":"seaport-types/src/conduit/lib/ConduitConstants.sol","exportedSymbols":{"ChannelClosed_channel_ptr":[447],"ChannelClosed_error_length":[450],"ChannelClosed_error_ptr":[444],"ChannelClosed_error_signature":[441],"ChannelKey_channel_ptr":[453],"ChannelKey_length":[459],"ChannelKey_slot_ptr":[456]},"id":460,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":437,"literals":["solidity","^","0.8",".13"],"nodeType":"PragmaDirective","src":"32:24:3"},{"constant":true,"id":441,"mutability":"constant","name":"ChannelClosed_error_signature","nameLocation":"115:29:3","nodeType":"VariableDeclaration","scope":460,"src":"98:123:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":438,"name":"uint256","nodeType":"ElementaryTypeName","src":"98:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"components":[{"hexValue":"307839336461616466323030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030","id":439,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"153:66:3","typeDescriptions":{"typeIdentifier":"t_rational_66876361928286935092717866925301290808224162558783313296595378262690056110080_by_1","typeString":"int_const 6687...(69 digits omitted)...0080"},"value":"0x93daadf200000000000000000000000000000000000000000000000000000000"}],"id":440,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"147:74:3","typeDescriptions":{"typeIdentifier":"t_rational_66876361928286935092717866925301290808224162558783313296595378262690056110080_by_1","typeString":"int_const 6687...(69 digits omitted)...0080"}},"visibility":"internal"},{"constant":true,"id":444,"mutability":"constant","name":"ChannelClosed_error_ptr","nameLocation":"240:23:3","nodeType":"VariableDeclaration","scope":460,"src":"223:47:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":442,"name":"uint256","nodeType":"ElementaryTypeName","src":"223:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783030","id":443,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"266:4:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0x00"},"visibility":"internal"},{"constant":true,"id":447,"mutability":"constant","name":"ChannelClosed_channel_ptr","nameLocation":"289:25:3","nodeType":"VariableDeclaration","scope":460,"src":"272:48:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":445,"name":"uint256","nodeType":"ElementaryTypeName","src":"272:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"307834","id":446,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"317:3:3","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"0x4"},"visibility":"internal"},{"constant":true,"id":450,"mutability":"constant","name":"ChannelClosed_error_length","nameLocation":"339:26:3","nodeType":"VariableDeclaration","scope":460,"src":"322:50:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":448,"name":"uint256","nodeType":"ElementaryTypeName","src":"322:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783234","id":449,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"368:4:3","typeDescriptions":{"typeIdentifier":"t_rational_36_by_1","typeString":"int_const 36"},"value":"0x24"},"visibility":"internal"},{"constant":true,"id":453,"mutability":"constant","name":"ChannelKey_channel_ptr","nameLocation":"554:22:3","nodeType":"VariableDeclaration","scope":460,"src":"537:46:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":451,"name":"uint256","nodeType":"ElementaryTypeName","src":"537:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783030","id":452,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"579:4:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0x00"},"visibility":"internal"},{"constant":true,"id":456,"mutability":"constant","name":"ChannelKey_slot_ptr","nameLocation":"602:19:3","nodeType":"VariableDeclaration","scope":460,"src":"585:43:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":454,"name":"uint256","nodeType":"ElementaryTypeName","src":"585:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783230","id":455,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"624:4:3","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"0x20"},"visibility":"internal"},{"constant":true,"id":459,"mutability":"constant","name":"ChannelKey_length","nameLocation":"647:17:3","nodeType":"VariableDeclaration","scope":460,"src":"630:41:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":457,"name":"uint256","nodeType":"ElementaryTypeName","src":"630:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783430","id":458,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"667:4:3","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"0x40"},"visibility":"internal"}],"src":"32:641:3"}},"seaport-types/src/conduit/lib/ConduitEnums.sol":{"id":4,"ast":{"absolutePath":"seaport-types/src/conduit/lib/ConduitEnums.sol","exportedSymbols":{"ConduitItemType":[466]},"id":467,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":461,"literals":["solidity","^","0.8",".13"],"nodeType":"PragmaDirective","src":"32:24:4"},{"canonicalName":"ConduitItemType","id":466,"members":[{"id":462,"name":"NATIVE","nameLocation":"85:6:4","nodeType":"EnumValue","src":"85:6:4"},{"id":463,"name":"ERC20","nameLocation":"107:5:4","nodeType":"EnumValue","src":"107:5:4"},{"id":464,"name":"ERC721","nameLocation":"118:6:4","nodeType":"EnumValue","src":"118:6:4"},{"id":465,"name":"ERC1155","nameLocation":"130:7:4","nodeType":"EnumValue","src":"130:7:4"}],"name":"ConduitItemType","nameLocation":"63:15:4","nodeType":"EnumDefinition","src":"58:81:4"}],"src":"32:108:4"}},"seaport-types/src/conduit/lib/ConduitStructs.sol":{"id":5,"ast":{"absolutePath":"seaport-types/src/conduit/lib/ConduitStructs.sol","exportedSymbols":{"ConduitBatch1155Transfer":[497],"ConduitItemType":[466],"ConduitTransfer":[484]},"id":498,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":468,"literals":["solidity","^","0.8",".13"],"nodeType":"PragmaDirective","src":"32:24:5"},{"absolutePath":"seaport-types/src/conduit/lib/ConduitEnums.sol","file":"./ConduitEnums.sol","id":470,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":498,"sourceUnit":467,"src":"58:53:5","symbolAliases":[{"foreign":{"id":469,"name":"ConduitItemType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":466,"src":"67:15:5","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"canonicalName":"ConduitTransfer","id":484,"members":[{"constant":false,"id":473,"mutability":"mutable","name":"itemType","nameLocation":"312:8:5","nodeType":"VariableDeclaration","scope":484,"src":"296:24:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_ConduitItemType_$466","typeString":"enum ConduitItemType"},"typeName":{"id":472,"nodeType":"UserDefinedTypeName","pathNode":{"id":471,"name":"ConduitItemType","nodeType":"IdentifierPath","referencedDeclaration":466,"src":"296:15:5"},"referencedDeclaration":466,"src":"296:15:5","typeDescriptions":{"typeIdentifier":"t_enum$_ConduitItemType_$466","typeString":"enum ConduitItemType"}},"visibility":"internal"},{"constant":false,"id":475,"mutability":"mutable","name":"token","nameLocation":"334:5:5","nodeType":"VariableDeclaration","scope":484,"src":"326:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":474,"name":"address","nodeType":"ElementaryTypeName","src":"326:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":477,"mutability":"mutable","name":"from","nameLocation":"353:4:5","nodeType":"VariableDeclaration","scope":484,"src":"345:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":476,"name":"address","nodeType":"ElementaryTypeName","src":"345:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":479,"mutability":"mutable","name":"to","nameLocation":"371:2:5","nodeType":"VariableDeclaration","scope":484,"src":"363:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":478,"name":"address","nodeType":"ElementaryTypeName","src":"363:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":481,"mutability":"mutable","name":"identifier","nameLocation":"387:10:5","nodeType":"VariableDeclaration","scope":484,"src":"379:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":480,"name":"uint256","nodeType":"ElementaryTypeName","src":"379:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":483,"mutability":"mutable","name":"amount","nameLocation":"411:6:5","nodeType":"VariableDeclaration","scope":484,"src":"403:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":482,"name":"uint256","nodeType":"ElementaryTypeName","src":"403:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"ConduitTransfer","nameLocation":"274:15:5","nodeType":"StructDefinition","scope":498,"src":"267:153:5","visibility":"public"},{"canonicalName":"ConduitBatch1155Transfer","id":497,"members":[{"constant":false,"id":486,"mutability":"mutable","name":"token","nameLocation":"658:5:5","nodeType":"VariableDeclaration","scope":497,"src":"650:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":485,"name":"address","nodeType":"ElementaryTypeName","src":"650:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":488,"mutability":"mutable","name":"from","nameLocation":"677:4:5","nodeType":"VariableDeclaration","scope":497,"src":"669:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":487,"name":"address","nodeType":"ElementaryTypeName","src":"669:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":490,"mutability":"mutable","name":"to","nameLocation":"695:2:5","nodeType":"VariableDeclaration","scope":497,"src":"687:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":489,"name":"address","nodeType":"ElementaryTypeName","src":"687:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":493,"mutability":"mutable","name":"ids","nameLocation":"713:3:5","nodeType":"VariableDeclaration","scope":497,"src":"703:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":491,"name":"uint256","nodeType":"ElementaryTypeName","src":"703:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":492,"nodeType":"ArrayTypeName","src":"703:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":496,"mutability":"mutable","name":"amounts","nameLocation":"732:7:5","nodeType":"VariableDeclaration","scope":497,"src":"722:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":494,"name":"uint256","nodeType":"ElementaryTypeName","src":"722:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":495,"nodeType":"ArrayTypeName","src":"722:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"name":"ConduitBatch1155Transfer","nameLocation":"619:24:5","nodeType":"StructDefinition","scope":498,"src":"612:130:5","visibility":"public"}],"src":"32:711:5"}},"seaport-types/src/interfaces/ConduitInterface.sol":{"id":6,"ast":{"absolutePath":"seaport-types/src/interfaces/ConduitInterface.sol","exportedSymbols":{"ConduitBatch1155Transfer":[497],"ConduitInterface":[571],"ConduitTransfer":[484]},"id":572,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":499,"literals":["solidity","^","0.8",".13"],"nodeType":"PragmaDirective","src":"32:24:6"},{"absolutePath":"seaport-types/src/conduit/lib/ConduitStructs.sol","file":"../conduit/lib/ConduitStructs.sol","id":502,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":572,"sourceUnit":498,"src":"58:102:6","symbolAliases":[{"foreign":{"id":500,"name":"ConduitBatch1155Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":497,"src":"71:24:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":501,"name":"ConduitTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":484,"src":"101:15:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ConduitInterface","contractDependencies":[],"contractKind":"interface","documentation":{"id":503,"nodeType":"StructuredDocumentation","src":"162:174:6","text":" @title ConduitInterface\n @author 0age\n @notice ConduitInterface contains all external function interfaces, events,\n         and errors for conduit contracts."},"fullyImplemented":false,"id":571,"linearizedBaseContracts":[571],"name":"ConduitInterface","nameLocation":"347:16:6","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":504,"nodeType":"StructuredDocumentation","src":"370:144:6","text":" @dev Revert with an error when attempting to execute transfers using a\n      caller that does not have an open channel."},"errorSelector":"93daadf2","id":508,"name":"ChannelClosed","nameLocation":"525:13:6","nodeType":"ErrorDefinition","parameters":{"id":507,"nodeType":"ParameterList","parameters":[{"constant":false,"id":506,"mutability":"mutable","name":"channel","nameLocation":"547:7:6","nodeType":"VariableDeclaration","scope":508,"src":"539:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":505,"name":"address","nodeType":"ElementaryTypeName","src":"539:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"538:17:6"},"src":"519:37:6"},{"documentation":{"id":509,"nodeType":"StructuredDocumentation","src":"562:131:6","text":" @dev Revert with an error when attempting to update a channel to the\n      current status of that channel."},"errorSelector":"924e341e","id":515,"name":"ChannelStatusAlreadySet","nameLocation":"704:23:6","nodeType":"ErrorDefinition","parameters":{"id":514,"nodeType":"ParameterList","parameters":[{"constant":false,"id":511,"mutability":"mutable","name":"channel","nameLocation":"736:7:6","nodeType":"VariableDeclaration","scope":515,"src":"728:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":510,"name":"address","nodeType":"ElementaryTypeName","src":"728:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":513,"mutability":"mutable","name":"isOpen","nameLocation":"750:6:6","nodeType":"VariableDeclaration","scope":515,"src":"745:11:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":512,"name":"bool","nodeType":"ElementaryTypeName","src":"745:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"727:30:6"},"src":"698:60:6"},{"documentation":{"id":516,"nodeType":"StructuredDocumentation","src":"764:154:6","text":" @dev Revert with an error when attempting to execute a transfer for an\n      item that does not have an ERC20/721/1155 item type."},"errorSelector":"7932f1fc","id":518,"name":"InvalidItemType","nameLocation":"929:15:6","nodeType":"ErrorDefinition","parameters":{"id":517,"nodeType":"ParameterList","parameters":[],"src":"944:2:6"},"src":"923:24:6"},{"documentation":{"id":519,"nodeType":"StructuredDocumentation","src":"953:156:6","text":" @dev Revert with an error when attempting to update the status of a\n      channel from a caller that is not the conduit controller."},"errorSelector":"6d5769be","id":521,"name":"InvalidController","nameLocation":"1120:17:6","nodeType":"ErrorDefinition","parameters":{"id":520,"nodeType":"ParameterList","parameters":[],"src":"1137:2:6"},"src":"1114:26:6"},{"anonymous":false,"documentation":{"id":522,"nodeType":"StructuredDocumentation","src":"1146:220:6","text":" @dev Emit an event whenever a channel is opened or closed.\n @param channel The channel that has been updated.\n @param open    A boolean indicating whether the conduit is open or not."},"eventSelector":"ae63067d43ac07563b7eb8db6595635fc77f1578a2a5ea06ba91b63e2afa37e2","id":528,"name":"ChannelUpdated","nameLocation":"1377:14:6","nodeType":"EventDefinition","parameters":{"id":527,"nodeType":"ParameterList","parameters":[{"constant":false,"id":524,"indexed":true,"mutability":"mutable","name":"channel","nameLocation":"1408:7:6","nodeType":"VariableDeclaration","scope":528,"src":"1392:23:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":523,"name":"address","nodeType":"ElementaryTypeName","src":"1392:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":526,"indexed":false,"mutability":"mutable","name":"open","nameLocation":"1422:4:6","nodeType":"VariableDeclaration","scope":528,"src":"1417:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":525,"name":"bool","nodeType":"ElementaryTypeName","src":"1417:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1391:36:6"},"src":"1371:57:6"},{"documentation":{"id":529,"nodeType":"StructuredDocumentation","src":"1434:352:6","text":" @notice Execute a sequence of ERC20/721/1155 transfers. Only a caller\n         with an open channel can call this function.\n @param transfers The ERC20/721/1155 transfers to perform.\n @return magicValue A magic value indicating that the transfers were\n                    performed successfully."},"functionSelector":"4ce34aa2","id":538,"implemented":false,"kind":"function","modifiers":[],"name":"execute","nameLocation":"1800:7:6","nodeType":"FunctionDefinition","parameters":{"id":534,"nodeType":"ParameterList","parameters":[{"constant":false,"id":533,"mutability":"mutable","name":"transfers","nameLocation":"1844:9:6","nodeType":"VariableDeclaration","scope":538,"src":"1817:36:6","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ConduitTransfer_$484_calldata_ptr_$dyn_calldata_ptr","typeString":"struct ConduitTransfer[]"},"typeName":{"baseType":{"id":531,"nodeType":"UserDefinedTypeName","pathNode":{"id":530,"name":"ConduitTransfer","nodeType":"IdentifierPath","referencedDeclaration":484,"src":"1817:15:6"},"referencedDeclaration":484,"src":"1817:15:6","typeDescriptions":{"typeIdentifier":"t_struct$_ConduitTransfer_$484_storage_ptr","typeString":"struct ConduitTransfer"}},"id":532,"nodeType":"ArrayTypeName","src":"1817:17:6","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ConduitTransfer_$484_storage_$dyn_storage_ptr","typeString":"struct ConduitTransfer[]"}},"visibility":"internal"}],"src":"1807:52:6"},"returnParameters":{"id":537,"nodeType":"ParameterList","parameters":[{"constant":false,"id":536,"mutability":"mutable","name":"magicValue","nameLocation":"1885:10:6","nodeType":"VariableDeclaration","scope":538,"src":"1878:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":535,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1878:6:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1877:19:6"},"scope":571,"src":"1791:106:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":539,"nodeType":"StructuredDocumentation","src":"1903:353:6","text":" @notice Execute a sequence of batch 1155 transfers. Only a caller with an\n         open channel can call this function.\n @param batch1155Transfers The 1155 batch transfers to perform.\n @return magicValue A magic value indicating that the transfers were\n                    performed successfully."},"functionSelector":"8df25d92","id":548,"implemented":false,"kind":"function","modifiers":[],"name":"executeBatch1155","nameLocation":"2270:16:6","nodeType":"FunctionDefinition","parameters":{"id":544,"nodeType":"ParameterList","parameters":[{"constant":false,"id":543,"mutability":"mutable","name":"batch1155Transfers","nameLocation":"2332:18:6","nodeType":"VariableDeclaration","scope":548,"src":"2296:54:6","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ConduitBatch1155Transfer_$497_calldata_ptr_$dyn_calldata_ptr","typeString":"struct ConduitBatch1155Transfer[]"},"typeName":{"baseType":{"id":541,"nodeType":"UserDefinedTypeName","pathNode":{"id":540,"name":"ConduitBatch1155Transfer","nodeType":"IdentifierPath","referencedDeclaration":497,"src":"2296:24:6"},"referencedDeclaration":497,"src":"2296:24:6","typeDescriptions":{"typeIdentifier":"t_struct$_ConduitBatch1155Transfer_$497_storage_ptr","typeString":"struct ConduitBatch1155Transfer"}},"id":542,"nodeType":"ArrayTypeName","src":"2296:26:6","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ConduitBatch1155Transfer_$497_storage_$dyn_storage_ptr","typeString":"struct ConduitBatch1155Transfer[]"}},"visibility":"internal"}],"src":"2286:70:6"},"returnParameters":{"id":547,"nodeType":"ParameterList","parameters":[{"constant":false,"id":546,"mutability":"mutable","name":"magicValue","nameLocation":"2382:10:6","nodeType":"VariableDeclaration","scope":548,"src":"2375:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":545,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2375:6:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2374:19:6"},"scope":571,"src":"2261:133:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":549,"nodeType":"StructuredDocumentation","src":"2400:444:6","text":" @notice Execute a sequence of transfers, both single and batch 1155. Only\n         a caller with an open channel can call this function.\n @param standardTransfers  The ERC20/721/1155 transfers to perform.\n @param batch1155Transfers The 1155 batch transfers to perform.\n @return magicValue A magic value indicating that the transfers were\n                    performed successfully."},"functionSelector":"899e104c","id":562,"implemented":false,"kind":"function","modifiers":[],"name":"executeWithBatch1155","nameLocation":"2858:20:6","nodeType":"FunctionDefinition","parameters":{"id":558,"nodeType":"ParameterList","parameters":[{"constant":false,"id":553,"mutability":"mutable","name":"standardTransfers","nameLocation":"2915:17:6","nodeType":"VariableDeclaration","scope":562,"src":"2888:44:6","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ConduitTransfer_$484_calldata_ptr_$dyn_calldata_ptr","typeString":"struct ConduitTransfer[]"},"typeName":{"baseType":{"id":551,"nodeType":"UserDefinedTypeName","pathNode":{"id":550,"name":"ConduitTransfer","nodeType":"IdentifierPath","referencedDeclaration":484,"src":"2888:15:6"},"referencedDeclaration":484,"src":"2888:15:6","typeDescriptions":{"typeIdentifier":"t_struct$_ConduitTransfer_$484_storage_ptr","typeString":"struct ConduitTransfer"}},"id":552,"nodeType":"ArrayTypeName","src":"2888:17:6","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ConduitTransfer_$484_storage_$dyn_storage_ptr","typeString":"struct ConduitTransfer[]"}},"visibility":"internal"},{"constant":false,"id":557,"mutability":"mutable","name":"batch1155Transfers","nameLocation":"2978:18:6","nodeType":"VariableDeclaration","scope":562,"src":"2942:54:6","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ConduitBatch1155Transfer_$497_calldata_ptr_$dyn_calldata_ptr","typeString":"struct ConduitBatch1155Transfer[]"},"typeName":{"baseType":{"id":555,"nodeType":"UserDefinedTypeName","pathNode":{"id":554,"name":"ConduitBatch1155Transfer","nodeType":"IdentifierPath","referencedDeclaration":497,"src":"2942:24:6"},"referencedDeclaration":497,"src":"2942:24:6","typeDescriptions":{"typeIdentifier":"t_struct$_ConduitBatch1155Transfer_$497_storage_ptr","typeString":"struct ConduitBatch1155Transfer"}},"id":556,"nodeType":"ArrayTypeName","src":"2942:26:6","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ConduitBatch1155Transfer_$497_storage_$dyn_storage_ptr","typeString":"struct ConduitBatch1155Transfer[]"}},"visibility":"internal"}],"src":"2878:124:6"},"returnParameters":{"id":561,"nodeType":"ParameterList","parameters":[{"constant":false,"id":560,"mutability":"mutable","name":"magicValue","nameLocation":"3028:10:6","nodeType":"VariableDeclaration","scope":562,"src":"3021:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":559,"name":"bytes4","nodeType":"ElementaryTypeName","src":"3021:6:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"3020:19:6"},"scope":571,"src":"2849:191:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":563,"nodeType":"StructuredDocumentation","src":"3046:222:6","text":" @notice Open or close a given channel. Only callable by the controller.\n @param channel The channel to open or close.\n @param isOpen  The status of the channel (either open or closed)."},"functionSelector":"c4e8fcb5","id":570,"implemented":false,"kind":"function","modifiers":[],"name":"updateChannel","nameLocation":"3282:13:6","nodeType":"FunctionDefinition","parameters":{"id":568,"nodeType":"ParameterList","parameters":[{"constant":false,"id":565,"mutability":"mutable","name":"channel","nameLocation":"3304:7:6","nodeType":"VariableDeclaration","scope":570,"src":"3296:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":564,"name":"address","nodeType":"ElementaryTypeName","src":"3296:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":567,"mutability":"mutable","name":"isOpen","nameLocation":"3318:6:6","nodeType":"VariableDeclaration","scope":570,"src":"3313:11:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":566,"name":"bool","nodeType":"ElementaryTypeName","src":"3313:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3295:30:6"},"returnParameters":{"id":569,"nodeType":"ParameterList","parameters":[],"src":"3334:0:6"},"scope":571,"src":"3273:62:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":572,"src":"337:3000:6","usedErrors":[508,515,518,521]}],"src":"32:3306:6"}},"seaport-types/src/interfaces/TokenTransferrerErrors.sol":{"id":7,"ast":{"absolutePath":"seaport-types/src/interfaces/TokenTransferrerErrors.sol","exportedSymbols":{"TokenTransferrerErrors":[633]},"id":634,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":573,"literals":["solidity","^","0.8",".13"],"nodeType":"PragmaDirective","src":"32:24:7"},{"abstract":false,"baseContracts":[],"canonicalName":"TokenTransferrerErrors","contractDependencies":[],"contractKind":"interface","documentation":{"id":574,"nodeType":"StructuredDocumentation","src":"58:40:7","text":" @title TokenTransferrerErrors"},"fullyImplemented":true,"id":633,"linearizedBaseContracts":[633],"name":"TokenTransferrerErrors","nameLocation":"109:22:7","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":575,"nodeType":"StructuredDocumentation","src":"138:194:7","text":" @dev Revert with an error when an ERC721 transfer with amount other than\n      one is attempted.\n @param amount The amount of the ERC721 tokens to transfer."},"errorSelector":"69f95827","id":579,"name":"InvalidERC721TransferAmount","nameLocation":"343:27:7","nodeType":"ErrorDefinition","parameters":{"id":578,"nodeType":"ParameterList","parameters":[{"constant":false,"id":577,"mutability":"mutable","name":"amount","nameLocation":"379:6:7","nodeType":"VariableDeclaration","scope":579,"src":"371:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":576,"name":"uint256","nodeType":"ElementaryTypeName","src":"371:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"370:16:7"},"src":"337:50:7"},{"documentation":{"id":580,"nodeType":"StructuredDocumentation","src":"393:129:7","text":" @dev Revert with an error when attempting to fulfill an order where an\n      item has an amount of zero."},"errorSelector":"91b3e514","id":582,"name":"MissingItemAmount","nameLocation":"533:17:7","nodeType":"ErrorDefinition","parameters":{"id":581,"nodeType":"ParameterList","parameters":[],"src":"550:2:7"},"src":"527:26:7"},{"documentation":{"id":583,"nodeType":"StructuredDocumentation","src":"559:427:7","text":" @dev Revert with an error when attempting to fulfill an order where an\n      item has unused parameters. This includes both the token and the\n      identifier parameters for native transfers as well as the identifier\n      parameter for ERC20 transfers. Note that the conduit does not\n      perform this check, leaving it up to the calling channel to enforce\n      when desired."},"errorSelector":"6ab37ce7","id":585,"name":"UnusedItemParameters","nameLocation":"997:20:7","nodeType":"ErrorDefinition","parameters":{"id":584,"nodeType":"ParameterList","parameters":[],"src":"1017:2:7"},"src":"991:29:7"},{"documentation":{"id":586,"nodeType":"StructuredDocumentation","src":"1026:455:7","text":" @dev Revert with an error when an ERC20, ERC721, or ERC1155 token\n      transfer reverts.\n @param token      The token for which the transfer was attempted.\n @param from       The source of the attempted transfer.\n @param to         The recipient of the attempted transfer.\n @param identifier The identifier for the attempted transfer.\n @param amount     The amount for the attempted transfer."},"errorSelector":"f486bc87","id":598,"name":"TokenTransferGenericFailure","nameLocation":"1492:27:7","nodeType":"ErrorDefinition","parameters":{"id":597,"nodeType":"ParameterList","parameters":[{"constant":false,"id":588,"mutability":"mutable","name":"token","nameLocation":"1537:5:7","nodeType":"VariableDeclaration","scope":598,"src":"1529:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":587,"name":"address","nodeType":"ElementaryTypeName","src":"1529:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":590,"mutability":"mutable","name":"from","nameLocation":"1560:4:7","nodeType":"VariableDeclaration","scope":598,"src":"1552:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":589,"name":"address","nodeType":"ElementaryTypeName","src":"1552:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":592,"mutability":"mutable","name":"to","nameLocation":"1582:2:7","nodeType":"VariableDeclaration","scope":598,"src":"1574:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":591,"name":"address","nodeType":"ElementaryTypeName","src":"1574:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":594,"mutability":"mutable","name":"identifier","nameLocation":"1602:10:7","nodeType":"VariableDeclaration","scope":598,"src":"1594:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":593,"name":"uint256","nodeType":"ElementaryTypeName","src":"1594:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":596,"mutability":"mutable","name":"amount","nameLocation":"1630:6:7","nodeType":"VariableDeclaration","scope":598,"src":"1622:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":595,"name":"uint256","nodeType":"ElementaryTypeName","src":"1622:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1519:123:7"},"src":"1486:157:7"},{"documentation":{"id":599,"nodeType":"StructuredDocumentation","src":"1649:437:7","text":" @dev Revert with an error when a batch ERC1155 token transfer reverts.\n @param token       The token for which the transfer was attempted.\n @param from        The source of the attempted transfer.\n @param to          The recipient of the attempted transfer.\n @param identifiers The identifiers for the attempted transfer.\n @param amounts     The amounts for the attempted transfer."},"errorSelector":"afc445e2","id":613,"name":"ERC1155BatchTransferGenericFailure","nameLocation":"2097:34:7","nodeType":"ErrorDefinition","parameters":{"id":612,"nodeType":"ParameterList","parameters":[{"constant":false,"id":601,"mutability":"mutable","name":"token","nameLocation":"2149:5:7","nodeType":"VariableDeclaration","scope":613,"src":"2141:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":600,"name":"address","nodeType":"ElementaryTypeName","src":"2141:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":603,"mutability":"mutable","name":"from","nameLocation":"2172:4:7","nodeType":"VariableDeclaration","scope":613,"src":"2164:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":602,"name":"address","nodeType":"ElementaryTypeName","src":"2164:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":605,"mutability":"mutable","name":"to","nameLocation":"2194:2:7","nodeType":"VariableDeclaration","scope":613,"src":"2186:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":604,"name":"address","nodeType":"ElementaryTypeName","src":"2186:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":608,"mutability":"mutable","name":"identifiers","nameLocation":"2216:11:7","nodeType":"VariableDeclaration","scope":613,"src":"2206:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":606,"name":"uint256","nodeType":"ElementaryTypeName","src":"2206:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":607,"nodeType":"ArrayTypeName","src":"2206:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":611,"mutability":"mutable","name":"amounts","nameLocation":"2247:7:7","nodeType":"VariableDeclaration","scope":613,"src":"2237:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":609,"name":"uint256","nodeType":"ElementaryTypeName","src":"2237:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":610,"nodeType":"ArrayTypeName","src":"2237:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2131:129:7"},"src":"2091:170:7"},{"documentation":{"id":614,"nodeType":"StructuredDocumentation","src":"2267:406:7","text":" @dev Revert with an error when an ERC20 token transfer returns a falsey\n      value.\n @param token      The token for which the ERC20 transfer was attempted.\n @param from       The source of the attempted ERC20 transfer.\n @param to         The recipient of the attempted ERC20 transfer.\n @param amount     The amount for the attempted ERC20 transfer."},"errorSelector":"98891923","id":624,"name":"BadReturnValueFromERC20OnTransfer","nameLocation":"2684:33:7","nodeType":"ErrorDefinition","parameters":{"id":623,"nodeType":"ParameterList","parameters":[{"constant":false,"id":616,"mutability":"mutable","name":"token","nameLocation":"2735:5:7","nodeType":"VariableDeclaration","scope":624,"src":"2727:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":615,"name":"address","nodeType":"ElementaryTypeName","src":"2727:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":618,"mutability":"mutable","name":"from","nameLocation":"2758:4:7","nodeType":"VariableDeclaration","scope":624,"src":"2750:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":617,"name":"address","nodeType":"ElementaryTypeName","src":"2750:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":620,"mutability":"mutable","name":"to","nameLocation":"2780:2:7","nodeType":"VariableDeclaration","scope":624,"src":"2772:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":619,"name":"address","nodeType":"ElementaryTypeName","src":"2772:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":622,"mutability":"mutable","name":"amount","nameLocation":"2800:6:7","nodeType":"VariableDeclaration","scope":624,"src":"2792:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":621,"name":"uint256","nodeType":"ElementaryTypeName","src":"2792:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2717:95:7"},"src":"2678:135:7"},{"documentation":{"id":625,"nodeType":"StructuredDocumentation","src":"2819:215:7","text":" @dev Revert with an error when an account being called as an assumed\n      contract does not have code and returns no data.\n @param account The account that should contain code."},"errorSelector":"5f15d672","id":629,"name":"NoContract","nameLocation":"3045:10:7","nodeType":"ErrorDefinition","parameters":{"id":628,"nodeType":"ParameterList","parameters":[{"constant":false,"id":627,"mutability":"mutable","name":"account","nameLocation":"3064:7:7","nodeType":"VariableDeclaration","scope":629,"src":"3056:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":626,"name":"address","nodeType":"ElementaryTypeName","src":"3056:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3055:17:7"},"src":"3039:34:7"},{"documentation":{"id":630,"nodeType":"StructuredDocumentation","src":"3079:224:7","text":" @dev Revert with an error when attempting to execute an 1155 batch\n      transfer using calldata not produced by default ABI encoding or with\n      different lengths for ids and amounts arrays."},"errorSelector":"eba2084c","id":632,"name":"Invalid1155BatchTransferEncoding","nameLocation":"3314:32:7","nodeType":"ErrorDefinition","parameters":{"id":631,"nodeType":"ParameterList","parameters":[],"src":"3346:2:7"},"src":"3308:41:7"}],"scope":634,"src":"99:3252:7","usedErrors":[579,582,585,598,613,624,629,632]}],"src":"32:3320:7"}},"seaport-types/src/lib/TokenTransferrerConstants.sol":{"id":8,"ast":{"absolutePath":"seaport-types/src/lib/TokenTransferrerConstants.sol","exportedSymbols":{"BadReturnValueFromERC20OnTransfer_error_amount_ptr":[866],"BadReturnValueFromERC20OnTransfer_error_from_ptr":[860],"BadReturnValueFromERC20OnTransfer_error_length":[869],"BadReturnValueFromERC20OnTransfer_error_selector":[854],"BadReturnValueFromERC20OnTransfer_error_to_ptr":[863],"BadReturnValueFromERC20OnTransfer_error_token_ptr":[857],"BatchTransfer1155Params_amounts_head_ptr":[798],"BatchTransfer1155Params_calldata_baseSize":[807],"BatchTransfer1155Params_data_head_ptr":[801],"BatchTransfer1155Params_data_length_basePtr":[804],"BatchTransfer1155Params_ids_head_ptr":[795],"BatchTransfer1155Params_ids_length_offset":[813],"BatchTransfer1155Params_ids_length_ptr":[810],"BatchTransfer1155Params_ptr":[792],"ConduitBatch1155Transfer_amounts_length_baseOffset":[828],"ConduitBatch1155Transfer_from_offset":[819],"ConduitBatch1155Transfer_ids_head_offset":[822],"ConduitBatch1155Transfer_ids_length_offset":[825],"ConduitBatch1155Transfer_usable_head_size":[816],"ConduitBatchTransfer_amounts_head_offset":[831],"CostPerWord":[786],"DefaultFreeMemoryPointer":[662],"ERC1155BatchTransferGenericFailure_error_signature":[845],"ERC1155BatchTransferGenericFailure_ids_offset":[851],"ERC1155BatchTransferGenericFailure_token_ptr":[848],"ERC1155_safeBatchTransferFrom_signature":[728],"ERC1155_safeTransferFrom_amount_ptr":[712],"ERC1155_safeTransferFrom_data_length_offset":[724],"ERC1155_safeTransferFrom_data_length_ptr":[718],"ERC1155_safeTransferFrom_data_offset_ptr":[715],"ERC1155_safeTransferFrom_from_ptr":[703],"ERC1155_safeTransferFrom_id_ptr":[709],"ERC1155_safeTransferFrom_length":[721],"ERC1155_safeTransferFrom_sig_ptr":[700],"ERC1155_safeTransferFrom_signature":[697],"ERC1155_safeTransferFrom_to_ptr":[706],"ERC20_transferFrom_amount_ptr":[690],"ERC20_transferFrom_from_ptr":[684],"ERC20_transferFrom_length":[693],"ERC20_transferFrom_sig_ptr":[681],"ERC20_transferFrom_signature":[678],"ERC20_transferFrom_to_ptr":[687],"ERC721_transferFrom_from_ptr":[738],"ERC721_transferFrom_id_ptr":[744],"ERC721_transferFrom_length":[747],"ERC721_transferFrom_sig_ptr":[735],"ERC721_transferFrom_signature":[732],"ERC721_transferFrom_to_ptr":[741],"ExtraGasBuffer":[783],"FreeMemoryPointerSlot":[656],"Generic_error_selector_offset":[674],"Invalid1155BatchTransferEncoding_length":[837],"Invalid1155BatchTransferEncoding_ptr":[834],"Invalid1155BatchTransferEncoding_selector":[841],"MemoryExpansionCoefficientShift":[789],"NoContract_error_account_ptr":[753],"NoContract_error_length":[756],"NoContract_error_selector":[750],"OneWord":[641],"OneWordShift":[650],"Slot0x80":[665],"Slot0xA0":[668],"Slot0xC0":[671],"ThirtyOneBytes":[638],"ThreeWords":[647],"TokenTransferGenericFailure_err_identifier_ptr":[774],"TokenTransferGenericFailure_error_amount_ptr":[777],"TokenTransferGenericFailure_error_from_ptr":[765],"TokenTransferGenericFailure_error_identifier_ptr":[771],"TokenTransferGenericFailure_error_length":[780],"TokenTransferGenericFailure_error_selector":[759],"TokenTransferGenericFailure_error_to_ptr":[768],"TokenTransferGenericFailure_error_token_ptr":[762],"TwoWords":[644],"TwoWordsShift":[653],"ZeroSlot":[659]},"id":870,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":635,"literals":["solidity","^","0.8",".13"],"nodeType":"PragmaDirective","src":"32:24:8"},{"constant":true,"id":638,"mutability":"constant","name":"ThirtyOneBytes","nameLocation":"1808:14:8","nodeType":"VariableDeclaration","scope":870,"src":"1791:38:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":636,"name":"uint256","nodeType":"ElementaryTypeName","src":"1791:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783166","id":637,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1825:4:8","typeDescriptions":{"typeIdentifier":"t_rational_31_by_1","typeString":"int_const 31"},"value":"0x1f"},"visibility":"internal"},{"constant":true,"id":641,"mutability":"constant","name":"OneWord","nameLocation":"1848:7:8","nodeType":"VariableDeclaration","scope":870,"src":"1831:31:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":639,"name":"uint256","nodeType":"ElementaryTypeName","src":"1831:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783230","id":640,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1858:4:8","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"0x20"},"visibility":"internal"},{"constant":true,"id":644,"mutability":"constant","name":"TwoWords","nameLocation":"1881:8:8","nodeType":"VariableDeclaration","scope":870,"src":"1864:32:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":642,"name":"uint256","nodeType":"ElementaryTypeName","src":"1864:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783430","id":643,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1892:4:8","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"0x40"},"visibility":"internal"},{"constant":true,"id":647,"mutability":"constant","name":"ThreeWords","nameLocation":"1915:10:8","nodeType":"VariableDeclaration","scope":870,"src":"1898:34:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":645,"name":"uint256","nodeType":"ElementaryTypeName","src":"1898:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783630","id":646,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1928:4:8","typeDescriptions":{"typeIdentifier":"t_rational_96_by_1","typeString":"int_const 96"},"value":"0x60"},"visibility":"internal"},{"constant":true,"id":650,"mutability":"constant","name":"OneWordShift","nameLocation":"1952:12:8","nodeType":"VariableDeclaration","scope":870,"src":"1935:35:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":648,"name":"uint256","nodeType":"ElementaryTypeName","src":"1935:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"307835","id":649,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1967:3:8","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"0x5"},"visibility":"internal"},{"constant":true,"id":653,"mutability":"constant","name":"TwoWordsShift","nameLocation":"1989:13:8","nodeType":"VariableDeclaration","scope":870,"src":"1972:36:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":651,"name":"uint256","nodeType":"ElementaryTypeName","src":"1972:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"307836","id":652,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2005:3:8","typeDescriptions":{"typeIdentifier":"t_rational_6_by_1","typeString":"int_const 6"},"value":"0x6"},"visibility":"internal"},{"constant":true,"id":656,"mutability":"constant","name":"FreeMemoryPointerSlot","nameLocation":"2028:21:8","nodeType":"VariableDeclaration","scope":870,"src":"2011:45:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":654,"name":"uint256","nodeType":"ElementaryTypeName","src":"2011:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783430","id":655,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2052:4:8","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"0x40"},"visibility":"internal"},{"constant":true,"id":659,"mutability":"constant","name":"ZeroSlot","nameLocation":"2075:8:8","nodeType":"VariableDeclaration","scope":870,"src":"2058:32:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":657,"name":"uint256","nodeType":"ElementaryTypeName","src":"2058:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783630","id":658,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2086:4:8","typeDescriptions":{"typeIdentifier":"t_rational_96_by_1","typeString":"int_const 96"},"value":"0x60"},"visibility":"internal"},{"constant":true,"id":662,"mutability":"constant","name":"DefaultFreeMemoryPointer","nameLocation":"2109:24:8","nodeType":"VariableDeclaration","scope":870,"src":"2092:48:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":660,"name":"uint256","nodeType":"ElementaryTypeName","src":"2092:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783830","id":661,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2136:4:8","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"0x80"},"visibility":"internal"},{"constant":true,"id":665,"mutability":"constant","name":"Slot0x80","nameLocation":"2160:8:8","nodeType":"VariableDeclaration","scope":870,"src":"2143:32:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":663,"name":"uint256","nodeType":"ElementaryTypeName","src":"2143:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783830","id":664,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2171:4:8","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"0x80"},"visibility":"internal"},{"constant":true,"id":668,"mutability":"constant","name":"Slot0xA0","nameLocation":"2194:8:8","nodeType":"VariableDeclaration","scope":870,"src":"2177:32:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":666,"name":"uint256","nodeType":"ElementaryTypeName","src":"2177:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30786130","id":667,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2205:4:8","typeDescriptions":{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},"value":"0xa0"},"visibility":"internal"},{"constant":true,"id":671,"mutability":"constant","name":"Slot0xC0","nameLocation":"2228:8:8","nodeType":"VariableDeclaration","scope":870,"src":"2211:32:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":669,"name":"uint256","nodeType":"ElementaryTypeName","src":"2211:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30786330","id":670,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2239:4:8","typeDescriptions":{"typeIdentifier":"t_rational_192_by_1","typeString":"int_const 192"},"value":"0xc0"},"visibility":"internal"},{"constant":true,"id":674,"mutability":"constant","name":"Generic_error_selector_offset","nameLocation":"2263:29:8","nodeType":"VariableDeclaration","scope":870,"src":"2246:53:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":672,"name":"uint256","nodeType":"ElementaryTypeName","src":"2246:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783163","id":673,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2295:4:8","typeDescriptions":{"typeIdentifier":"t_rational_28_by_1","typeString":"int_const 28"},"value":"0x1c"},"visibility":"internal"},{"constant":true,"id":678,"mutability":"constant","name":"ERC20_transferFrom_signature","nameLocation":"2387:28:8","nodeType":"VariableDeclaration","scope":870,"src":"2370:122:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":675,"name":"uint256","nodeType":"ElementaryTypeName","src":"2370:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"components":[{"hexValue":"307832336238373264643030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030","id":676,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2424:66:8","typeDescriptions":{"typeIdentifier":"t_rational_16156842317565293874272834530371880720966471053262404558597773956279093428224_by_1","typeString":"int_const 1615...(69 digits omitted)...8224"},"value":"0x23b872dd00000000000000000000000000000000000000000000000000000000"}],"id":677,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2418:74:8","typeDescriptions":{"typeIdentifier":"t_rational_16156842317565293874272834530371880720966471053262404558597773956279093428224_by_1","typeString":"int_const 1615...(69 digits omitted)...8224"}},"visibility":"internal"},{"constant":true,"id":681,"mutability":"constant","name":"ERC20_transferFrom_sig_ptr","nameLocation":"2511:26:8","nodeType":"VariableDeclaration","scope":870,"src":"2494:49:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":679,"name":"uint256","nodeType":"ElementaryTypeName","src":"2494:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"307830","id":680,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2540:3:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0x0"},"visibility":"internal"},{"constant":true,"id":684,"mutability":"constant","name":"ERC20_transferFrom_from_ptr","nameLocation":"2562:27:8","nodeType":"VariableDeclaration","scope":870,"src":"2545:51:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":682,"name":"uint256","nodeType":"ElementaryTypeName","src":"2545:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783034","id":683,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2592:4:8","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"0x04"},"visibility":"internal"},{"constant":true,"id":687,"mutability":"constant","name":"ERC20_transferFrom_to_ptr","nameLocation":"2615:25:8","nodeType":"VariableDeclaration","scope":870,"src":"2598:49:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":685,"name":"uint256","nodeType":"ElementaryTypeName","src":"2598:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783234","id":686,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2643:4:8","typeDescriptions":{"typeIdentifier":"t_rational_36_by_1","typeString":"int_const 36"},"value":"0x24"},"visibility":"internal"},{"constant":true,"id":690,"mutability":"constant","name":"ERC20_transferFrom_amount_ptr","nameLocation":"2666:29:8","nodeType":"VariableDeclaration","scope":870,"src":"2649:53:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":688,"name":"uint256","nodeType":"ElementaryTypeName","src":"2649:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783434","id":689,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2698:4:8","typeDescriptions":{"typeIdentifier":"t_rational_68_by_1","typeString":"int_const 68"},"value":"0x44"},"visibility":"internal"},{"constant":true,"id":693,"mutability":"constant","name":"ERC20_transferFrom_length","nameLocation":"2721:25:8","nodeType":"VariableDeclaration","scope":870,"src":"2704:49:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":691,"name":"uint256","nodeType":"ElementaryTypeName","src":"2704:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783634","id":692,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2749:4:8","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"0x64"},"visibility":"internal"},{"constant":true,"id":697,"mutability":"constant","name":"ERC1155_safeTransferFrom_signature","nameLocation":"2892:34:8","nodeType":"VariableDeclaration","scope":870,"src":"2875:128:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":694,"name":"uint256","nodeType":"ElementaryTypeName","src":"2875:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"components":[{"hexValue":"307866323432343332613030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030","id":695,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2935:66:8","typeDescriptions":{"typeIdentifier":"t_rational_109576784812748834340197573905731726730118698833493337707389013487240318287872_by_1","typeString":"int_const 1095...(70 digits omitted)...7872"},"value":"0xf242432a00000000000000000000000000000000000000000000000000000000"}],"id":696,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2929:74:8","typeDescriptions":{"typeIdentifier":"t_rational_109576784812748834340197573905731726730118698833493337707389013487240318287872_by_1","typeString":"int_const 1095...(70 digits omitted)...7872"}},"visibility":"internal"},{"constant":true,"id":700,"mutability":"constant","name":"ERC1155_safeTransferFrom_sig_ptr","nameLocation":"3022:32:8","nodeType":"VariableDeclaration","scope":870,"src":"3005:55:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":698,"name":"uint256","nodeType":"ElementaryTypeName","src":"3005:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"307830","id":699,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3057:3:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0x0"},"visibility":"internal"},{"constant":true,"id":703,"mutability":"constant","name":"ERC1155_safeTransferFrom_from_ptr","nameLocation":"3079:33:8","nodeType":"VariableDeclaration","scope":870,"src":"3062:57:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":701,"name":"uint256","nodeType":"ElementaryTypeName","src":"3062:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783034","id":702,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3115:4:8","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"0x04"},"visibility":"internal"},{"constant":true,"id":706,"mutability":"constant","name":"ERC1155_safeTransferFrom_to_ptr","nameLocation":"3138:31:8","nodeType":"VariableDeclaration","scope":870,"src":"3121:55:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":704,"name":"uint256","nodeType":"ElementaryTypeName","src":"3121:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783234","id":705,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3172:4:8","typeDescriptions":{"typeIdentifier":"t_rational_36_by_1","typeString":"int_const 36"},"value":"0x24"},"visibility":"internal"},{"constant":true,"id":709,"mutability":"constant","name":"ERC1155_safeTransferFrom_id_ptr","nameLocation":"3195:31:8","nodeType":"VariableDeclaration","scope":870,"src":"3178:55:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":707,"name":"uint256","nodeType":"ElementaryTypeName","src":"3178:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783434","id":708,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3229:4:8","typeDescriptions":{"typeIdentifier":"t_rational_68_by_1","typeString":"int_const 68"},"value":"0x44"},"visibility":"internal"},{"constant":true,"id":712,"mutability":"constant","name":"ERC1155_safeTransferFrom_amount_ptr","nameLocation":"3252:35:8","nodeType":"VariableDeclaration","scope":870,"src":"3235:59:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":710,"name":"uint256","nodeType":"ElementaryTypeName","src":"3235:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783634","id":711,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3290:4:8","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"0x64"},"visibility":"internal"},{"constant":true,"id":715,"mutability":"constant","name":"ERC1155_safeTransferFrom_data_offset_ptr","nameLocation":"3313:40:8","nodeType":"VariableDeclaration","scope":870,"src":"3296:64:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":713,"name":"uint256","nodeType":"ElementaryTypeName","src":"3296:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783834","id":714,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3356:4:8","typeDescriptions":{"typeIdentifier":"t_rational_132_by_1","typeString":"int_const 132"},"value":"0x84"},"visibility":"internal"},{"constant":true,"id":718,"mutability":"constant","name":"ERC1155_safeTransferFrom_data_length_ptr","nameLocation":"3379:40:8","nodeType":"VariableDeclaration","scope":870,"src":"3362:64:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":716,"name":"uint256","nodeType":"ElementaryTypeName","src":"3362:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30786134","id":717,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3422:4:8","typeDescriptions":{"typeIdentifier":"t_rational_164_by_1","typeString":"int_const 164"},"value":"0xa4"},"visibility":"internal"},{"constant":true,"id":721,"mutability":"constant","name":"ERC1155_safeTransferFrom_length","nameLocation":"3445:31:8","nodeType":"VariableDeclaration","scope":870,"src":"3428:55:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":719,"name":"uint256","nodeType":"ElementaryTypeName","src":"3428:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30786334","id":720,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3479:4:8","typeDescriptions":{"typeIdentifier":"t_rational_196_by_1","typeString":"int_const 196"},"value":"0xc4"},"visibility":"internal"},{"constant":true,"id":724,"mutability":"constant","name":"ERC1155_safeTransferFrom_data_length_offset","nameLocation":"3523:43:8","nodeType":"VariableDeclaration","scope":870,"src":"3506:67:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":722,"name":"uint256","nodeType":"ElementaryTypeName","src":"3506:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30786130","id":723,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3569:4:8","typeDescriptions":{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},"value":"0xa0"},"visibility":"internal"},{"constant":true,"id":728,"mutability":"constant","name":"ERC1155_safeBatchTransferFrom_signature","nameLocation":"3700:39:8","nodeType":"VariableDeclaration","scope":870,"src":"3683:133:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":725,"name":"uint256","nodeType":"ElementaryTypeName","src":"3683:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"components":[{"hexValue":"307832656232633264363030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030","id":726,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3748:66:8","typeDescriptions":{"typeIdentifier":"t_rational_21122234520580670415450416725259358303340482176740656504059893016123987197952_by_1","typeString":"int_const 2112...(69 digits omitted)...7952"},"value":"0x2eb2c2d600000000000000000000000000000000000000000000000000000000"}],"id":727,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"3742:74:8","typeDescriptions":{"typeIdentifier":"t_rational_21122234520580670415450416725259358303340482176740656504059893016123987197952_by_1","typeString":"int_const 2112...(69 digits omitted)...7952"}},"visibility":"internal"},{"constant":true,"id":732,"mutability":"constant","name":"ERC721_transferFrom_signature","nameLocation":"3967:29:8","nodeType":"VariableDeclaration","scope":870,"src":"3950:123:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":729,"name":"uint256","nodeType":"ElementaryTypeName","src":"3950:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"components":[{"hexValue":"307832336238373264643030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030","id":730,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4005:66:8","typeDescriptions":{"typeIdentifier":"t_rational_16156842317565293874272834530371880720966471053262404558597773956279093428224_by_1","typeString":"int_const 1615...(69 digits omitted)...8224"},"value":"0x23b872dd00000000000000000000000000000000000000000000000000000000"}],"id":731,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"3999:74:8","typeDescriptions":{"typeIdentifier":"t_rational_16156842317565293874272834530371880720966471053262404558597773956279093428224_by_1","typeString":"int_const 1615...(69 digits omitted)...8224"}},"visibility":"internal"},{"constant":true,"id":735,"mutability":"constant","name":"ERC721_transferFrom_sig_ptr","nameLocation":"4092:27:8","nodeType":"VariableDeclaration","scope":870,"src":"4075:50:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":733,"name":"uint256","nodeType":"ElementaryTypeName","src":"4075:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"307830","id":734,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4122:3:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0x0"},"visibility":"internal"},{"constant":true,"id":738,"mutability":"constant","name":"ERC721_transferFrom_from_ptr","nameLocation":"4144:28:8","nodeType":"VariableDeclaration","scope":870,"src":"4127:52:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":736,"name":"uint256","nodeType":"ElementaryTypeName","src":"4127:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783034","id":737,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4175:4:8","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"0x04"},"visibility":"internal"},{"constant":true,"id":741,"mutability":"constant","name":"ERC721_transferFrom_to_ptr","nameLocation":"4198:26:8","nodeType":"VariableDeclaration","scope":870,"src":"4181:50:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":739,"name":"uint256","nodeType":"ElementaryTypeName","src":"4181:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783234","id":740,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4227:4:8","typeDescriptions":{"typeIdentifier":"t_rational_36_by_1","typeString":"int_const 36"},"value":"0x24"},"visibility":"internal"},{"constant":true,"id":744,"mutability":"constant","name":"ERC721_transferFrom_id_ptr","nameLocation":"4250:26:8","nodeType":"VariableDeclaration","scope":870,"src":"4233:50:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":742,"name":"uint256","nodeType":"ElementaryTypeName","src":"4233:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783434","id":743,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4279:4:8","typeDescriptions":{"typeIdentifier":"t_rational_68_by_1","typeString":"int_const 68"},"value":"0x44"},"visibility":"internal"},{"constant":true,"id":747,"mutability":"constant","name":"ERC721_transferFrom_length","nameLocation":"4302:26:8","nodeType":"VariableDeclaration","scope":870,"src":"4285:50:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":745,"name":"uint256","nodeType":"ElementaryTypeName","src":"4285:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783634","id":746,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4331:4:8","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"0x64"},"visibility":"internal"},{"constant":true,"id":750,"mutability":"constant","name":"NoContract_error_selector","nameLocation":"4603:25:8","nodeType":"VariableDeclaration","scope":870,"src":"4586:55:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":748,"name":"uint256","nodeType":"ElementaryTypeName","src":"4586:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783566313564363732","id":749,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4631:10:8","typeDescriptions":{"typeIdentifier":"t_rational_1595266674_by_1","typeString":"int_const 1595266674"},"value":"0x5f15d672"},"visibility":"internal"},{"constant":true,"id":753,"mutability":"constant","name":"NoContract_error_account_ptr","nameLocation":"4660:28:8","nodeType":"VariableDeclaration","scope":870,"src":"4643:52:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":751,"name":"uint256","nodeType":"ElementaryTypeName","src":"4643:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783230","id":752,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4691:4:8","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"0x20"},"visibility":"internal"},{"constant":true,"id":756,"mutability":"constant","name":"NoContract_error_length","nameLocation":"4714:23:8","nodeType":"VariableDeclaration","scope":870,"src":"4697:47:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":754,"name":"uint256","nodeType":"ElementaryTypeName","src":"4697:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783234","id":755,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4740:4:8","typeDescriptions":{"typeIdentifier":"t_rational_36_by_1","typeString":"int_const 36"},"value":"0x24"},"visibility":"internal"},{"constant":true,"id":759,"mutability":"constant","name":"TokenTransferGenericFailure_error_selector","nameLocation":"5194:42:8","nodeType":"VariableDeclaration","scope":870,"src":"5177:72:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":757,"name":"uint256","nodeType":"ElementaryTypeName","src":"5177:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30786634383662633837","id":758,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5239:10:8","typeDescriptions":{"typeIdentifier":"t_rational_4102470791_by_1","typeString":"int_const 4102470791"},"value":"0xf486bc87"},"visibility":"internal"},{"constant":true,"id":762,"mutability":"constant","name":"TokenTransferGenericFailure_error_token_ptr","nameLocation":"5268:43:8","nodeType":"VariableDeclaration","scope":870,"src":"5251:67:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":760,"name":"uint256","nodeType":"ElementaryTypeName","src":"5251:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783230","id":761,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5314:4:8","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"0x20"},"visibility":"internal"},{"constant":true,"id":765,"mutability":"constant","name":"TokenTransferGenericFailure_error_from_ptr","nameLocation":"5337:42:8","nodeType":"VariableDeclaration","scope":870,"src":"5320:66:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":763,"name":"uint256","nodeType":"ElementaryTypeName","src":"5320:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783430","id":764,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5382:4:8","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"0x40"},"visibility":"internal"},{"constant":true,"id":768,"mutability":"constant","name":"TokenTransferGenericFailure_error_to_ptr","nameLocation":"5405:40:8","nodeType":"VariableDeclaration","scope":870,"src":"5388:64:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":766,"name":"uint256","nodeType":"ElementaryTypeName","src":"5388:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783630","id":767,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5448:4:8","typeDescriptions":{"typeIdentifier":"t_rational_96_by_1","typeString":"int_const 96"},"value":"0x60"},"visibility":"internal"},{"constant":true,"id":771,"mutability":"constant","name":"TokenTransferGenericFailure_error_identifier_ptr","nameLocation":"5471:48:8","nodeType":"VariableDeclaration","scope":870,"src":"5454:72:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":769,"name":"uint256","nodeType":"ElementaryTypeName","src":"5454:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783830","id":770,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5522:4:8","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"0x80"},"visibility":"internal"},{"constant":true,"id":774,"mutability":"constant","name":"TokenTransferGenericFailure_err_identifier_ptr","nameLocation":"5545:46:8","nodeType":"VariableDeclaration","scope":870,"src":"5528:70:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":772,"name":"uint256","nodeType":"ElementaryTypeName","src":"5528:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783830","id":773,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5594:4:8","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"0x80"},"visibility":"internal"},{"constant":true,"id":777,"mutability":"constant","name":"TokenTransferGenericFailure_error_amount_ptr","nameLocation":"5617:44:8","nodeType":"VariableDeclaration","scope":870,"src":"5600:68:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":775,"name":"uint256","nodeType":"ElementaryTypeName","src":"5600:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30786130","id":776,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5664:4:8","typeDescriptions":{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},"value":"0xa0"},"visibility":"internal"},{"constant":true,"id":780,"mutability":"constant","name":"TokenTransferGenericFailure_error_length","nameLocation":"5687:40:8","nodeType":"VariableDeclaration","scope":870,"src":"5670:64:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":778,"name":"uint256","nodeType":"ElementaryTypeName","src":"5670:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30786134","id":779,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5730:4:8","typeDescriptions":{"typeIdentifier":"t_rational_164_by_1","typeString":"int_const 164"},"value":"0xa4"},"visibility":"internal"},{"constant":true,"id":783,"mutability":"constant","name":"ExtraGasBuffer","nameLocation":"5754:14:8","nodeType":"VariableDeclaration","scope":870,"src":"5737:38:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":781,"name":"uint256","nodeType":"ElementaryTypeName","src":"5737:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783230","id":782,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5771:4:8","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"0x20"},"visibility":"internal"},{"constant":true,"id":786,"mutability":"constant","name":"CostPerWord","nameLocation":"5794:11:8","nodeType":"VariableDeclaration","scope":870,"src":"5777:34:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":784,"name":"uint256","nodeType":"ElementaryTypeName","src":"5777:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"307833","id":785,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5808:3:8","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"0x3"},"visibility":"internal"},{"constant":true,"id":789,"mutability":"constant","name":"MemoryExpansionCoefficientShift","nameLocation":"5830:31:8","nodeType":"VariableDeclaration","scope":870,"src":"5813:54:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":787,"name":"uint256","nodeType":"ElementaryTypeName","src":"5813:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"307839","id":788,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5864:3:8","typeDescriptions":{"typeIdentifier":"t_rational_9_by_1","typeString":"int_const 9"},"value":"0x9"},"visibility":"internal"},{"constant":true,"id":792,"mutability":"constant","name":"BatchTransfer1155Params_ptr","nameLocation":"5993:27:8","nodeType":"VariableDeclaration","scope":870,"src":"5976:51:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":790,"name":"uint256","nodeType":"ElementaryTypeName","src":"5976:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783234","id":791,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6023:4:8","typeDescriptions":{"typeIdentifier":"t_rational_36_by_1","typeString":"int_const 36"},"value":"0x24"},"visibility":"internal"},{"constant":true,"id":795,"mutability":"constant","name":"BatchTransfer1155Params_ids_head_ptr","nameLocation":"6046:36:8","nodeType":"VariableDeclaration","scope":870,"src":"6029:60:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":793,"name":"uint256","nodeType":"ElementaryTypeName","src":"6029:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783634","id":794,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6085:4:8","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"0x64"},"visibility":"internal"},{"constant":true,"id":798,"mutability":"constant","name":"BatchTransfer1155Params_amounts_head_ptr","nameLocation":"6108:40:8","nodeType":"VariableDeclaration","scope":870,"src":"6091:64:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":796,"name":"uint256","nodeType":"ElementaryTypeName","src":"6091:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783834","id":797,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6151:4:8","typeDescriptions":{"typeIdentifier":"t_rational_132_by_1","typeString":"int_const 132"},"value":"0x84"},"visibility":"internal"},{"constant":true,"id":801,"mutability":"constant","name":"BatchTransfer1155Params_data_head_ptr","nameLocation":"6174:37:8","nodeType":"VariableDeclaration","scope":870,"src":"6157:61:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":799,"name":"uint256","nodeType":"ElementaryTypeName","src":"6157:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30786134","id":800,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6214:4:8","typeDescriptions":{"typeIdentifier":"t_rational_164_by_1","typeString":"int_const 164"},"value":"0xa4"},"visibility":"internal"},{"constant":true,"id":804,"mutability":"constant","name":"BatchTransfer1155Params_data_length_basePtr","nameLocation":"6237:43:8","nodeType":"VariableDeclaration","scope":870,"src":"6220:67:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":802,"name":"uint256","nodeType":"ElementaryTypeName","src":"6220:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30786334","id":803,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6283:4:8","typeDescriptions":{"typeIdentifier":"t_rational_196_by_1","typeString":"int_const 196"},"value":"0xc4"},"visibility":"internal"},{"constant":true,"id":807,"mutability":"constant","name":"BatchTransfer1155Params_calldata_baseSize","nameLocation":"6306:41:8","nodeType":"VariableDeclaration","scope":870,"src":"6289:65:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":805,"name":"uint256","nodeType":"ElementaryTypeName","src":"6289:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30786334","id":806,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6350:4:8","typeDescriptions":{"typeIdentifier":"t_rational_196_by_1","typeString":"int_const 196"},"value":"0xc4"},"visibility":"internal"},{"constant":true,"id":810,"mutability":"constant","name":"BatchTransfer1155Params_ids_length_ptr","nameLocation":"6374:38:8","nodeType":"VariableDeclaration","scope":870,"src":"6357:62:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":808,"name":"uint256","nodeType":"ElementaryTypeName","src":"6357:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30786334","id":809,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6415:4:8","typeDescriptions":{"typeIdentifier":"t_rational_196_by_1","typeString":"int_const 196"},"value":"0xc4"},"visibility":"internal"},{"constant":true,"id":813,"mutability":"constant","name":"BatchTransfer1155Params_ids_length_offset","nameLocation":"6439:41:8","nodeType":"VariableDeclaration","scope":870,"src":"6422:65:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":811,"name":"uint256","nodeType":"ElementaryTypeName","src":"6422:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30786130","id":812,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6483:4:8","typeDescriptions":{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},"value":"0xa0"},"visibility":"internal"},{"constant":true,"id":816,"mutability":"constant","name":"ConduitBatch1155Transfer_usable_head_size","nameLocation":"6660:41:8","nodeType":"VariableDeclaration","scope":870,"src":"6643:65:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":814,"name":"uint256","nodeType":"ElementaryTypeName","src":"6643:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783830","id":815,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6704:4:8","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"0x80"},"visibility":"internal"},{"constant":true,"id":819,"mutability":"constant","name":"ConduitBatch1155Transfer_from_offset","nameLocation":"6728:36:8","nodeType":"VariableDeclaration","scope":870,"src":"6711:60:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":817,"name":"uint256","nodeType":"ElementaryTypeName","src":"6711:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783230","id":818,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6767:4:8","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"0x20"},"visibility":"internal"},{"constant":true,"id":822,"mutability":"constant","name":"ConduitBatch1155Transfer_ids_head_offset","nameLocation":"6790:40:8","nodeType":"VariableDeclaration","scope":870,"src":"6773:64:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":820,"name":"uint256","nodeType":"ElementaryTypeName","src":"6773:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783630","id":821,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6833:4:8","typeDescriptions":{"typeIdentifier":"t_rational_96_by_1","typeString":"int_const 96"},"value":"0x60"},"visibility":"internal"},{"constant":true,"id":825,"mutability":"constant","name":"ConduitBatch1155Transfer_ids_length_offset","nameLocation":"6929:42:8","nodeType":"VariableDeclaration","scope":870,"src":"6912:66:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":823,"name":"uint256","nodeType":"ElementaryTypeName","src":"6912:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30786130","id":824,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6974:4:8","typeDescriptions":{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},"value":"0xa0"},"visibility":"internal"},{"constant":true,"id":828,"mutability":"constant","name":"ConduitBatch1155Transfer_amounts_length_baseOffset","nameLocation":"6997:50:8","nodeType":"VariableDeclaration","scope":870,"src":"6980:74:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":826,"name":"uint256","nodeType":"ElementaryTypeName","src":"6980:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30786330","id":827,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7050:4:8","typeDescriptions":{"typeIdentifier":"t_rational_192_by_1","typeString":"int_const 192"},"value":"0xc0"},"visibility":"internal"},{"constant":true,"id":831,"mutability":"constant","name":"ConduitBatchTransfer_amounts_head_offset","nameLocation":"7224:40:8","nodeType":"VariableDeclaration","scope":870,"src":"7207:64:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":829,"name":"uint256","nodeType":"ElementaryTypeName","src":"7207:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783830","id":830,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7267:4:8","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"0x80"},"visibility":"internal"},{"constant":true,"id":834,"mutability":"constant","name":"Invalid1155BatchTransferEncoding_ptr","nameLocation":"7291:36:8","nodeType":"VariableDeclaration","scope":870,"src":"7274:60:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":832,"name":"uint256","nodeType":"ElementaryTypeName","src":"7274:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783030","id":833,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7330:4:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0x00"},"visibility":"internal"},{"constant":true,"id":837,"mutability":"constant","name":"Invalid1155BatchTransferEncoding_length","nameLocation":"7353:39:8","nodeType":"VariableDeclaration","scope":870,"src":"7336:63:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":835,"name":"uint256","nodeType":"ElementaryTypeName","src":"7336:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783034","id":836,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7395:4:8","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"0x04"},"visibility":"internal"},{"constant":true,"id":841,"mutability":"constant","name":"Invalid1155BatchTransferEncoding_selector","nameLocation":"7418:41:8","nodeType":"VariableDeclaration","scope":870,"src":"7401:135:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":838,"name":"uint256","nodeType":"ElementaryTypeName","src":"7401:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"components":[{"hexValue":"307865626132303834633030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030","id":839,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7468:66:8","typeDescriptions":{"typeIdentifier":"t_rational_106579805904488420557082595712554375541441034432625840267987479138441579462656_by_1","typeString":"int_const 1065...(70 digits omitted)...2656"},"value":"0xeba2084c00000000000000000000000000000000000000000000000000000000"}],"id":840,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"7462:74:8","typeDescriptions":{"typeIdentifier":"t_rational_106579805904488420557082595712554375541441034432625840267987479138441579462656_by_1","typeString":"int_const 1065...(70 digits omitted)...2656"}},"visibility":"internal"},{"constant":true,"id":845,"mutability":"constant","name":"ERC1155BatchTransferGenericFailure_error_signature","nameLocation":"7556:50:8","nodeType":"VariableDeclaration","scope":870,"src":"7539:144:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":842,"name":"uint256","nodeType":"ElementaryTypeName","src":"7539:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"components":[{"hexValue":"307861666334343565323030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030","id":843,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7615:66:8","typeDescriptions":{"typeIdentifier":"t_rational_79501532840214056618875980936328268319366216792329069890481479576950077915136_by_1","typeString":"int_const 7950...(69 digits omitted)...5136"},"value":"0xafc445e200000000000000000000000000000000000000000000000000000000"}],"id":844,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"7609:74:8","typeDescriptions":{"typeIdentifier":"t_rational_79501532840214056618875980936328268319366216792329069890481479576950077915136_by_1","typeString":"int_const 7950...(69 digits omitted)...5136"}},"visibility":"internal"},{"constant":true,"id":848,"mutability":"constant","name":"ERC1155BatchTransferGenericFailure_token_ptr","nameLocation":"7702:44:8","nodeType":"VariableDeclaration","scope":870,"src":"7685:68:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":846,"name":"uint256","nodeType":"ElementaryTypeName","src":"7685:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783034","id":847,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7749:4:8","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"0x04"},"visibility":"internal"},{"constant":true,"id":851,"mutability":"constant","name":"ERC1155BatchTransferGenericFailure_ids_offset","nameLocation":"7772:45:8","nodeType":"VariableDeclaration","scope":870,"src":"7755:69:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":849,"name":"uint256","nodeType":"ElementaryTypeName","src":"7755:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30786330","id":850,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7820:4:8","typeDescriptions":{"typeIdentifier":"t_rational_192_by_1","typeString":"int_const 192"},"value":"0xc0"},"visibility":"internal"},{"constant":true,"id":854,"mutability":"constant","name":"BadReturnValueFromERC20OnTransfer_error_selector","nameLocation":"8203:48:8","nodeType":"VariableDeclaration","scope":870,"src":"8186:78:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":852,"name":"uint256","nodeType":"ElementaryTypeName","src":"8186:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783938383931393233","id":853,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8254:10:8","typeDescriptions":{"typeIdentifier":"t_rational_2559121699_by_1","typeString":"int_const 2559121699"},"value":"0x98891923"},"visibility":"internal"},{"constant":true,"id":857,"mutability":"constant","name":"BadReturnValueFromERC20OnTransfer_error_token_ptr","nameLocation":"8283:49:8","nodeType":"VariableDeclaration","scope":870,"src":"8266:73:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":855,"name":"uint256","nodeType":"ElementaryTypeName","src":"8266:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783230","id":856,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8335:4:8","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"0x20"},"visibility":"internal"},{"constant":true,"id":860,"mutability":"constant","name":"BadReturnValueFromERC20OnTransfer_error_from_ptr","nameLocation":"8358:48:8","nodeType":"VariableDeclaration","scope":870,"src":"8341:72:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":858,"name":"uint256","nodeType":"ElementaryTypeName","src":"8341:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783430","id":859,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8409:4:8","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"0x40"},"visibility":"internal"},{"constant":true,"id":863,"mutability":"constant","name":"BadReturnValueFromERC20OnTransfer_error_to_ptr","nameLocation":"8432:46:8","nodeType":"VariableDeclaration","scope":870,"src":"8415:70:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":861,"name":"uint256","nodeType":"ElementaryTypeName","src":"8415:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783630","id":862,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8481:4:8","typeDescriptions":{"typeIdentifier":"t_rational_96_by_1","typeString":"int_const 96"},"value":"0x60"},"visibility":"internal"},{"constant":true,"id":866,"mutability":"constant","name":"BadReturnValueFromERC20OnTransfer_error_amount_ptr","nameLocation":"8504:50:8","nodeType":"VariableDeclaration","scope":870,"src":"8487:74:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":864,"name":"uint256","nodeType":"ElementaryTypeName","src":"8487:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783830","id":865,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8557:4:8","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"0x80"},"visibility":"internal"},{"constant":true,"id":869,"mutability":"constant","name":"BadReturnValueFromERC20OnTransfer_error_length","nameLocation":"8580:46:8","nodeType":"VariableDeclaration","scope":870,"src":"8563:70:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":867,"name":"uint256","nodeType":"ElementaryTypeName","src":"8563:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783834","id":868,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8629:4:8","typeDescriptions":{"typeIdentifier":"t_rational_132_by_1","typeString":"int_const 132"},"value":"0x84"},"visibility":"internal"}],"src":"32:8603:8"}}},"contracts":{"contracts/conduit/Conduit.sol":{"LocalConduit":{"abi":[{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"BadReturnValueFromERC20OnTransfer","type":"error"},{"inputs":[{"internalType":"address","name":"channel","type":"address"}],"name":"ChannelClosed","type":"error"},{"inputs":[{"internalType":"address","name":"channel","type":"address"},{"internalType":"bool","name":"isOpen","type":"bool"}],"name":"ChannelStatusAlreadySet","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"identifiers","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"ERC1155BatchTransferGenericFailure","type":"error"},{"inputs":[],"name":"Invalid1155BatchTransferEncoding","type":"error"},{"inputs":[],"name":"InvalidController","type":"error"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"InvalidERC721TransferAmount","type":"error"},{"inputs":[],"name":"InvalidItemType","type":"error"},{"inputs":[],"name":"MissingItemAmount","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NoContract","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"identifier","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"TokenTransferGenericFailure","type":"error"},{"inputs":[],"name":"UnusedItemParameters","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"channel","type":"address"},{"indexed":false,"internalType":"bool","name":"open","type":"bool"}],"name":"ChannelUpdated","type":"event"},{"inputs":[{"components":[{"internalType":"enum ConduitItemType","name":"itemType","type":"uint8"},{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"identifier","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct ConduitTransfer[]","name":"transfers","type":"tuple[]"}],"name":"execute","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"internalType":"struct ConduitBatch1155Transfer[]","name":"batchTransfers","type":"tuple[]"}],"name":"executeBatch1155","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"enum ConduitItemType","name":"itemType","type":"uint8"},{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"identifier","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct ConduitTransfer[]","name":"standardTransfers","type":"tuple[]"},{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"internalType":"struct ConduitBatch1155Transfer[]","name":"batchTransfers","type":"tuple[]"}],"name":"executeWithBatch1155","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"channel","type":"address"},{"internalType":"bool","name":"isOpen","type":"bool"}],"name":"updateChannel","outputs":[],"stateMutability":"nonpayable","type":"function"}],"metadata":{"optimizer_settings":"M3B3","solc_metadata":"{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BadReturnValueFromERC20OnTransfer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"channel\",\"type\":\"address\"}],\"name\":\"ChannelClosed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"channel\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"}],\"name\":\"ChannelStatusAlreadySet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"identifiers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"ERC1155BatchTransferGenericFailure\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Invalid1155BatchTransferEncoding\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidController\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InvalidERC721TransferAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidItemType\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MissingItemAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NoContract\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"identifier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenTransferGenericFailure\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnusedItemParameters\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"channel\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"}],\"name\":\"ChannelUpdated\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum ConduitItemType\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"identifier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ConduitTransfer[]\",\"name\":\"transfers\",\"type\":\"tuple[]\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ConduitBatch1155Transfer[]\",\"name\":\"batchTransfers\",\"type\":\"tuple[]\"}],\"name\":\"executeBatch1155\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum ConduitItemType\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"identifier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ConduitTransfer[]\",\"name\":\"standardTransfers\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ConduitBatch1155Transfer[]\",\"name\":\"batchTransfers\",\"type\":\"tuple[]\"}],\"name\":\"executeWithBatch1155\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"channel\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"}],\"name\":\"updateChannel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"0age\",\"errors\":{\"BadReturnValueFromERC20OnTransfer(address,address,address,uint256)\":[{\"details\":\"Revert with an error when an ERC20 token transfer returns a falsey      value.\",\"params\":{\"amount\":\"The amount for the attempted ERC20 transfer.\",\"from\":\"The source of the attempted ERC20 transfer.\",\"to\":\"The recipient of the attempted ERC20 transfer.\",\"token\":\"The token for which the ERC20 transfer was attempted.\"}}],\"ChannelClosed(address)\":[{\"details\":\"Revert with an error when attempting to execute transfers using a      caller that does not have an open channel.\"}],\"ChannelStatusAlreadySet(address,bool)\":[{\"details\":\"Revert with an error when attempting to update a channel to the      current status of that channel.\"}],\"ERC1155BatchTransferGenericFailure(address,address,address,uint256[],uint256[])\":[{\"details\":\"Revert with an error when a batch ERC1155 token transfer reverts.\",\"params\":{\"amounts\":\"The amounts for the attempted transfer.\",\"from\":\"The source of the attempted transfer.\",\"identifiers\":\"The identifiers for the attempted transfer.\",\"to\":\"The recipient of the attempted transfer.\",\"token\":\"The token for which the transfer was attempted.\"}}],\"Invalid1155BatchTransferEncoding()\":[{\"details\":\"Revert with an error when attempting to execute an 1155 batch      transfer using calldata not produced by default ABI encoding or with      different lengths for ids and amounts arrays.\"}],\"InvalidController()\":[{\"details\":\"Revert with an error when attempting to update the status of a      channel from a caller that is not the conduit controller.\"}],\"InvalidERC721TransferAmount(uint256)\":[{\"details\":\"Revert with an error when an ERC721 transfer with amount other than      one is attempted.\",\"params\":{\"amount\":\"The amount of the ERC721 tokens to transfer.\"}}],\"InvalidItemType()\":[{\"details\":\"Revert with an error when attempting to execute a transfer for an      item that does not have an ERC20/721/1155 item type.\"}],\"MissingItemAmount()\":[{\"details\":\"Revert with an error when attempting to fulfill an order where an      item has an amount of zero.\"}],\"NoContract(address)\":[{\"details\":\"Revert with an error when an account being called as an assumed      contract does not have code and returns no data.\",\"params\":{\"account\":\"The account that should contain code.\"}}],\"TokenTransferGenericFailure(address,address,address,uint256,uint256)\":[{\"details\":\"Revert with an error when an ERC20, ERC721, or ERC1155 token      transfer reverts.\",\"params\":{\"amount\":\"The amount for the attempted transfer.\",\"from\":\"The source of the attempted transfer.\",\"identifier\":\"The identifier for the attempted transfer.\",\"to\":\"The recipient of the attempted transfer.\",\"token\":\"The token for which the transfer was attempted.\"}}],\"UnusedItemParameters()\":[{\"details\":\"Revert with an error when attempting to fulfill an order where an      item has unused parameters. This includes both the token and the      identifier parameters for native transfers as well as the identifier      parameter for ERC20 transfers. Note that the conduit does not      perform this check, leaving it up to the calling channel to enforce      when desired.\"}]},\"kind\":\"dev\",\"methods\":{\"execute((uint8,address,address,address,uint256,uint256)[])\":{\"params\":{\"transfers\":\"The ERC20/721/1155 transfers to perform.\"},\"returns\":{\"magicValue\":\"A magic value indicating that the transfers were                    performed successfully.\"}},\"executeBatch1155((address,address,address,uint256[],uint256[])[])\":{\"params\":{\"batchTransfers\":\"The 1155 batch item transfers to perform.\"},\"returns\":{\"magicValue\":\"A magic value indicating that the item transfers were                    performed successfully.\"}},\"executeWithBatch1155((uint8,address,address,address,uint256,uint256)[],(address,address,address,uint256[],uint256[])[])\":{\"params\":{\"batchTransfers\":\"The 1155 batch item transfers to perform.\",\"standardTransfers\":\"The ERC20/721/1155 item transfers to perform.\"},\"returns\":{\"magicValue\":\"A magic value indicating that the item transfers were                    performed successfully.\"}},\"updateChannel(address,bool)\":{\"params\":{\"channel\":\"The channel to open or close.\",\"isOpen\":\"The status of the channel (either open or closed).\"}}},\"title\":\"Conduit\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"execute((uint8,address,address,address,uint256,uint256)[])\":{\"notice\":\"Execute a sequence of ERC20/721/1155 transfers. Only a caller         with an open channel can call this function. Note that channels         are expected to implement reentrancy protection if desired, and         that cross-channel reentrancy may be possible if the conduit has         multiple open channels at once. Also note that channels are         expected to implement checks against transferring any zero-amount         items if that constraint is desired.\"},\"executeBatch1155((address,address,address,uint256[],uint256[])[])\":{\"notice\":\"Execute a sequence of batch 1155 item transfers. Only a caller         with an open channel can call this function. Note that channels         are expected to implement reentrancy protection if desired, and         that cross-channel reentrancy may be possible if the conduit has         multiple open channels at once. Also note that channels are         expected to implement checks against transferring any zero-amount         items if that constraint is desired.\"},\"executeWithBatch1155((uint8,address,address,address,uint256,uint256)[],(address,address,address,uint256[],uint256[])[])\":{\"notice\":\"Execute a sequence of transfers, both single ERC20/721/1155 item         transfers as well as batch 1155 item transfers. Only a caller         with an open channel can call this function. Note that channels         are expected to implement reentrancy protection if desired, and         that cross-channel reentrancy may be possible if the conduit has         multiple open channels at once. Also note that channels are         expected to implement checks against transferring any zero-amount         items if that constraint is desired.\"},\"updateChannel(address,bool)\":{\"notice\":\"Open or close a given channel. Only callable by the controller.\"}},\"notice\":\"This contract serves as an originator for \\\"proxied\\\" transfers. Each         conduit is deployed and controlled by a \\\"conduit controller\\\" that can         add and remove \\\"channels\\\" or contracts that can instruct the conduit         to transfer approved ERC20/721/1155 tokens. *IMPORTANT NOTE: each         conduit has an owner that can arbitrarily add or remove channels, and         a malicious or negligent owner can add a channel that allows for any         approved ERC20/721/1155 tokens to be taken immediately \\u2014 be extremely         cautious with what conduits you give token approvals to!*\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/conduit/Conduit.sol\":\"LocalConduit\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/conduit/Conduit.sol\":{\"keccak256\":\"0x31f02521678bf63017a02be4bd8e4cf3393e5428854a5269b3a4012db1a3f5cc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://efc813585f46bb99f98d8b55de1040f6745bc320283e05b18383b31dbc2894bb\",\"dweb:/ipfs/QmZ3M4z5AgQ6SGy3eKumwvqmg6kCmpKiGyhjNDmaBZojUx\"]},\"seaport-core/src/conduit/Conduit.sol\":{\"keccak256\":\"0xec1cd6b6a0552c9d2a236fe1df562dc6795f2a35067120979ef299b13928ed75\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2d6255a857de2e49b15c01896f6e2b81c2bc8cae3d14562e3c8d42fb7949a098\",\"dweb:/ipfs/QmWLg6NE5gEEAPJR7UW21fzSFycapTSCEXdCr45FFuMr7q\"]},\"seaport-core/src/lib/TokenTransferrer.sol\":{\"keccak256\":\"0x02822d391094cc733a1215a9dcca933099592d4902e327832e7a4ddbfe910df1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7951093d038b3577c66febf10be0435b2c2093df55b03827406e130880dfa96b\",\"dweb:/ipfs/QmbjnYUwHbgU7jrbuLakh9FSkGcPNAxzH3TTRUoUEEFZdo\"]},\"seaport-types/src/conduit/lib/ConduitConstants.sol\":{\"keccak256\":\"0xf9d1a7d4c805e3851ddc7fb9329dab68745cd38833f20b473799f86df97b5c23\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8aa922f6e11d22005f4d61edc338b29177dae0fc50f86de226eca31969c1aa48\",\"dweb:/ipfs/QmT3gFEuLEZ4DYsAuhg4QVyG2iWLGmuT9cyreHYWnN7CfX\"]},\"seaport-types/src/conduit/lib/ConduitEnums.sol\":{\"keccak256\":\"0x1b24e84bbd29d52cebcb0bda26c8095c9d7a8e5719dd1b0e203315be0df4dcf7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://901be0c9ea392a69611b884985a772547e83ce78610a40e989216d842c8eb4b0\",\"dweb:/ipfs/QmPW1kDrkUEAvF6gy5FHsVmXNe2C1czAovXKL18T5jKiVx\"]},\"seaport-types/src/conduit/lib/ConduitStructs.sol\":{\"keccak256\":\"0xe765c83ddb65b13547db2914f7212689707fcd85c1bbe5c49dbe3e98c4942dd9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1318c90a615b9c2098c1f7435925c76913d2c54b79a53f8f64eae59d60ed5564\",\"dweb:/ipfs/QmXkTSAvkrMbrNLJjehm3JXeBoyW6dDYWRsdFkuDVb33sa\"]},\"seaport-types/src/interfaces/ConduitInterface.sol\":{\"keccak256\":\"0x5710e503e7550594cf98bade51646da1420d09c1b4758315484810df72d7cf64\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d3831fc9b36ce3760c39f60682487848f9678157794b995207f15d93ca1cc58a\",\"dweb:/ipfs/QmaapZB4DdYhUSkjySHJk9n7ajEfmX1hwWXWwEHAixYPQQ\"]},\"seaport-types/src/interfaces/TokenTransferrerErrors.sol\":{\"keccak256\":\"0x9ba38397a8b8e3c7d1119138ef452d1b801bdcf594699ba51a6b2858045b55e5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40919b9dfed2d2562ba8101bfc5e5333241dff9fc323b1cdb3d60a67820ebba4\",\"dweb:/ipfs/QmQTyJF7pkKpY1p3vrVpkQASbC8uYWKaEUMtRc5Y6UKZam\"]},\"seaport-types/src/lib/TokenTransferrerConstants.sol\":{\"keccak256\":\"0x0782f25dce0a09f772c39c41955ee1432d8a6a190100f3042c141c5d73c11905\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1f60c05c05862207f94f14c95d5973bd6d7e906f867b7cf1c3a0d42c492448c2\",\"dweb:/ipfs/QmPWnCPTPndMLHwjD69U58K7q6kKgQr9hxCXQ86X78vBNJ\"]}},\"version\":1}","zk_version":"1.3.16"},"evm":{"legacyAssembly":null,"assembly":"\t.text\n\t.file\t\"Conduit.sol:LocalConduit\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[14]\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r3, stack[@ptr_return_data]\n\tptr.add\tr1, r0, stack[@ptr_calldata]\n\tadd\t0, r0, stack[@returndatasize]\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_1\n\tadd\t128, r0, r2\n\tst.1\t64, r2\n\tsub.s!\t4, r3, r2\n\tjump.lt\t@.BB0_2\n\tld\tr1, r2\n\tshr.s\t224, r2, r2\n\tsub.s!\t@CPI0_2[0], r2, r4\n\tjump.gt\t@.BB0_8\n\tsub.s!\t@CPI0_5[0], r2, r4\n\tjump.eq\t@.BB0_10\n\tsub.s!\t@CPI0_6[0], r2, r2\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r3, r2\n\tsub.s!\t64, r2, r2\n\tjump.lt\t@.BB0_2\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r2\n\tsub.s!\t@CPI0_17[0], r2, r4\n\tjump.gt\t@.BB0_2\n\tadd\t35, r2, r4\n\tadd\t@CPI0_18[0], r0, r5\n\tsub!\tr4, r3, r6\n\tadd\tr0, r0, r6\n\tadd.ge\tr5, r0, r6\n\tand\t@CPI0_18[0], r4, r4\n\tsub!\tr4, r0, r7\n\tadd.ge\tr0, r0, r5\n\tsub.s!\t@CPI0_18[0], r4, r4\n\tadd\tr6, r0, r4\n\tadd.eq\tr5, r0, r4\n\tsub!\tr4, r0, r4\n\tjump.ne\t@.BB0_2\n\tadd\t4, r2, r4\n\tptr.add\tr1, r4, r4\n\tld\tr4, r4\n\tadd\tr4, r0, stack-[12]\n\tsub.s!\t@CPI0_17[0], r4, r4\n\tjump.gt\t@.BB0_2\n\tadd\t36, r2, stack-[11]\n\tadd\tstack-[12], r0, r2\n\tmul\t192, r2, r2, r4\n\tadd\tstack-[11], r2, r2\n\tsub!\tr2, r3, r2\n\tjump.gt\t@.BB0_2\n\tptr.add.s\t36, r1, r2\n\tld\tr2, r2\n\tsub.s!\t@CPI0_17[0], r2, r4\n\tjump.gt\t@.BB0_2\n\tadd\t35, r2, r4\n\tadd\t@CPI0_18[0], r0, r5\n\tsub!\tr4, r3, r6\n\tadd\tr0, r0, r6\n\tadd.ge\tr5, r0, r6\n\tand\t@CPI0_18[0], r4, r4\n\tsub!\tr4, r0, r7\n\tadd.ge\tr0, r0, r5\n\tsub.s!\t@CPI0_18[0], r4, r4\n\tadd\tr6, r0, r4\n\tadd.eq\tr5, r0, r4\n\tsub!\tr4, r0, r4\n\tjump.ne\t@.BB0_2\n\tadd\t4, r2, r4\n\tptr.add\tr1, r4, r1\n\tld\tr1, r1\n\tadd\tr1, r0, stack-[2]\n\tsub.s!\t@CPI0_17[0], r1, r1\n\tjump.gt\t@.BB0_2\n\tadd\t36, r2, stack-[1]\n\tadd\tstack-[2], r0, r1\n\tshl.s\t5, r1, r1\n\tadd\tstack-[1], r1, r1\n\tsub!\tr1, r3, r1\n\tjump.gt\t@.BB0_2\n\tcontext.caller\tr1\n\tadd\tr1, r0, stack-[14]\n\tst.1\t0, r1\n\tst.1\t32, r0\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.lt\tr2, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_12[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tsload\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_112\n\tjump\t@.BB0_21\n.BB0_1:\n\tadd\t160, r0, r1\n\tst.1\t64, r1\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tcontext.caller\tr1\n\tst.1\t128, r1\n\tst.2\t320, r0\n\tst.2\t352, r1\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tadd\t1, r0, r1\n\tst.2\t288, r1\n\tadd\t@CPI0_1[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_8:\n\tsub.s!\t@CPI0_3[0], r2, r4\n\tjump.eq\t@.BB0_187\n\tsub.s!\t@CPI0_4[0], r2, r2\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r3, r2\n\tsub.s!\t64, r2, r2\n\tjump.lt\t@.BB0_2\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r4\n\tsub.s!\t@CPI0_7[0], r4, r2\n\tjump.gt\t@.BB0_2\n\tptr.add.s\t36, r1, r1\n\tld\tr1, r2\n\tsub!\tr2, r0, r1\n\tadd\t0, r0, r1\n\tadd.ne\t1, r0, r1\n\tadd\tr2, r0, stack-[13]\n\tsub!\tr2, r1, r1\n\tjump.ne\t@.BB0_2\n\tadd\t@CPI0_8[0], r0, r1\n\tst.2\t0, r1\n\tcontext.code_source\tr1\n\tst.2\t4, r1\n\tst.2\t36, r0\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.lt\tr2, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_9[0], r1, r1\n\tadd\t32773, r0, r2\n\tadd\tr4, r0, stack-[14]\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[14], r0, r3\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tand\t@CPI0_7[0], r1, r1\n\tcontext.caller\tr2\n\tsub!\tr2, r1, r1\n\tjump.ne\t@.BB0_204\n\tst.1\t0, r3\n\tst.1\t32, r0\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.lt\tr2, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_12[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[14], r0, r3\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[13], r0, r4\n\tsub!\tr4, r0, r2\n\tadd\t0, r0, r2\n\tadd.ne\t1, r0, r2\n\tand\t1, r2, r2\n\tld\tr1, r1\n\tsload\tr1, r1\n\tand!\t255, r1, r1\n\tadd\t0, r0, r1\n\tadd.eq\t1, r0, r1\n\tand\t1, r1, r1\n\tsub!\tr2, r1, r1\n\tjump.eq\t@.BB0_208\n\tld.1\t64, r1\n\tadd\t36, r1, r2\n\tst.1\tr2, r4\n\tadd\t@CPI0_15[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t4, r1, r2\n\tst.1\tr2, r3\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI0_16[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_10:\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r3, r2\n\tsub.s!\t32, r2, r2\n\tjump.lt\t@.BB0_2\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r2\n\tsub.s!\t@CPI0_17[0], r2, r4\n\tjump.gt\t@.BB0_2\n\tadd\t35, r2, r4\n\tadd\t@CPI0_18[0], r0, r5\n\tsub!\tr4, r3, r6\n\tadd\tr0, r0, r6\n\tadd.ge\tr5, r0, r6\n\tand\t@CPI0_18[0], r4, r4\n\tsub!\tr4, r0, r7\n\tadd.ge\tr0, r0, r5\n\tsub.s!\t@CPI0_18[0], r4, r4\n\tadd\tr6, r0, r4\n\tadd.eq\tr5, r0, r4\n\tsub!\tr4, r0, r4\n\tjump.ne\t@.BB0_2\n\tadd\t4, r2, r4\n\tptr.add\tr1, r4, r1\n\tld\tr1, r1\n\tadd\tr1, r0, stack-[12]\n\tsub.s!\t@CPI0_17[0], r1, r1\n\tjump.gt\t@.BB0_2\n\tadd\t36, r2, stack-[11]\n\tadd\tstack-[12], r0, r1\n\tmul\t192, r1, r1, r2\n\tadd\tstack-[11], r1, r1\n\tsub!\tr1, r3, r1\n\tjump.gt\t@.BB0_2\n\tcontext.caller\tr1\n\tadd\tr1, r0, stack-[14]\n\tst.1\t0, r1\n\tst.1\t32, r0\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.lt\tr2, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_12[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tsload\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_18\n.BB0_21:\n\tadd\t@CPI0_21[0], r0, r1\n\tst.1\t0, r1\n\tadd\tstack-[14], r0, r1\n\tjump\t@.BB0_22\n.BB0_187:\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r3, r2\n\tsub.s!\t32, r2, r2\n\tjump.lt\t@.BB0_2\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r2\n\tsub.s!\t@CPI0_17[0], r2, r4\n\tjump.gt\t@.BB0_2\n\tadd\t35, r2, r4\n\tadd\t@CPI0_18[0], r0, r5\n\tsub!\tr4, r3, r6\n\tadd\tr0, r0, r6\n\tadd.ge\tr5, r0, r6\n\tand\t@CPI0_18[0], r4, r4\n\tsub!\tr4, r0, r7\n\tadd.ge\tr0, r0, r5\n\tsub.s!\t@CPI0_18[0], r4, r4\n\tadd\tr6, r0, r4\n\tadd.eq\tr5, r0, r4\n\tsub!\tr4, r0, r4\n\tjump.ne\t@.BB0_2\n\tadd\t4, r2, r4\n\tptr.add\tr1, r4, r1\n\tld\tr1, r4\n\tsub.s!\t@CPI0_17[0], r4, r1\n\tjump.gt\t@.BB0_2\n\tadd\t36, r2, r2\n\tshl.s\t5, r4, r1\n\tadd\tr1, r2, r1\n\tsub!\tr1, r3, r1\n\tjump.gt\t@.BB0_2\n\tcontext.caller\tr1\n\tadd\tr1, r0, stack-[12]\n\tst.1\t0, r1\n\tst.1\t32, r0\n\tadd\t@CPI0_0[0], r0, r1\n\tadd\tr2, r0, stack-[13]\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.lt\tr2, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_12[0], r1, r1\n\tadd\t32784, r0, r2\n\tadd\tr4, r0, stack-[14]\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[14], r0, r3\n\tand!\t1, r2, r2\n\tadd\tstack-[13], r0, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tsload\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_196\n\tadd\t@CPI0_21[0], r0, r1\n\tst.1\t0, r1\n\tadd\tstack-[12], r0, r1\n.BB0_22:\n\tst.1\t4, r1\n\tadd\t@CPI0_22[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_204:\n\tld.1\t64, r1\n\tadd\t@CPI0_10[0], r0, r2\n.BB0_28:\n\tst.1\tr1, r2\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI0_11[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_18:\n\tsub!\tstack-[12], r0, r1\n\tjump.ne\t@.BB0_19\n\tld.1\t64, r4\n.BB0_98:\n\tadd\t@CPI0_38[0], r0, r1\n\tst.1\tr4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r4, r2\n\tadd.lt\tr4, r0, r1\n\tjump\t@.BB0_99\n.BB0_196:\n\tadd\tr2, r0, r1\n\tadd\tr3, r0, r2\n\tnear_call\tr0, @fun_performERC1155BatchTransfers, @DEFAULT_UNWIND\n\tadd\t@CPI0_19[0], r0, r1\n.BB0_197:\n\tld.1\t64, r2\n\tst.1\tr2, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.lt\tr2, r0, r1\n.BB0_99:\n\tshl.s\t64, r1, r1\n\tor\t@CPI0_20[0], r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_208:\n\tst.1\t0, r3\n\tst.1\t32, r0\n\tadd\t@CPI0_0[0], r0, r3\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_12[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[14], r0, r5\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tsload\tr1, r2\n\tsub.s\t256, r0, r3\n\tand\tr2, r3, r2\n\tadd\tstack-[13], r0, r3\n\tor\tr2, r3, r2\n\tsstore\tr1, r2\n\tld.1\t64, r1\n\tst.1\tr1, r3\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd\t@CPI0_0[0], r0, r4\n\tadd.ge\tr4, r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr4, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_13[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t2, r0, r3\n\tadd\t@CPI0_14[0], r0, r4\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r1\n\tjump.eq\t@.BB0_2\n\tadd\t@CPI0_0[0], r0, r1\n\tld.1\t64, r2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.lt\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_19:\n\tadd\tr0, r0, r2\n\tjump\t@.BB0_23\n.BB0_47:\n\tst.1\t128, r7\n\tst.1\t160, r6\n\tst.1\t192, r5\n.BB0_97:\n\tst.1\t64, r4\n\tst.1\t96, r0\n\tadd\tstack-[14], r0, r2\n\tadd\t1, r2, r2\n\tsub.s!\tstack-[12], r2, r1\n\tjump.ge\t@.BB0_98\n.BB0_23:\n\tadd\tr2, r0, stack-[14]\n\tmul\t192, r2, r1, r2\n\tadd\tstack-[11], r1, r2\n\tptr.add\tstack[@ptr_calldata], r0, r1\n\tptr.add\tr1, r2, r3\n\tld\tr3, r3\n\tsub.s!\t3, r3, r4\n\tjump.gt\t@.BB0_2\n\tsub.s!\t1, r3, r4\n\tjump.ne\t@.BB0_25\n\tadd\t32, r2, r2\n\tptr.add\tr1, r2, r3\n\tld\tr3, r5\n\tsub.s!\t@CPI0_7[0], r5, r3\n\tjump.gt\t@.BB0_2\n\tadd\t32, r2, r2\n\tptr.add\tr1, r2, r3\n\tld\tr3, r6\n\tsub.s!\t@CPI0_7[0], r6, r3\n\tjump.gt\t@.BB0_2\n\tadd\t32, r2, r2\n\tptr.add\tr1, r2, r3\n\tld\tr3, r7\n\tsub.s!\t@CPI0_7[0], r7, r3\n\tjump.gt\t@.BB0_2\n\tadd\t64, r2, r2\n\tptr.add\tr1, r2, r1\n\tld\tr1, r2\n\tld.1\t64, r4\n\tadd\t@CPI0_32[0], r0, r1\n\tst.1\t0, r1\n\tst.1\t4, r6\n\tst.1\t36, r7\n\tadd\tr2, r0, stack-[7]\n\tst.1\t68, r2\n\tcontext.gas_left\tr1\n\tsub.s!\t4, r5, r2\n\tjump.ne\t@.BB0_73\n\tadd\t1, r0, r8\n\tadd\tstack[@returndatasize], r0, r3\n\tjump\t@.BB0_78\n.BB0_25:\n\tsub.s!\t2, r3, r4\n\tjump.ne\t@.BB0_26\n\tadd\t160, r2, r3\n\tptr.add\tr1, r3, r2\n\tld\tr2, r2\n\tsub.s!\t1, r2, r4\n\tjump.ne\t@.BB0_49\n\tsub.s\t128, r3, r2\n\tptr.add\tr1, r2, r3\n\tld\tr3, r4\n\tsub.s!\t@CPI0_7[0], r4, r3\n\tjump.gt\t@.BB0_2\n\tadd\t32, r2, r2\n\tptr.add\tr1, r2, r3\n\tld\tr3, r3\n\tadd\tr3, r0, stack-[9]\n\tsub.s!\t@CPI0_7[0], r3, r3\n\tjump.gt\t@.BB0_2\n\tadd\t32, r2, r2\n\tptr.add\tr1, r2, r3\n\tld\tr3, r3\n\tadd\tr3, r0, stack-[8]\n\tsub.s!\t@CPI0_7[0], r3, r3\n\tjump.gt\t@.BB0_2\n\tadd\t32, r2, r2\n\tptr.add\tr1, r2, r1\n\tld\tr1, r1\n\tadd\tr1, r0, stack-[7]\n\tadd\t@CPI0_23[0], r0, r1\n\tst.2\t0, r1\n\tst.2\t4, r4\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_24[0], r1, r1\n\tadd\t32770, r0, r2\n\tadd\tr4, r0, stack-[10]\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[10], r0, r3\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_55\n\tld.1\t64, r4\n\tadd\t@CPI0_32[0], r0, r1\n\tst.1\t0, r1\n\tadd\tstack-[9], r0, r1\n\tst.1\t4, r1\n\tadd\tstack-[8], r0, r1\n\tst.1\t36, r1\n\tadd\tstack-[7], r0, r1\n\tst.1\t68, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t4, r3, r2\n\tjump.eq\t@.BB0_97\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_33[0], r1, r1\n\tadd\tr3, r0, r2\n\tadd\tr4, r0, stack-[13]\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tstack-[13], r0, r4\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_97\n\tjump\t@.BB0_58\n.BB0_26:\n\tsub.s!\t3, r3, r3\n\tjump.ne\t@.BB0_27\n\tadd\t32, r2, r2\n\tptr.add\tr1, r2, r3\n\tld\tr3, r4\n\tsub.s!\t@CPI0_7[0], r4, r3\n\tjump.gt\t@.BB0_2\n\tadd\t32, r2, r2\n\tptr.add\tr1, r2, r3\n\tld\tr3, r3\n\tadd\tr3, r0, stack-[9]\n\tsub.s!\t@CPI0_7[0], r3, r3\n\tjump.gt\t@.BB0_2\n\tadd\t32, r2, r2\n\tptr.add\tr1, r2, r3\n\tld\tr3, r3\n\tadd\tr3, r0, stack-[8]\n\tsub.s!\t@CPI0_7[0], r3, r3\n\tjump.gt\t@.BB0_2\n\tadd\t64, r2, r3\n\tptr.add\tr1, r3, r3\n\tadd\t32, r2, r2\n\tptr.add\tr1, r2, r1\n\tld\tr1, r1\n\tadd\tr1, r0, stack-[6]\n\tld\tr3, r1\n\tadd\tr1, r0, stack-[7]\n\tadd\t@CPI0_23[0], r0, r1\n\tst.2\t0, r1\n\tst.2\t4, r4\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_24[0], r1, r1\n\tadd\t32770, r0, r2\n\tadd\tr4, r0, stack-[10]\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[10], r0, r3\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_34\n\tld.1\t192, r5\n\tld.1\t160, r6\n\tld.1\t128, r7\n\tld.1\t64, r4\n\tadd\t@CPI0_25[0], r0, r1\n\tst.1\t0, r1\n\tadd\tstack-[9], r0, r1\n\tst.1\t4, r1\n\tadd\tstack-[8], r0, r1\n\tst.1\t36, r1\n\tadd\tstack-[6], r0, r1\n\tst.1\t68, r1\n\tadd\tstack-[7], r0, r1\n\tst.1\t100, r1\n\tadd\t160, r0, r1\n\tst.1\t132, r1\n\tst.1\t164, r0\n\tcontext.gas_left\tr1\n\tsub.s!\t4, r3, r2\n\tjump.eq\t@.BB0_47\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_26[0], r1, r1\n\tadd\tr3, r0, r2\n\tadd\tr4, r0, stack-[13]\n\tadd\tr5, r0, stack-[5]\n\tadd\tr6, r0, stack-[4]\n\tadd\tr7, r0, stack-[3]\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tstack-[3], r0, r7\n\tadd\tstack-[4], r0, r6\n\tadd\tstack-[5], r0, r5\n\tadd\tstack-[13], r0, r4\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_47\n\tjump\t@.BB0_37\n.BB0_73:\n\tadd\tr7, r0, stack-[8]\n\tadd\tr6, r0, stack-[9]\n\tadd\tr4, r0, stack-[13]\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_33[0], r1, r1\n\tadd\tr5, r0, stack-[10]\n\tadd\tr5, r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t32, r3, r4\n\tadd\t32, r0, r5\n\tadd.lt\tr3, r0, r5\n\tshr.s!\t5, r5, r4\n\tjump.eq\t@.BB0_212\n\tadd\tr0, r0, r6\n.BB0_75:\n\tshl.s\t5, r6, r7\n\tptr.add\tr1, r7, r8\n\tld\tr8, r8\n\tst.1\tr7, r8\n\tadd\t1, r6, r6\n\tsub!\tr6, r4, r7\n\tjump.lt\t@.BB0_75\n.BB0_212:\n\tand!\t31, r5, r5\n\tjump.eq\t@.BB0_77\n\tshl.s\t3, r5, r5\n\tshl.s\t5, r4, r4\n\tld.1\tr4, r6\n\tshl\tr6, r5, r6\n\tshr\tr6, r5, r6\n\tptr.add\tr1, r4, r7\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r6, r5\n\tst.1\tr4, r5\n.BB0_77:\n\tand\t1, r2, r8\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tadd\tstack-[13], r0, r4\n\tadd\tstack-[10], r0, r5\n\tadd\tstack-[9], r0, r6\n\tadd\tstack-[8], r0, r7\n.BB0_78:\n\tld.1\t0, r1\n\tsub.s!\t1, r1, r1\n\tadd\t0, r0, r1\n\tadd.eq\t1, r0, r1\n\tsub.s!\t31, r3, r2\n\tadd\t0, r0, r2\n\tadd.gt\t1, r0, r2\n\tand\tr2, r1, r1\n\tsub!\tr3, r0, r2\n\tadd\t0, r0, r2\n\tadd.eq\t1, r0, r2\n\tor\tr2, r1, r1\n\tand\tr1, r8, r2\n\tadd\t0, r0, r1\n\tadd.ne\t1, r0, r1\n\tand!\tr2, r1, r1\n\tjump.ne\t@.BB0_97\n\tadd\tr2, r0, stack-[6]\n\tadd\tr8, r0, stack-[5]\n\tadd\tr4, r0, stack-[13]\n\tadd\t@CPI0_23[0], r0, r1\n\tst.2\t0, r1\n\tst.2\t4, r5\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_24[0], r1, r1\n\tadd\t32770, r0, r2\n\tadd\tr5, r0, stack-[10]\n\tadd\tr6, r0, stack-[9]\n\tadd\tr7, r0, stack-[8]\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tadd\t0, r0, r1\n\tadd.ne\t1, r0, r1\n\tadd\tstack-[6], r0, r2\n\tand!\tr2, r1, r1\n\tadd\tstack-[13], r0, r4\n\tjump.ne\t@.BB0_97\n\tsub!\tr2, r0, r1\n\tjump.ne\t@.BB0_83\n\tsub!\tstack-[5], r0, r1\n\tjump.ne\t@.BB0_85\n\tadd!\tstack[@returndatasize], r0, r1\n\tjump.eq\t@.BB0_87\n\tadd\t31, r1, r2\n\tshr.s\t5, r2, r3\n\tmul\t3, r3, r2, r4\n\tadd\tstack-[13], r0, r4\n\tshr.s\t5, r4, r4\n\tsub!\tr3, r4, r5\n\tjump.le\t@.BB0_91\n\tsub\tr3, r4, r5\n\tmul\t3, r5, r5, r6\n\tadd\tr5, r2, r2\n\tmul\tr4, r4, r4, r5\n\tmul\tr3, r3, r3, r5\n\tsub\tr3, r4, r3\n\tshr.s\t9, r3, r3\n\tadd\tr2, r3, r2\n.BB0_91:\n\tadd\t32, r2, r2\n\tcontext.gas_left\tr3\n\tsub!\tr2, r3, r2\n\tjump.ge\t@.BB0_87\n\tptr.add\tstack[@ptr_return_data], r0, r2\n\tand\t31, r1, r4\n\tshr.s!\t5, r1, r3\n\tjump.eq\t@.BB0_211\n\tadd\tr0, r0, r5\n.BB0_94:\n\tshl.s\t5, r5, r6\n\tptr.add\tr2, r6, r7\n\tld\tr7, r7\n\tst.1\tr6, r7\n\tadd\t1, r5, r5\n\tsub!\tr5, r3, r6\n\tjump.lt\t@.BB0_94\n.BB0_211:\n\tsub!\tr4, r0, r5\n\tjump.eq\t@.BB0_96\n\tshl.s\t3, r4, r4\n\tshl.s\t5, r3, r3\n\tld.1\tr3, r5\n\tshl\tr5, r4, r5\n\tshr\tr5, r4, r5\n\tptr.add\tr2, r3, r2\n\tld\tr2, r2\n\tsub\t256, r4, r4\n\tshr\tr2, r4, r2\n\tshl\tr2, r4, r2\n\tor\tr2, r5, r2\n\tst.1\tr3, r2\n\tjump\t@.BB0_96\n.BB0_112:\n\tsub!\tstack-[12], r0, r1\n\tjump.ne\t@.BB0_113\n.BB0_186:\n\tadd\tstack-[1], r0, r1\n\tadd\tstack-[2], r0, r2\n\tnear_call\tr0, @fun_performERC1155BatchTransfers, @DEFAULT_UNWIND\n\tadd\t@CPI0_36[0], r0, r1\n\tjump\t@.BB0_197\n.BB0_113:\n\tadd\tr0, r0, r2\n\tjump\t@.BB0_115\n.BB0_137:\n\tst.1\t128, r7\n\tst.1\t160, r6\n\tst.1\t192, r5\n.BB0_185:\n\tst.1\t64, r4\n\tst.1\t96, r0\n\tadd\tstack-[14], r0, r2\n\tadd\t1, r2, r2\n\tsub.s!\tstack-[12], r2, r1\n\tjump.ge\t@.BB0_186\n.BB0_115:\n\tadd\tr2, r0, stack-[14]\n\tmul\t192, r2, r1, r2\n\tadd\tstack-[11], r1, r2\n\tptr.add\tstack[@ptr_calldata], r0, r1\n\tptr.add\tr1, r2, r3\n\tld\tr3, r3\n\tsub.s!\t3, r3, r4\n\tjump.gt\t@.BB0_2\n\tsub.s!\t1, r3, r4\n\tjump.ne\t@.BB0_117\n\tadd\t32, r2, r2\n\tptr.add\tr1, r2, r3\n\tld\tr3, r5\n\tsub.s!\t@CPI0_7[0], r5, r3\n\tjump.gt\t@.BB0_2\n\tadd\t32, r2, r2\n\tptr.add\tr1, r2, r3\n\tld\tr3, r6\n\tsub.s!\t@CPI0_7[0], r6, r3\n\tjump.gt\t@.BB0_2\n\tadd\t32, r2, r2\n\tptr.add\tr1, r2, r3\n\tld\tr3, r7\n\tsub.s!\t@CPI0_7[0], r7, r3\n\tjump.gt\t@.BB0_2\n\tadd\t64, r2, r2\n\tptr.add\tr1, r2, r1\n\tld\tr1, r2\n\tld.1\t64, r4\n\tadd\t@CPI0_32[0], r0, r1\n\tst.1\t0, r1\n\tst.1\t4, r6\n\tst.1\t36, r7\n\tadd\tr2, r0, stack-[7]\n\tst.1\t68, r2\n\tcontext.gas_left\tr1\n\tsub.s!\t4, r5, r2\n\tjump.ne\t@.BB0_163\n\tadd\t1, r0, r8\n\tadd\tstack[@returndatasize], r0, r3\n\tjump\t@.BB0_168\n.BB0_117:\n\tsub.s!\t2, r3, r4\n\tjump.ne\t@.BB0_118\n\tadd\t160, r2, r3\n\tptr.add\tr1, r3, r2\n\tld\tr2, r2\n\tsub.s!\t1, r2, r4\n\tjump.ne\t@.BB0_139\n\tsub.s\t128, r3, r2\n\tptr.add\tr1, r2, r3\n\tld\tr3, r4\n\tsub.s!\t@CPI0_7[0], r4, r3\n\tjump.gt\t@.BB0_2\n\tadd\t32, r2, r2\n\tptr.add\tr1, r2, r3\n\tld\tr3, r3\n\tadd\tr3, r0, stack-[9]\n\tsub.s!\t@CPI0_7[0], r3, r3\n\tjump.gt\t@.BB0_2\n\tadd\t32, r2, r2\n\tptr.add\tr1, r2, r3\n\tld\tr3, r3\n\tadd\tr3, r0, stack-[8]\n\tsub.s!\t@CPI0_7[0], r3, r3\n\tjump.gt\t@.BB0_2\n\tadd\t32, r2, r2\n\tptr.add\tr1, r2, r1\n\tld\tr1, r1\n\tadd\tr1, r0, stack-[7]\n\tadd\t@CPI0_23[0], r0, r1\n\tst.2\t0, r1\n\tst.2\t4, r4\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_24[0], r1, r1\n\tadd\t32770, r0, r2\n\tadd\tr4, r0, stack-[10]\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[10], r0, r3\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_145\n\tld.1\t64, r4\n\tadd\t@CPI0_32[0], r0, r1\n\tst.1\t0, r1\n\tadd\tstack-[9], r0, r1\n\tst.1\t4, r1\n\tadd\tstack-[8], r0, r1\n\tst.1\t36, r1\n\tadd\tstack-[7], r0, r1\n\tst.1\t68, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t4, r3, r2\n\tjump.eq\t@.BB0_185\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_33[0], r1, r1\n\tadd\tr3, r0, r2\n\tadd\tr4, r0, stack-[13]\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tstack-[13], r0, r4\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_185\n\tjump\t@.BB0_148\n.BB0_118:\n\tsub.s!\t3, r3, r3\n\tjump.ne\t@.BB0_27\n\tadd\t32, r2, r2\n\tptr.add\tr1, r2, r3\n\tld\tr3, r4\n\tsub.s!\t@CPI0_7[0], r4, r3\n\tjump.gt\t@.BB0_2\n\tadd\t32, r2, r2\n\tptr.add\tr1, r2, r3\n\tld\tr3, r3\n\tadd\tr3, r0, stack-[9]\n\tsub.s!\t@CPI0_7[0], r3, r3\n\tjump.gt\t@.BB0_2\n\tadd\t32, r2, r2\n\tptr.add\tr1, r2, r3\n\tld\tr3, r3\n\tadd\tr3, r0, stack-[8]\n\tsub.s!\t@CPI0_7[0], r3, r3\n\tjump.gt\t@.BB0_2\n\tadd\t64, r2, r3\n\tptr.add\tr1, r3, r3\n\tadd\t32, r2, r2\n\tptr.add\tr1, r2, r1\n\tld\tr1, r1\n\tadd\tr1, r0, stack-[6]\n\tld\tr3, r1\n\tadd\tr1, r0, stack-[7]\n\tadd\t@CPI0_23[0], r0, r1\n\tst.2\t0, r1\n\tst.2\t4, r4\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_24[0], r1, r1\n\tadd\t32770, r0, r2\n\tadd\tr4, r0, stack-[10]\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[10], r0, r3\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_124\n\tld.1\t192, r5\n\tld.1\t160, r6\n\tld.1\t128, r7\n\tld.1\t64, r4\n\tadd\t@CPI0_25[0], r0, r1\n\tst.1\t0, r1\n\tadd\tstack-[9], r0, r1\n\tst.1\t4, r1\n\tadd\tstack-[8], r0, r1\n\tst.1\t36, r1\n\tadd\tstack-[6], r0, r1\n\tst.1\t68, r1\n\tadd\tstack-[7], r0, r1\n\tst.1\t100, r1\n\tadd\t160, r0, r1\n\tst.1\t132, r1\n\tst.1\t164, r0\n\tcontext.gas_left\tr1\n\tsub.s!\t4, r3, r2\n\tjump.eq\t@.BB0_137\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_26[0], r1, r1\n\tadd\tr3, r0, r2\n\tadd\tr4, r0, stack-[13]\n\tadd\tr5, r0, stack-[5]\n\tadd\tr6, r0, stack-[4]\n\tadd\tr7, r0, stack-[3]\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tstack-[3], r0, r7\n\tadd\tstack-[4], r0, r6\n\tadd\tstack-[5], r0, r5\n\tadd\tstack-[13], r0, r4\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_137\n\tjump\t@.BB0_127\n.BB0_163:\n\tadd\tr7, r0, stack-[8]\n\tadd\tr6, r0, stack-[9]\n\tadd\tr4, r0, stack-[13]\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_33[0], r1, r1\n\tadd\tr5, r0, stack-[10]\n\tadd\tr5, r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t32, r3, r4\n\tadd\t32, r0, r5\n\tadd.lt\tr3, r0, r5\n\tshr.s!\t5, r5, r4\n\tjump.eq\t@.BB0_216\n\tadd\tr0, r0, r6\n.BB0_165:\n\tshl.s\t5, r6, r7\n\tptr.add\tr1, r7, r8\n\tld\tr8, r8\n\tst.1\tr7, r8\n\tadd\t1, r6, r6\n\tsub!\tr6, r4, r7\n\tjump.lt\t@.BB0_165\n.BB0_216:\n\tand!\t31, r5, r5\n\tjump.eq\t@.BB0_167\n\tshl.s\t3, r5, r5\n\tshl.s\t5, r4, r4\n\tld.1\tr4, r6\n\tshl\tr6, r5, r6\n\tshr\tr6, r5, r6\n\tptr.add\tr1, r4, r7\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r6, r5\n\tst.1\tr4, r5\n.BB0_167:\n\tand\t1, r2, r8\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tadd\tstack-[13], r0, r4\n\tadd\tstack-[10], r0, r5\n\tadd\tstack-[9], r0, r6\n\tadd\tstack-[8], r0, r7\n.BB0_168:\n\tld.1\t0, r1\n\tsub.s!\t1, r1, r1\n\tadd\t0, r0, r1\n\tadd.eq\t1, r0, r1\n\tsub.s!\t31, r3, r2\n\tadd\t0, r0, r2\n\tadd.gt\t1, r0, r2\n\tand\tr2, r1, r1\n\tsub!\tr3, r0, r2\n\tadd\t0, r0, r2\n\tadd.eq\t1, r0, r2\n\tor\tr2, r1, r1\n\tand\tr1, r8, r2\n\tadd\t0, r0, r1\n\tadd.ne\t1, r0, r1\n\tand!\tr2, r1, r1\n\tjump.ne\t@.BB0_185\n\tadd\tr2, r0, stack-[6]\n\tadd\tr8, r0, stack-[5]\n\tadd\tr4, r0, stack-[13]\n\tadd\t@CPI0_23[0], r0, r1\n\tst.2\t0, r1\n\tst.2\t4, r5\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_24[0], r1, r1\n\tadd\t32770, r0, r2\n\tadd\tr5, r0, stack-[10]\n\tadd\tr6, r0, stack-[9]\n\tadd\tr7, r0, stack-[8]\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tadd\t0, r0, r1\n\tadd.ne\t1, r0, r1\n\tadd\tstack-[6], r0, r2\n\tand!\tr2, r1, r1\n\tadd\tstack-[13], r0, r4\n\tjump.ne\t@.BB0_185\n\tsub!\tr2, r0, r1\n\tjump.ne\t@.BB0_173\n\tsub!\tstack-[5], r0, r1\n\tjump.ne\t@.BB0_175\n\tadd!\tstack[@returndatasize], r0, r1\n\tjump.eq\t@.BB0_177\n\tadd\t31, r1, r2\n\tshr.s\t5, r2, r3\n\tmul\t3, r3, r2, r4\n\tadd\tstack-[13], r0, r4\n\tshr.s\t5, r4, r4\n\tsub!\tr3, r4, r5\n\tjump.le\t@.BB0_179\n\tsub\tr3, r4, r5\n\tmul\t3, r5, r5, r6\n\tadd\tr5, r2, r2\n\tmul\tr4, r4, r4, r5\n\tmul\tr3, r3, r3, r5\n\tsub\tr3, r4, r3\n\tshr.s\t9, r3, r3\n\tadd\tr2, r3, r2\n.BB0_179:\n\tadd\t32, r2, r2\n\tcontext.gas_left\tr3\n\tsub!\tr2, r3, r2\n\tjump.ge\t@.BB0_177\n\tptr.add\tstack[@ptr_return_data], r0, r2\n\tand\t31, r1, r4\n\tshr.s!\t5, r1, r3\n\tjump.eq\t@.BB0_215\n\tadd\tr0, r0, r5\n.BB0_182:\n\tshl.s\t5, r5, r6\n\tptr.add\tr2, r6, r7\n\tld\tr7, r7\n\tst.1\tr6, r7\n\tadd\t1, r5, r5\n\tsub!\tr5, r3, r6\n\tjump.lt\t@.BB0_182\n.BB0_215:\n\tsub!\tr4, r0, r5\n\tjump.eq\t@.BB0_184\n\tshl.s\t3, r4, r4\n\tshl.s\t5, r3, r3\n\tld.1\tr3, r5\n\tshl\tr5, r4, r5\n\tshr\tr5, r4, r5\n\tptr.add\tr2, r3, r2\n\tld\tr2, r2\n\tsub\t256, r4, r4\n\tshr\tr2, r4, r2\n\tshl\tr2, r4, r2\n\tor\tr2, r5, r2\n\tst.1\tr3, r2\n.BB0_184:\n.BB0_96:\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t96, r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_27:\n\tld.1\t64, r1\n\tadd\t@CPI0_37[0], r0, r2\n\tjump\t@.BB0_28\n.BB0_55:\n.BB0_34:\n\tadd\t@CPI0_29[0], r0, r1\n\tst.1\t0, r1\n\tst.1\t32, r3\n\tadd\t@CPI0_30[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_58:\n\tsub!\tr3, r0, r2\n\tjump.eq\t@.BB0_60\n\tadd\t31, r3, r2\n\tshr.s\t5, r2, r4\n\tmul\t3, r4, r2, r5\n\tadd\tstack-[13], r0, r5\n\tshr.s\t5, r5, r5\n\tsub!\tr4, r5, r6\n\tjump.le\t@.BB0_62\n\tsub\tr4, r5, r6\n\tmul\t3, r6, r6, r7\n\tadd\tr6, r2, r2\n\tmul\tr5, r5, r5, r6\n\tmul\tr4, r4, r4, r6\n\tsub\tr4, r5, r4\n\tshr.s\t9, r4, r4\n\tadd\tr2, r4, r2\n.BB0_62:\n\tadd\t32, r2, r2\n\tcontext.gas_left\tr4\n\tsub!\tr2, r4, r2\n\tjump.ge\t@.BB0_60\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r2\n\tjump.eq\t@.BB0_213\n\tadd\tr0, r0, r5\n.BB0_65:\n\tshl.s\t5, r5, r6\n\tptr.add\tr1, r6, r7\n\tld\tr7, r7\n\tst.1\tr6, r7\n\tadd\t1, r5, r5\n\tsub!\tr5, r2, r6\n\tjump.lt\t@.BB0_65\n.BB0_213:\n\tsub!\tr4, r0, r5\n\tjump.eq\t@.BB0_67\n\tshl.s\t3, r4, r4\n\tshl.s\t5, r2, r2\n\tld.1\tr2, r5\n\tshl\tr5, r4, r5\n\tshr\tr5, r4, r5\n\tptr.add\tr1, r2, r1\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r5, r1\n\tst.1\tr2, r1\n.BB0_67:\n\tshl.s\t96, r3, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_37:\n\tsub!\tr3, r0, r2\n\tjump.eq\t@.BB0_39\n\tadd\t31, r3, r2\n\tshr.s\t5, r2, r4\n\tmul\t3, r4, r2, r5\n\tadd\tstack-[13], r0, r5\n\tshr.s\t5, r5, r5\n\tsub!\tr4, r5, r6\n\tjump.le\t@.BB0_41\n\tsub\tr4, r5, r6\n\tmul\t3, r6, r6, r7\n\tadd\tr6, r2, r2\n\tmul\tr5, r5, r5, r6\n\tmul\tr4, r4, r4, r6\n\tsub\tr4, r5, r4\n\tshr.s\t9, r4, r4\n\tadd\tr2, r4, r2\n.BB0_41:\n\tadd\t32, r2, r2\n\tcontext.gas_left\tr4\n\tsub!\tr2, r4, r2\n\tjump.ge\t@.BB0_39\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r2\n\tjump.eq\t@.BB0_214\n\tadd\tr0, r0, r5\n.BB0_44:\n\tshl.s\t5, r5, r6\n\tptr.add\tr1, r6, r7\n\tld\tr7, r7\n\tst.1\tr6, r7\n\tadd\t1, r5, r5\n\tsub!\tr5, r2, r6\n\tjump.lt\t@.BB0_44\n.BB0_214:\n\tsub!\tr4, r0, r5\n\tjump.eq\t@.BB0_46\n\tshl.s\t3, r4, r4\n\tshl.s\t5, r2, r2\n\tld.1\tr2, r5\n\tshl\tr5, r4, r5\n\tshr\tr5, r4, r5\n\tptr.add\tr1, r2, r1\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r5, r1\n\tst.1\tr2, r1\n.BB0_46:\n\tshl.s\t96, r3, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_139:\n.BB0_49:\n\tld.1\t64, r1\n\tadd\t@CPI0_31[0], r0, r3\n\tst.1\tr1, r3\n\tadd\t4, r1, r3\n\tst.1\tr3, r2\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI0_22[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_145:\n\tjump\t@.BB0_34\n.BB0_124:\n\tjump\t@.BB0_34\n.BB0_148:\n\tsub!\tr3, r0, r2\n\tjump.eq\t@.BB0_150\n\tadd\t31, r3, r2\n\tshr.s\t5, r2, r4\n\tmul\t3, r4, r2, r5\n\tadd\tstack-[13], r0, r5\n\tshr.s\t5, r5, r5\n\tsub!\tr4, r5, r6\n\tjump.le\t@.BB0_152\n\tsub\tr4, r5, r6\n\tmul\t3, r6, r6, r7\n\tadd\tr6, r2, r2\n\tmul\tr5, r5, r5, r6\n\tmul\tr4, r4, r4, r6\n\tsub\tr4, r5, r4\n\tshr.s\t9, r4, r4\n\tadd\tr2, r4, r2\n.BB0_152:\n\tadd\t32, r2, r2\n\tcontext.gas_left\tr4\n\tsub!\tr2, r4, r2\n\tjump.ge\t@.BB0_150\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r2\n\tjump.eq\t@.BB0_217\n\tadd\tr0, r0, r5\n.BB0_155:\n\tshl.s\t5, r5, r6\n\tptr.add\tr1, r6, r7\n\tld\tr7, r7\n\tst.1\tr6, r7\n\tadd\t1, r5, r5\n\tsub!\tr5, r2, r6\n\tjump.lt\t@.BB0_155\n.BB0_217:\n\tsub!\tr4, r0, r5\n\tjump.eq\t@.BB0_157\n\tshl.s\t3, r4, r4\n\tshl.s\t5, r2, r2\n\tld.1\tr2, r5\n\tshl\tr5, r4, r5\n\tshr\tr5, r4, r5\n\tptr.add\tr1, r2, r1\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r5, r1\n\tst.1\tr2, r1\n.BB0_157:\n\tshl.s\t96, r3, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_127:\n\tsub!\tr3, r0, r2\n\tjump.eq\t@.BB0_129\n\tadd\t31, r3, r2\n\tshr.s\t5, r2, r4\n\tmul\t3, r4, r2, r5\n\tadd\tstack-[13], r0, r5\n\tshr.s\t5, r5, r5\n\tsub!\tr4, r5, r6\n\tjump.le\t@.BB0_131\n\tsub\tr4, r5, r6\n\tmul\t3, r6, r6, r7\n\tadd\tr6, r2, r2\n\tmul\tr5, r5, r5, r6\n\tmul\tr4, r4, r4, r6\n\tsub\tr4, r5, r4\n\tshr.s\t9, r4, r4\n\tadd\tr2, r4, r2\n.BB0_131:\n\tadd\t32, r2, r2\n\tcontext.gas_left\tr4\n\tsub!\tr2, r4, r2\n\tjump.ge\t@.BB0_129\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r2\n\tjump.eq\t@.BB0_218\n\tadd\tr0, r0, r5\n.BB0_134:\n\tshl.s\t5, r5, r6\n\tptr.add\tr1, r6, r7\n\tld\tr7, r7\n\tst.1\tr6, r7\n\tadd\t1, r5, r5\n\tsub!\tr5, r2, r6\n\tjump.lt\t@.BB0_134\n.BB0_218:\n\tsub!\tr4, r0, r5\n\tjump.eq\t@.BB0_136\n\tshl.s\t3, r4, r4\n\tshl.s\t5, r2, r2\n\tld.1\tr2, r5\n\tshl\tr5, r4, r5\n\tshr\tr5, r4, r5\n\tptr.add\tr1, r2, r1\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r5, r1\n\tst.1\tr2, r1\n.BB0_136:\n\tshl.s\t96, r3, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_173:\n.BB0_83:\n\tadd\t@CPI0_29[0], r0, r1\n\tst.1\t0, r1\n\tadd\tstack-[10], r0, r1\n\tst.1\t32, r1\n\tadd\t@CPI0_30[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_150:\n.BB0_60:\n\tadd\t@CPI0_27[0], r0, r1\n\tst.1\t0, r1\n\tadd\tstack-[10], r0, r1\n\tst.1\t32, r1\n\tadd\tstack-[9], r0, r1\n\tst.1\t64, r1\n\tadd\tstack-[8], r0, r1\n\tst.1\t96, r1\n\tadd\tstack-[7], r0, r1\n\tst.1\t128, r1\n\tadd\t1, r0, r1\n\tjump\t@.BB0_89\n.BB0_129:\n.BB0_39:\n\tadd\t@CPI0_27[0], r0, r1\n\tst.1\t0, r1\n\tadd\tstack-[10], r0, r1\n\tst.1\t32, r1\n\tadd\tstack-[9], r0, r1\n\tst.1\t64, r1\n\tadd\tstack-[8], r0, r1\n\tst.1\t96, r1\n\tadd\tstack-[6], r0, r1\n\tst.1\t128, r1\n\tjump\t@.BB0_88\n.BB0_175:\n.BB0_85:\n\tadd\t@CPI0_34[0], r0, r1\n\tst.1\t0, r1\n\tadd\tstack-[10], r0, r1\n\tst.1\t32, r1\n\tadd\tstack-[9], r0, r1\n\tst.1\t64, r1\n\tadd\tstack-[8], r0, r1\n\tst.1\t96, r1\n\tadd\tstack-[7], r0, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_35[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_177:\n.BB0_87:\n\tadd\t@CPI0_27[0], r0, r1\n\tst.1\t0, r1\n\tadd\tstack-[10], r0, r1\n\tst.1\t32, r1\n\tadd\tstack-[9], r0, r1\n\tst.1\t64, r1\n\tadd\tstack-[8], r0, r1\n\tst.1\t96, r1\n\tst.1\t128, r0\n.BB0_88:\n\tadd\tstack-[7], r0, r1\n.BB0_89:\n\tst.1\t160, r1\n\tadd\t@CPI0_28[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end0:\n\nfun_performERC1155BatchTransfers:\n.func_begin1:\n\tnop\tstack+=[8]\n\tadd\tr1, r0, stack-[4]\n\tadd\t@CPI1_0[0], r0, r1\n\tst.1\t32, r1\n\tadd\tr2, r0, stack-[3]\n\tsub!\tr2, r0, r1\n\tjump.eq\t@.BB1_5\n\tptr.add\tstack[@ptr_calldata], r0, r3\n\tadd\t32770, r0, stack-[2]\n\tadd\tr0, r0, r2\n\tadd\tstack-[4], r0, r8\n\tjump\t@.BB1_2\n.BB1_20:\n\tadd\tstack-[5], r0, r2\n\tadd\t1, r2, r2\n\tsub.s!\tstack-[3], r2, r1\n\tjump.ge\t@.BB1_5\n.BB1_2:\n\tadd\tr2, r0, stack-[5]\n\tadd\tr8, r0, stack-[8]\n\tptr.add\tr3, r8, r1\n\tld\tr1, r1\n\tadd\tstack-[4], r1, stack-[6]\n\tptr.add.s\tstack-[6], r3, r1\n\tld\tr1, r1\n\tadd\t@CPI1_1[0], r0, r2\n\tst.2\t0, r2\n\tadd\tr1, r0, stack-[7]\n\tst.2\t4, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI1_2[0], r1, r2\n\tadd.ge\t@CPI1_2[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI1_3[0], r1, r1\n\tadd\tstack-[2], r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB1_3\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB1_6\n\tadd\tstack-[6], r0, r7\n\tadd\t160, r7, r1\n\tptr.add\tstack[@ptr_calldata], r0, r3\n\tptr.add\tr3, r1, r1\n\tld\tr1, r2\n\tshl.s\t5, r2, r4\n\tadd\t192, r4, r5\n\tadd\tr5, r7, r6\n\tadd\t96, r7, r4\n\tadd\t128, r7, r7\n\tptr.add\tr3, r6, r8\n\tptr.add\tr3, r7, r6\n\tptr.add\tr3, r4, r7\n\tld\tr6, r6\n\tld\tr7, r7\n\tld\tr8, r8\n\tsub!\tr2, r8, r8\n\tjump.ne\t@.BB1_10\n\tsub.s!\t160, r7, r7\n\tjump.ne\t@.BB1_10\n\tsub!\tr6, r5, r5\n\tjump.ne\t@.BB1_10\n\tsub.s\t64, r4, r4\n\tptr.add\tr3, r4, r4\n\tadd\t36, r0, r5\n\tadd\tstack-[8], r0, r8\n\tadd\t32, r8, r8\n\tadd\tr0, r0, r6\n.BB1_12:\n\tshl.s\t5, r6, r7\n\tptr.add\tr4, r7, r7\n\tld\tr7, r7\n\tst.1.inc\tr5, r7, r5\n\tadd\t1, r6, r6\n\tsub.s!\t4, r6, r7\n\tjump.lt\t@.BB1_12\n\tshl.s\t6, r2, r2\n\tadd\t224, r2, r4\n\tst.1\t164, r4\n\tadd\t260, r2, r7\n\tst.1\tr7, r0\n\tadd\t64, r2, r2\n\tshr.s!\t5, r2, r2\n\tjump.eq\t@.BB1_31\n\tadd\tr0, r0, r4\n.BB1_15:\n\tshl.s\t5, r4, r5\n\tptr.add\tr1, r5, r6\n\tld\tr6, r6\n\tadd\t196, r5, r5\n\tst.1\tr5, r6\n\tadd\t1, r4, r4\n\tsub!\tr4, r2, r5\n\tjump.lt\t@.BB1_15\n.BB1_31:\n\tsub!\tr0, r0, r1\n\tjump.eq\t@.BB1_17\n.BB1_17:\n\tcontext.gas_left\tr1\n\tadd\tstack-[7], r0, r2\n\tsub.s!\t4, r2, r4\n\tjump.eq\t@.BB1_20\n\tsub.s!\t@CPI1_2[0], r1, r3\n\tadd\t@CPI1_2[0], r0, r4\n\tadd.ge\tr4, r0, r1\n\tsub.s!\t@CPI1_2[0], r7, r3\n\tadd\tr4, r0, r3\n\tadd.lt\tr7, r0, r3\n\tshl.s\t96, r3, stack-[6]\n\tshl.s\t192, r1, r1\n\tor\tstack-[6], r1, r1\n\tor\t@CPI1_6[0], r1, r1\n\tadd\tr8, r0, stack-[8]\n\tadd\tr7, r0, stack-[1]\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tstack-[8], r0, r8\n\tptr.add\tstack[@ptr_calldata], r0, r3\n\tadd\tr1, r0, r4\n\tshr.s\t96, r4, r4\n\tand\t@CPI1_2[0], r4, stack[@returndatasize]\n\tand\t@CPI1_2[0], r4, r4\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB1_20\n\tadd\tstack-[6], r0, r8\n\tsub!\tr4, r0, r2\n\tjump.eq\t@.BB1_22\n\tadd\t31, r4, r2\n\tshr.s\t5, r2, r3\n\tmul\t3, r3, r2, r5\n\tadd\tstack-[1], r0, r5\n\tshr.s\t5, r5, r5\n\tsub!\tr3, r5, r6\n\tjump.le\t@.BB1_24\n\tsub\tr3, r5, r6\n\tmul\t3, r6, r6, r7\n\tadd\tr6, r2, r2\n\tmul\tr5, r5, r5, r6\n\tmul\tr3, r3, r3, r6\n\tsub\tr3, r5, r3\n\tshr.s\t9, r3, r3\n\tadd\tr2, r3, r2\n.BB1_24:\n\tadd\t32, r2, r2\n\tcontext.gas_left\tr3\n\tsub!\tr2, r3, r2\n\tjump.ge\t@.BB1_22\n\tand\t31, r4, r3\n\tshr.s!\t5, r4, r2\n\tjump.eq\t@.BB1_30\n\tadd\tr0, r0, r5\n.BB1_27:\n\tshl.s\t5, r5, r6\n\tptr.add\tr1, r6, r7\n\tld\tr7, r7\n\tst.1\tr6, r7\n\tadd\t1, r5, r5\n\tsub!\tr5, r2, r6\n\tjump.lt\t@.BB1_27\n.BB1_30:\n\tsub!\tr3, r0, r5\n\tjump.eq\t@.BB1_29\n\tshl.s\t3, r3, r3\n\tshl.s\t5, r2, r2\n\tld.1\tr2, r5\n\tshl\tr5, r3, r5\n\tshr\tr5, r3, r5\n\tptr.add\tr1, r2, r1\n\tld\tr1, r1\n\tsub\t256, r3, r3\n\tshr\tr1, r3, r1\n\tshl\tr1, r3, r1\n\tor\tr1, r5, r1\n\tst.1\tr2, r1\n.BB1_29:\n\tshl.s\t96, r4, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB1_5:\n\tadd\t128, r0, r1\n\tst.1\t64, r1\n\tret\n.BB1_3:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB1_6:\n\tadd\t@CPI1_8[0], r0, r1\n\tst.1\t0, r1\n\tadd\tstack-[7], r0, r1\n\tst.1\t32, r1\n\tadd\t@CPI1_9[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB1_10:\n\tadd\t@CPI1_4[0], r0, r1\n\tst.1\t0, r1\n\tadd\t@CPI1_5[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB1_22:\n\tadd\t@CPI1_7[0], r0, r1\n\tst.1\t0, r1\n\tadd\tstack-[7], r0, r1\n\tst.1\t4, r1\n\tadd\t192, r0, r1\n\tst.1\t100, r1\n\tld.1\t132, r1\n\tadd\t32, r1, r1\n\tst.1\t132, r1\n\tadd\tr8, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end1:\n\n__farcall:\n.func_begin2:\n.tmp0:\n\tfar_call\tr1, r2, @.BB2_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB2_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end2:\n\n__staticcall:\n.func_begin3:\n.tmp3:\n\tfar_call.static\tr1, r2, @.BB3_2\n.tmp4:\n\tadd\t1, r0, r2\n\tret\n.BB3_2:\n.tmp5:\n\tadd\tr0, r0, r2\n\tret\n.func_end3:\n\n\t.data\n\t.p2align\t5\nreturndatasize:\n\t.cell 0\n\n\t.p2align\t5\nptr_calldata:\n.cell\t0\n\n\t.p2align\t5\nptr_return_data:\n.cell\t0\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\nCPI1_2:\n\t.cell 4294967295\nCPI0_1:\n\t.cell 53919893334301279589334030174039261357415493651629346657050491355136\nCPI0_2:\n\t.cell 2381471121\nCPI0_3:\n\t.cell 2381471122\nCPI0_4:\n\t.cell 3303603381\nCPI0_5:\n\t.cell 1289964194\nCPI0_6:\n\t.cell 2308837452\nCPI0_7:\n\t.cell 1461501637330902918203684832716283019655932542975\nCPI0_8:\n\t.cell 22182216476136578060272566318850604970565072242024486780356928325126096266030\nCPI0_9:\n\t.cell 904625751086426111047927909714404454142933107862120802609382293630030446592\nCPI0_10:\n\t.cell 49456545995968035537185321979393437797929437114944968430078942655111166427136\nCPI0_11:\nCPI1_5:\n\t.cell 316912650057057350374175801344\nCPI0_12:\n\t.cell 904625697166532776746648320380374280103671760270919307471179981048634146816\nCPI0_13:\n\t.cell 904625697166532776746648320380374280103671757735618107014721178055227736064\nCPI0_14:\n\t.cell -36914690936816677633157119960166450095343903410701864482853326691777208764446\nCPI0_15:\n\t.cell -49616239573498155619522019968547346745554955125280246045652902460331403509760\nCPI0_16:\n\t.cell 5387515050969974956360988622848\nCPI0_17:\n\t.cell 18446744073709551615\nCPI0_18:\n\t.cell -57896044618658097711785492504343953926634992332820282019728792003956564819968\nCPI0_19:\n\t.cell -51587754798836800728747478973012340356897718516816824802361445509462002499584\nCPI0_20:\n\t.cell 2535301200456458802993406410752\nCPI0_21:\n\t.cell -48915727309029260330853118083386617045045822106857250742862205745223073529856\nCPI0_22:\n\t.cell 2852213850513516153367582212096\nCPI0_23:\nCPI1_1:\n\t.cell 10867283408178898638301172343726954674910073630256871736220740970449699113859\nCPI0_24:\nCPI1_3:\n\t.cell 904625751086426111047927909714404454142933105326819602152923490636624035840\nCPI0_25:\n\t.cell -6215304424567361083373411102956181123151285832147226332068570520672811352064\nCPI0_26:\n\t.cell 15528719852795810168334614265856\nCPI0_27:\n\t.cell 4102470791\nCPI0_28:\n\t.cell 12993418652855860199405075300352\nCPI0_29:\nCPI1_8:\n\t.cell 1595266674\nCPI0_30:\nCPI1_9:\n\t.cell 2852213851030024987431449657344\nCPI0_31:\n\t.cell 47933402425489226065753524148184105187889222607776850187980235700039975960576\nCPI0_32:\n\t.cell 16156842317565293874272834530371880720966471053262404558597773956279093428224\nCPI0_33:\n\t.cell 7922816251426433759354395033600\nCPI0_34:\n\t.cell 2559121699\nCPI0_35:\n\t.cell 10458117452399401396411668889600\nCPI0_36:\n\t.cell -53545954668276220139882190706727945494768556564545977305565006372112175202304\nCPI0_37:\n\t.cell 54819867146590288857485388290300400564144485858285641338065013407752539602944\nCPI0_38:\n\t.cell 34777365872773961339311961615113117744096016053484145012885398825620056571904\nCPI1_0:\n\t.cell 21122234520580670415450416725259358303340482176740656504059893016123987197952\nCPI1_4:\n\t.cell -9212283332827774866488389296133532311828950233014723771470104869471550177280\nCPI1_6:\n\t.cell 590295810358705651712\nCPI1_7:\n\t.cell -36290556397102138804695004072359639533903767873311494148976104430963051724800\n","bytecode":{"object":""},"methodIdentifiers":{"execute((uint8,address,address,address,uint256,uint256)[])":"4ce34aa2","executeBatch1155((address,address,address,uint256[],uint256[])[])":"8df25d92","executeWithBatch1155((uint8,address,address,address,uint256,uint256)[],(address,address,address,uint256[],uint256[])[])":"899e104c","updateChannel(address,bool)":"c4e8fcb5"}},"irOptimized":"/// @use-src 0:\"contracts/conduit/Conduit.sol\", 1:\"seaport-core/src/conduit/Conduit.sol\", 2:\"seaport-core/src/lib/TokenTransferrer.sol\", 6:\"seaport-types/src/interfaces/ConduitInterface.sol\", 7:\"seaport-types/src/interfaces/TokenTransferrerErrors.sol\"\nobject \"LocalConduit_7\" {\n    code {\n        {\n            /// @src 0:810:849  \"contract LocalConduit is CoreConduit {}\"\n            let _1 := memoryguard(0xa0)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            /// @src 1:3220:3244  \"_controller = msg.sender\"\n            mstore(128, /** @src 1:3234:3244  \"msg.sender\" */ caller())\n            /// @src 0:810:849  \"contract LocalConduit is CoreConduit {}\"\n            let _2 := datasize(\"LocalConduit_7_deployed\")\n            codecopy(_1, dataoffset(\"LocalConduit_7_deployed\"), _2)\n            setimmutable(_1, \"33\", mload(/** @src 1:3220:3244  \"_controller = msg.sender\" */ 128))\n            /// @src 0:810:849  \"contract LocalConduit is CoreConduit {}\"\n            return(_1, _2)\n        }\n    }\n    /// @use-src 0:\"contracts/conduit/Conduit.sol\", 1:\"seaport-core/src/conduit/Conduit.sol\", 2:\"seaport-core/src/lib/TokenTransferrer.sol\"\n    object \"LocalConduit_7_deployed\" {\n        code {\n            {\n                /// @src 0:810:849  \"contract LocalConduit is CoreConduit {}\"\n                mstore(64, 128)\n                if iszero(lt(calldatasize(), 4))\n                {\n                    let _1 := 0\n                    switch shr(224, calldataload(_1))\n                    case 0x4ce34aa2 {\n                        if callvalue() { revert(_1, _1) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_1, _1) }\n                        let offset := calldataload(4)\n                        if gt(offset, 0xffffffffffffffff) { revert(_1, _1) }\n                        let value0, value1 := abi_decode_array_struct_ConduitTransfer_calldata_dyn_calldata(add(4, offset), calldatasize())\n                        /// @src 1:1854:2993  \"assembly {...\"\n                        mstore(/** @src 0:810:849  \"contract LocalConduit is CoreConduit {}\" */ _1, /** @src 1:1854:2993  \"assembly {...\" */ caller())\n                        mstore(/** @src 0:810:849  \"contract LocalConduit is CoreConduit {}\" */ 32, _1)\n                        /// @src 1:1854:2993  \"assembly {...\"\n                        if iszero(sload(keccak256(/** @src 0:810:849  \"contract LocalConduit is CoreConduit {}\" */ _1, 64)))\n                        /// @src 1:1854:2993  \"assembly {...\"\n                        {\n                            mstore(/** @src 0:810:849  \"contract LocalConduit is CoreConduit {}\" */ _1, /** @src 1:1854:2993  \"assembly {...\" */ shl(225, 0x49ed56f9))\n                            mstore(/** @src 0:810:849  \"contract LocalConduit is CoreConduit {}\" */ 4, /** @src 1:1854:2993  \"assembly {...\" */ caller())\n                            revert(/** @src 0:810:849  \"contract LocalConduit is CoreConduit {}\" */ _1, /** @src 1:1854:2993  \"assembly {...\" */ 36)\n                        }\n                        /// @src 1:4341:4354  \"uint256 i = 0\"\n                        let var_i := /** @src 0:810:849  \"contract LocalConduit is CoreConduit {}\" */ _1\n                        /// @src 1:4336:4644  \"for (uint256 i = 0; i < totalStandardTransfers;) {...\"\n                        for { }\n                        /** @src 1:4356:4382  \"i < totalStandardTransfers\" */ lt(var_i, value1)\n                        /// @src 1:4341:4354  \"uint256 i = 0\"\n                        { }\n                        {\n                            /// @src 1:4484:4496  \"transfers[i]\"\n                            fun_transfer(calldata_array_index_access_struct_ConduitTransfer_calldata_dyn_calldata(value0, value1, var_i))\n                            /// @src 1:4616:4619  \"++i\"\n                            var_i := /** @src 0:810:849  \"contract LocalConduit is CoreConduit {}\" */ add(/** @src 1:4616:4619  \"++i\" */ var_i, /** @src 0:810:849  \"contract LocalConduit is CoreConduit {}\" */ 1)\n                        }\n                        let memPos := mload(64)\n                        return(memPos, sub(abi_encode_bytes4(memPos), memPos))\n                    }\n                    case 0x899e104c {\n                        external_fun_executeWithBatch1155()\n                    }\n                    case 0x8df25d92 {\n                        external_fun_executeBatch1155()\n                    }\n                    case 0xc4e8fcb5 { external_fun_updateChannel() }\n                }\n                revert(0, 0)\n            }\n            function abi_decode_array_struct_ConduitTransfer_calldata_dyn_calldata(offset, end) -> arrayPos, length\n            {\n                if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n                length := calldataload(offset)\n                if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n                arrayPos := add(offset, 0x20)\n                if gt(add(add(offset, mul(length, 0xc0)), 0x20), end) { revert(0, 0) }\n            }\n            function abi_encode_bytes4(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(headStart, shl(225, 0x2671a551))\n            }\n            function abi_encode_tuple_bytes4(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(headStart, shl(226, 0x22678413))\n            }\n            function abi_decode_array_struct_ConduitBatch1155Transfer_calldata_dyn_calldata(offset, end) -> arrayPos, length\n            {\n                if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n                length := calldataload(offset)\n                if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n                arrayPos := add(offset, 0x20)\n                if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n            }\n            function external_fun_executeWithBatch1155()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 64)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 0:810:849  \"contract LocalConduit is CoreConduit {}\"\n                let offset := calldataload(4)\n                let _1 := 0xffffffffffffffff\n                if gt(offset, _1)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 0:810:849  \"contract LocalConduit is CoreConduit {}\"\n                let value0, value1 := abi_decode_array_struct_ConduitTransfer_calldata_dyn_calldata(add(4, offset), calldatasize())\n                let offset_1 := calldataload(36)\n                if gt(offset_1, _1)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 0:810:849  \"contract LocalConduit is CoreConduit {}\"\n                let value2, value3 := abi_decode_array_struct_ConduitBatch1155Transfer_calldata_dyn_calldata(add(4, offset_1), calldatasize())\n                /// @src -1:-1:-1\n                let _2 := 0\n                /// @src 1:1854:2993  \"assembly {...\"\n                mstore(/** @src -1:-1:-1 */ _2, /** @src 1:1854:2993  \"assembly {...\" */ caller())\n                mstore(/** @src 0:810:849  \"contract LocalConduit is CoreConduit {}\" */ 32, /** @src -1:-1:-1 */ _2)\n                /// @src 1:1854:2993  \"assembly {...\"\n                if iszero(sload(keccak256(/** @src -1:-1:-1 */ _2, /** @src 0:810:849  \"contract LocalConduit is CoreConduit {}\" */ 64)))\n                /// @src 1:1854:2993  \"assembly {...\"\n                {\n                    mstore(/** @src -1:-1:-1 */ _2, /** @src 1:1854:2993  \"assembly {...\" */ shl(225, 0x49ed56f9))\n                    mstore(/** @src 0:810:849  \"contract LocalConduit is CoreConduit {}\" */ 4, /** @src 1:1854:2993  \"assembly {...\" */ caller())\n                    revert(/** @src -1:-1:-1 */ _2, /** @src 0:810:849  \"contract LocalConduit is CoreConduit {}\" */ 36)\n                }\n                /// @src 1:7376:7389  \"uint256 i = 0\"\n                let var_i := /** @src -1:-1:-1 */ _2\n                /// @src 1:7371:7687  \"for (uint256 i = 0; i < totalStandardTransfers;) {...\"\n                for { }\n                /** @src 1:7391:7417  \"i < totalStandardTransfers\" */ lt(var_i, value1)\n                /// @src 1:7376:7389  \"uint256 i = 0\"\n                { }\n                {\n                    /// @src 1:7519:7539  \"standardTransfers[i]\"\n                    fun_transfer(calldata_array_index_access_struct_ConduitTransfer_calldata_dyn_calldata(value0, value1, var_i))\n                    /// @src 1:7659:7662  \"++i\"\n                    var_i := /** @src 0:810:849  \"contract LocalConduit is CoreConduit {}\" */ add(/** @src 1:7659:7662  \"++i\" */ var_i, /** @src 0:810:849  \"contract LocalConduit is CoreConduit {}\" */ 1)\n                }\n                /// @src 1:7932:7946  \"batchTransfers\"\n                fun_performERC1155BatchTransfers(value2, value3)\n                /// @src 0:810:849  \"contract LocalConduit is CoreConduit {}\"\n                let memPos := mload(64)\n                return(memPos, sub(abi_encode_tuple_bytes4(memPos), memPos))\n            }\n            function external_fun_executeBatch1155()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 32)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 0:810:849  \"contract LocalConduit is CoreConduit {}\"\n                let offset := calldataload(4)\n                if gt(offset, 0xffffffffffffffff)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 0:810:849  \"contract LocalConduit is CoreConduit {}\"\n                let value0, value1 := abi_decode_array_struct_ConduitBatch1155Transfer_calldata_dyn_calldata(add(4, offset), calldatasize())\n                /// @src 1:1854:2993  \"assembly {...\"\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 1:1854:2993  \"assembly {...\" */ caller())\n                mstore(/** @src 0:810:849  \"contract LocalConduit is CoreConduit {}\" */ 32, /** @src -1:-1:-1 */ 0)\n                /// @src 1:1854:2993  \"assembly {...\"\n                if iszero(sload(keccak256(/** @src -1:-1:-1 */ 0, /** @src 1:1854:2993  \"assembly {...\" */ 64)))\n                {\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 1:1854:2993  \"assembly {...\" */ shl(225, 0x49ed56f9))\n                    mstore(/** @src 0:810:849  \"contract LocalConduit is CoreConduit {}\" */ 4, /** @src 1:1854:2993  \"assembly {...\" */ caller())\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 1:1854:2993  \"assembly {...\" */ 36)\n                }\n                /// @src 1:5884:5898  \"batchTransfers\"\n                fun_performERC1155BatchTransfers(value0, value1)\n                /// @src 0:810:849  \"contract LocalConduit is CoreConduit {}\"\n                let memPos := mload(/** @src 1:1854:2993  \"assembly {...\" */ 64)\n                /// @src 0:810:849  \"contract LocalConduit is CoreConduit {}\"\n                mstore(memPos, shl(225, 0x46f92ec9))\n                return(memPos, 32)\n            }\n            function validator_revert_address(value)\n            {\n                if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n            }\n            function external_fun_updateChannel()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 64)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 0:810:849  \"contract LocalConduit is CoreConduit {}\"\n                let value := calldataload(4)\n                validator_revert_address(value)\n                let value_1 := calldataload(36)\n                let _1 := iszero(iszero(value_1))\n                if iszero(eq(value_1, _1))\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 0:810:849  \"contract LocalConduit is CoreConduit {}\"\n                let _2 := sub(shl(160, 1), 1)\n                /// @src 1:8474:8556  \"if (msg.sender != _controller) {...\"\n                if /** @src 1:8478:8503  \"msg.sender != _controller\" */ iszero(eq(/** @src 1:8478:8488  \"msg.sender\" */ caller(), /** @src 0:810:849  \"contract LocalConduit is CoreConduit {}\" */ and(/** @src 1:8492:8503  \"_controller\" */ loadimmutable(\"33\"), /** @src 0:810:849  \"contract LocalConduit is CoreConduit {}\" */ _2)))\n                /// @src 1:8474:8556  \"if (msg.sender != _controller) {...\"\n                {\n                    /// @src 1:8526:8545  \"InvalidController()\"\n                    let _3 := /** @src 0:810:849  \"contract LocalConduit is CoreConduit {}\" */ mload(64)\n                    /// @src 1:8526:8545  \"InvalidController()\"\n                    mstore(_3, shl(225, 0x36abb4df))\n                    revert(_3, /** @src 0:810:849  \"contract LocalConduit is CoreConduit {}\" */ 4)\n                }\n                /// @src 1:8645:8751  \"if (_channels[channel] == isOpen) {...\"\n                if /** @src 1:8649:8677  \"_channels[channel] == isOpen\" */ eq(/** @src 0:810:849  \"contract LocalConduit is CoreConduit {}\" */ iszero(iszero(/** @src 1:8649:8667  \"_channels[channel]\" */ read_from_storage_split_offset_bool(mapping_index_access_mapping_address_bool_of_address(value)))), /** @src 0:810:849  \"contract LocalConduit is CoreConduit {}\" */ _1)\n                /// @src 1:8645:8751  \"if (_channels[channel] == isOpen) {...\"\n                {\n                    /// @src 1:8700:8740  \"ChannelStatusAlreadySet(channel, isOpen)\"\n                    let _4 := /** @src 0:810:849  \"contract LocalConduit is CoreConduit {}\" */ mload(64)\n                    /// @src 1:8700:8740  \"ChannelStatusAlreadySet(channel, isOpen)\"\n                    mstore(_4, shl(225, 0x49271a0f))\n                    revert(_4, sub(abi_encode_address_bool(add(_4, /** @src 0:810:849  \"contract LocalConduit is CoreConduit {}\" */ 4), /** @src 1:8700:8740  \"ChannelStatusAlreadySet(channel, isOpen)\" */ value, value_1), _4))\n                }\n                /// @src 1:8806:8833  \"_channels[channel] = isOpen\"\n                update_storage_value_offsett_bool_to_bool(/** @src 1:8806:8824  \"_channels[channel]\" */ mapping_index_access_mapping_address_bool_of_address(value), /** @src 1:8806:8833  \"_channels[channel] = isOpen\" */ value_1)\n                /// @src 1:8888:8919  \"ChannelUpdated(channel, isOpen)\"\n                let _5 := /** @src 0:810:849  \"contract LocalConduit is CoreConduit {}\" */ mload(64)\n                /// @src 1:8888:8919  \"ChannelUpdated(channel, isOpen)\"\n                log2(_5, sub(abi_encode_bool(_5, value_1), _5), 0xae63067d43ac07563b7eb8db6595635fc77f1578a2a5ea06ba91b63e2afa37e2, /** @src 0:810:849  \"contract LocalConduit is CoreConduit {}\" */ and(/** @src 1:8888:8919  \"ChannelUpdated(channel, isOpen)\" */ value, /** @src 0:810:849  \"contract LocalConduit is CoreConduit {}\" */ _2))\n                return(mload(64), /** @src -1:-1:-1 */ 0)\n            }\n            /// @src 0:810:849  \"contract LocalConduit is CoreConduit {}\"\n            function calldata_array_index_access_struct_ConduitTransfer_calldata_dyn_calldata(base_ref, length, index) -> addr\n            {\n                if iszero(lt(index, length))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x32)\n                    revert(0, 0x24)\n                }\n                addr := add(base_ref, mul(index, 192))\n            }\n            function mapping_index_access_mapping_address_bool_of_address(key) -> dataSlot\n            {\n                mstore(/** @src 1:8649:8658  \"_channels\" */ 0x00, /** @src 0:810:849  \"contract LocalConduit is CoreConduit {}\" */ and(key, sub(shl(160, 1), 1)))\n                mstore(0x20, /** @src 1:8649:8658  \"_channels\" */ 0x00)\n                /// @src 0:810:849  \"contract LocalConduit is CoreConduit {}\"\n                dataSlot := keccak256(/** @src 1:8649:8658  \"_channels\" */ 0x00, /** @src 0:810:849  \"contract LocalConduit is CoreConduit {}\" */ 0x40)\n            }\n            function read_from_storage_split_offset_bool(slot) -> value\n            {\n                value := and(sload(slot), 0xff)\n            }\n            function abi_encode_address_bool(headStart, value0, value1) -> tail\n            {\n                tail := add(headStart, 64)\n                mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n                mstore(add(headStart, 32), iszero(iszero(value1)))\n            }\n            function update_storage_value_offsett_bool_to_bool(slot, value)\n            {\n                let value_1 := and(sload(slot), not(255))\n                sstore(slot, or(value_1, and(iszero(iszero(value)), 255)))\n            }\n            function abi_encode_bool(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(headStart, iszero(iszero(value0)))\n            }\n            function validator_assert_enum_ConduitItemType(value)\n            {\n                if iszero(lt(value, 4))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x21)\n                    revert(0, 0x24)\n                }\n            }\n            function read_from_calldatat_enum_ConduitItemType(ptr) -> returnValue\n            {\n                let value := calldataload(ptr)\n                if iszero(lt(value, 4)) { revert(0, 0) }\n                returnValue := value\n            }\n            function read_from_calldatat_address(ptr) -> returnValue\n            {\n                let value := calldataload(ptr)\n                validator_revert_address(value)\n                returnValue := value\n            }\n            function abi_encode_uint256(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(headStart, value0)\n            }\n            /// @ast-id 294 @src 1:9232:10468  \"function _transfer(ConduitTransfer calldata item) internal {...\"\n            function fun_transfer(var_item_offset)\n            {\n                /// @src 1:9381:9394  \"item.itemType\"\n                let expr := read_from_calldatat_enum_ConduitItemType(var_item_offset)\n                /// @src 0:810:849  \"contract LocalConduit is CoreConduit {}\"\n                validator_assert_enum_ConduitItemType(expr)\n                /// @src 1:9377:10462  \"if (item.itemType == ConduitItemType.ERC20) {...\"\n                switch /** @src 1:9381:9419  \"item.itemType == ConduitItemType.ERC20\" */ eq(expr, /** @src 1:9398:9419  \"ConduitItemType.ERC20\" */ 1)\n                case /** @src 1:9377:10462  \"if (item.itemType == ConduitItemType.ERC20) {...\" */ 0 {\n                    /// @src 1:9809:9822  \"item.itemType\"\n                    let expr_1 := read_from_calldatat_enum_ConduitItemType(var_item_offset)\n                    /// @src 0:810:849  \"contract LocalConduit is CoreConduit {}\"\n                    validator_assert_enum_ConduitItemType(expr_1)\n                    /// @src 1:9805:10462  \"if (item.itemType == ConduitItemType.ERC721) {...\"\n                    switch /** @src 1:9809:9848  \"item.itemType == ConduitItemType.ERC721\" */ eq(expr_1, /** @src 1:9826:9848  \"ConduitItemType.ERC721\" */ 2)\n                    case /** @src 1:9805:10462  \"if (item.itemType == ConduitItemType.ERC721) {...\" */ 0 {\n                        /// @src 1:10180:10193  \"item.itemType\"\n                        let expr_2 := read_from_calldatat_enum_ConduitItemType(var_item_offset)\n                        /// @src 0:810:849  \"contract LocalConduit is CoreConduit {}\"\n                        validator_assert_enum_ConduitItemType(expr_2)\n                        /// @src 1:10176:10462  \"if (item.itemType == ConduitItemType.ERC1155) {...\"\n                        switch /** @src 1:10180:10220  \"item.itemType == ConduitItemType.ERC1155\" */ eq(expr_2, /** @src 1:10197:10220  \"ConduitItemType.ERC1155\" */ 3)\n                        case /** @src 1:10176:10462  \"if (item.itemType == ConduitItemType.ERC1155) {...\" */ 0 {\n                            /// @src 1:10434:10451  \"InvalidItemType()\"\n                            let _1 := /** @src 0:810:849  \"contract LocalConduit is CoreConduit {}\" */ mload(64)\n                            /// @src 1:10434:10451  \"InvalidItemType()\"\n                            mstore(_1, shl(226, 0x1e4cbc7f))\n                            revert(_1, 4)\n                        }\n                        default /// @src 1:10176:10462  \"if (item.itemType == ConduitItemType.ERC1155) {...\"\n                        {\n                            /// @src 1:10299:10309  \"item.token\"\n                            let expr_3 := read_from_calldatat_address(add(var_item_offset, 32))\n                            /// @src 1:10311:10320  \"item.from\"\n                            let expr_4 := read_from_calldatat_address(add(var_item_offset, 64))\n                            /// @src 1:10322:10329  \"item.to\"\n                            let expr_5 := read_from_calldatat_address(add(var_item_offset, 96))\n                            /// @src 1:10348:10359  \"item.amount\"\n                            fun_performERC1155Transfer(expr_3, expr_4, expr_5, /** @src 0:810:849  \"contract LocalConduit is CoreConduit {}\" */ calldataload(/** @src 1:10331:10346  \"item.identifier\" */ add(var_item_offset, 128)), /** @src 0:810:849  \"contract LocalConduit is CoreConduit {}\" */ calldataload(/** @src 1:10348:10359  \"item.amount\" */ add(var_item_offset, 160)))\n                        }\n                    }\n                    default /// @src 1:9805:10462  \"if (item.itemType == ConduitItemType.ERC721) {...\"\n                    {\n                        /// @src 1:9938:9949  \"item.amount\"\n                        let expr_6 := /** @src 0:810:849  \"contract LocalConduit is CoreConduit {}\" */ calldataload(/** @src 1:9938:9949  \"item.amount\" */ add(var_item_offset, 160))\n                        /// @src 1:9934:10036  \"if (item.amount != 1) {...\"\n                        if /** @src 1:9938:9954  \"item.amount != 1\" */ iszero(eq(expr_6, /** @src 1:9398:9419  \"ConduitItemType.ERC20\" */ 1))\n                        /// @src 1:9934:10036  \"if (item.amount != 1) {...\"\n                        {\n                            /// @src 1:9981:10021  \"InvalidERC721TransferAmount(item.amount)\"\n                            let _2 := /** @src 0:810:849  \"contract LocalConduit is CoreConduit {}\" */ mload(64)\n                            /// @src 1:9981:10021  \"InvalidERC721TransferAmount(item.amount)\"\n                            mstore(_2, shl(224, 0x69f95827))\n                            revert(_2, sub(abi_encode_uint256(add(_2, 4), expr_6), _2))\n                        }\n                        /// @src 1:10111:10121  \"item.token\"\n                        let expr_7 := read_from_calldatat_address(add(var_item_offset, 32))\n                        /// @src 1:10123:10132  \"item.from\"\n                        let expr_8 := read_from_calldatat_address(add(var_item_offset, 64))\n                        /// @src 1:10134:10141  \"item.to\"\n                        let expr_9 := read_from_calldatat_address(add(var_item_offset, 96))\n                        /// @src 1:10143:10158  \"item.identifier\"\n                        fun_performERC721Transfer(expr_7, expr_8, expr_9, /** @src 0:810:849  \"contract LocalConduit is CoreConduit {}\" */ calldataload(/** @src 1:10143:10158  \"item.identifier\" */ add(var_item_offset, 128)))\n                    }\n                }\n                default /// @src 1:9377:10462  \"if (item.itemType == ConduitItemType.ERC20) {...\"\n                {\n                    /// @src 1:9744:9754  \"item.token\"\n                    let expr_10 := read_from_calldatat_address(add(var_item_offset, 32))\n                    /// @src 1:9756:9765  \"item.from\"\n                    let expr_11 := read_from_calldatat_address(add(var_item_offset, 64))\n                    /// @src 1:9767:9774  \"item.to\"\n                    let expr_12 := read_from_calldatat_address(add(var_item_offset, 96))\n                    /// @src 1:9776:9787  \"item.amount\"\n                    fun_performERC20Transfer(expr_10, expr_11, expr_12, /** @src 0:810:849  \"contract LocalConduit is CoreConduit {}\" */ calldataload(/** @src 1:9776:9787  \"item.amount\" */ add(var_item_offset, 160)))\n                }\n            }\n            /// @ast-id 394 @src 2:4268:12875  \"function _performERC20Transfer(address token, address from, address to, uint256 amount) internal {...\"\n            function fun_performERC20Transfer(var_token, var_from, var_to, var_amount)\n            {\n                /// @src 2:4449:12869  \"assembly {...\"\n                let usr$memPointer := mload(64)\n                let _1 := 0\n                mstore(_1, shl(224, 0x23b872dd))\n                mstore(4, var_from)\n                mstore(36, var_to)\n                mstore(68, var_amount)\n                let usr$callStatus := call(gas(), var_token, _1, _1, 100, _1, 32)\n                let usr$success := and(or(and(eq(mload(_1), 1), gt(returndatasize(), 31)), iszero(returndatasize())), usr$callStatus)\n                if iszero(and(usr$success, iszero(iszero(returndatasize()))))\n                {\n                    if iszero(and(iszero(iszero(extcodesize(var_token))), usr$success))\n                    {\n                        if iszero(usr$success)\n                        {\n                            if iszero(usr$callStatus)\n                            {\n                                if returndatasize()\n                                {\n                                    let usr$returnDataWords := shr(5, add(returndatasize(), 31))\n                                    let usr$msizeWords := shr(5, usr$memPointer)\n                                    let usr$cost := mul(3, usr$returnDataWords)\n                                    if gt(usr$returnDataWords, usr$msizeWords)\n                                    {\n                                        usr$cost := add(usr$cost, add(mul(sub(usr$returnDataWords, usr$msizeWords), 3), shr(9, sub(mul(usr$returnDataWords, usr$returnDataWords), mul(usr$msizeWords, usr$msizeWords)))))\n                                    }\n                                    if lt(add(usr$cost, 32), gas())\n                                    {\n                                        returndatacopy(_1, _1, returndatasize())\n                                        revert(_1, returndatasize())\n                                    }\n                                }\n                                mstore(_1, 4102470791)\n                                mstore(32, var_token)\n                                mstore(64, var_from)\n                                mstore(96, var_to)\n                                mstore(128, _1)\n                                mstore(160, var_amount)\n                                revert(28, 164)\n                            }\n                            mstore(_1, 2559121699)\n                            mstore(32, var_token)\n                            mstore(64, var_from)\n                            mstore(96, var_to)\n                            mstore(128, var_amount)\n                            revert(28, 132)\n                        }\n                        mstore(_1, 1595266674)\n                        mstore(32, var_token)\n                        revert(28, 36)\n                    }\n                }\n                mstore(64, usr$memPointer)\n                mstore(96, _1)\n            }\n            /// @ast-id 408 @src 2:13479:18382  \"function _performERC721Transfer(address token, address from, address to, uint256 identifier) internal {...\"\n            function fun_performERC721Transfer(var_token, var_from, var_to, var_identifier)\n            {\n                /// @src 2:13666:18376  \"assembly {...\"\n                if iszero(extcodesize(var_token))\n                {\n                    mstore(0, 1595266674)\n                    mstore(32, var_token)\n                    revert(28, 36)\n                }\n                let usr$memPointer := mload(64)\n                let _1 := 0\n                mstore(_1, /** @src 2:4449:12869  \"assembly {...\" */ shl(224, 0x23b872dd))\n                /// @src 2:13666:18376  \"assembly {...\"\n                mstore(4, var_from)\n                mstore(36, var_to)\n                mstore(68, var_identifier)\n                if iszero(call(gas(), var_token, _1, _1, 100, _1, _1))\n                {\n                    if returndatasize()\n                    {\n                        let usr$returnDataWords := shr(5, add(returndatasize(), 31))\n                        let usr$msizeWords := shr(5, usr$memPointer)\n                        let usr$cost := mul(3, usr$returnDataWords)\n                        if gt(usr$returnDataWords, usr$msizeWords)\n                        {\n                            usr$cost := add(usr$cost, add(mul(sub(usr$returnDataWords, usr$msizeWords), 3), shr(9, sub(mul(usr$returnDataWords, usr$returnDataWords), mul(usr$msizeWords, usr$msizeWords)))))\n                        }\n                        if lt(add(usr$cost, 32), gas())\n                        {\n                            returndatacopy(_1, _1, returndatasize())\n                            revert(_1, returndatasize())\n                        }\n                    }\n                    mstore(_1, 4102470791)\n                    mstore(32, var_token)\n                    mstore(64, var_from)\n                    mstore(96, var_to)\n                    mstore(128, var_identifier)\n                    mstore(160, 1)\n                    revert(28, 164)\n                }\n                mstore(64, usr$memPointer)\n                mstore(96, _1)\n            }\n            /// @ast-id 424 @src 2:19030:24568  \"function _performERC1155Transfer(address token, address from, address to, uint256 identifier, uint256 amount)...\"\n            function fun_performERC1155Transfer(var_token, var_from, var_to, var_identifier, var_amount)\n            {\n                /// @src 2:19247:24562  \"assembly {...\"\n                if iszero(extcodesize(var_token))\n                {\n                    mstore(0, 1595266674)\n                    mstore(32, var_token)\n                    revert(28, 36)\n                }\n                let usr$memPointer := mload(64)\n                let usr$slot0x80 := mload(128)\n                let usr$slot0xA0 := mload(160)\n                let usr$slot0xC0 := mload(192)\n                let _1 := 0\n                mstore(_1, shl(225, 0x79212195))\n                mstore(4, var_from)\n                mstore(36, var_to)\n                mstore(68, var_identifier)\n                mstore(100, var_amount)\n                mstore(132, 160)\n                mstore(164, _1)\n                if iszero(call(gas(), var_token, _1, _1, 196, _1, _1))\n                {\n                    if returndatasize()\n                    {\n                        let usr$returnDataWords := shr(5, add(returndatasize(), 31))\n                        let usr$msizeWords := shr(5, usr$memPointer)\n                        let usr$cost := mul(3, usr$returnDataWords)\n                        if gt(usr$returnDataWords, usr$msizeWords)\n                        {\n                            usr$cost := add(usr$cost, add(mul(sub(usr$returnDataWords, usr$msizeWords), 3), shr(9, sub(mul(usr$returnDataWords, usr$returnDataWords), mul(usr$msizeWords, usr$msizeWords)))))\n                        }\n                        if lt(add(usr$cost, 32), gas())\n                        {\n                            returndatacopy(_1, _1, returndatasize())\n                            revert(_1, returndatasize())\n                        }\n                    }\n                    mstore(_1, 4102470791)\n                    mstore(32, var_token)\n                    mstore(64, var_from)\n                    mstore(96, var_to)\n                    mstore(128, var_identifier)\n                    mstore(160, var_amount)\n                    revert(28, 164)\n                }\n                mstore(128, usr$slot0x80)\n                mstore(160, usr$slot0xA0)\n                mstore(192, usr$slot0xC0)\n                mstore(64, usr$memPointer)\n                mstore(96, _1)\n            }\n            /// @ast-id 434 @src 2:25519:35853  \"function _performERC1155BatchTransfers(ConduitBatch1155Transfer[] calldata batchTransfers) internal {...\"\n            function fun_performERC1155BatchTransfers(var_batchTransfers_offset, var_batchTransfers_length)\n            {\n                /// @src 2:25700:35847  \"assembly {...\"\n                let usr$nextElementHeadPtr := var_batchTransfers_offset\n                let _1 := 32\n                mstore(_1, shl(225, 0x1759616b))\n                let usr$i := 0\n                for { }\n                lt(usr$i, var_batchTransfers_length)\n                { usr$i := add(usr$i, 1) }\n                {\n                    let usr$elementPtr := add(var_batchTransfers_offset, calldataload(usr$nextElementHeadPtr))\n                    let usr$token := calldataload(usr$elementPtr)\n                    if iszero(extcodesize(usr$token))\n                    {\n                        mstore(0, 1595266674)\n                        mstore(_1, usr$token)\n                        revert(28, 36)\n                    }\n                    let _2 := 160\n                    let _3 := add(usr$elementPtr, _2)\n                    let usr$idsLength := calldataload(_3)\n                    let _4 := 5\n                    let _5 := shl(_4, usr$idsLength)\n                    let _6 := 192\n                    let _7 := 128\n                    if iszero(and(eq(usr$idsLength, calldataload(add(add(usr$elementPtr, _5), _6))), and(eq(calldataload(add(usr$elementPtr, 96)), _2), eq(calldataload(add(usr$elementPtr, _7)), add(_6, _5)))))\n                    {\n                        mstore(0, shl(226, 0x3ae88213))\n                        revert(0, 4)\n                    }\n                    usr$nextElementHeadPtr := add(usr$nextElementHeadPtr, _1)\n                    calldatacopy(36, add(usr$elementPtr, _1), _7)\n                    let _8 := shl(6, usr$idsLength)\n                    mstore(164, add(_8, 224))\n                    let _9 := add(_8, 260)\n                    mstore(_9, 0)\n                    calldatacopy(196, _3, add(64, _8))\n                    if iszero(call(gas(), usr$token, 0, _1, _9, 0, 0))\n                    {\n                        if returndatasize()\n                        {\n                            let usr$returnDataWords := shr(_4, add(returndatasize(), 31))\n                            let usr$msizeWords := shr(_4, _9)\n                            let _10 := 3\n                            let usr$cost := mul(_10, usr$returnDataWords)\n                            if gt(usr$returnDataWords, usr$msizeWords)\n                            {\n                                usr$cost := add(usr$cost, add(mul(sub(usr$returnDataWords, usr$msizeWords), _10), shr(9, sub(mul(usr$returnDataWords, usr$returnDataWords), mul(usr$msizeWords, usr$msizeWords)))))\n                            }\n                            if lt(add(usr$cost, _1), gas())\n                            {\n                                returndatacopy(0, 0, returndatasize())\n                                revert(0, returndatasize())\n                            }\n                        }\n                        mstore(0, shl(225, 0x57e222f1))\n                        mstore(4, usr$token)\n                        mstore(100, _6)\n                        let _11 := 132\n                        mstore(_11, add(_1, mload(_11)))\n                        revert(0, _9)\n                    }\n                }\n                mstore(64, 128)\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220fce231e289bdb1dd6254b545c8e55172c515d53410760c3f4ed061acc6e09ce764736f6c634300080e0033\"\n    }\n}\n","hash":"010001bb71a136c8e6c110b84bc9dcf719d23f7c2ab4d14d7d7195be0ddaf2be","factoryDependencies":{}}},"seaport-core/src/conduit/Conduit.sol":{"Conduit":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"BadReturnValueFromERC20OnTransfer","type":"error"},{"inputs":[{"internalType":"address","name":"channel","type":"address"}],"name":"ChannelClosed","type":"error"},{"inputs":[{"internalType":"address","name":"channel","type":"address"},{"internalType":"bool","name":"isOpen","type":"bool"}],"name":"ChannelStatusAlreadySet","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"identifiers","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"ERC1155BatchTransferGenericFailure","type":"error"},{"inputs":[],"name":"Invalid1155BatchTransferEncoding","type":"error"},{"inputs":[],"name":"InvalidController","type":"error"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"InvalidERC721TransferAmount","type":"error"},{"inputs":[],"name":"InvalidItemType","type":"error"},{"inputs":[],"name":"MissingItemAmount","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NoContract","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"identifier","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"TokenTransferGenericFailure","type":"error"},{"inputs":[],"name":"UnusedItemParameters","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"channel","type":"address"},{"indexed":false,"internalType":"bool","name":"open","type":"bool"}],"name":"ChannelUpdated","type":"event"},{"inputs":[{"components":[{"internalType":"enum ConduitItemType","name":"itemType","type":"uint8"},{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"identifier","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct ConduitTransfer[]","name":"transfers","type":"tuple[]"}],"name":"execute","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"internalType":"struct ConduitBatch1155Transfer[]","name":"batchTransfers","type":"tuple[]"}],"name":"executeBatch1155","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"enum ConduitItemType","name":"itemType","type":"uint8"},{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"identifier","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct ConduitTransfer[]","name":"standardTransfers","type":"tuple[]"},{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"internalType":"struct ConduitBatch1155Transfer[]","name":"batchTransfers","type":"tuple[]"}],"name":"executeWithBatch1155","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"channel","type":"address"},{"internalType":"bool","name":"isOpen","type":"bool"}],"name":"updateChannel","outputs":[],"stateMutability":"nonpayable","type":"function"}],"metadata":{"optimizer_settings":"M3B3","solc_metadata":"{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BadReturnValueFromERC20OnTransfer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"channel\",\"type\":\"address\"}],\"name\":\"ChannelClosed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"channel\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"}],\"name\":\"ChannelStatusAlreadySet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"identifiers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"ERC1155BatchTransferGenericFailure\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Invalid1155BatchTransferEncoding\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidController\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InvalidERC721TransferAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidItemType\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MissingItemAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NoContract\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"identifier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenTransferGenericFailure\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnusedItemParameters\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"channel\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"}],\"name\":\"ChannelUpdated\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum ConduitItemType\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"identifier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ConduitTransfer[]\",\"name\":\"transfers\",\"type\":\"tuple[]\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ConduitBatch1155Transfer[]\",\"name\":\"batchTransfers\",\"type\":\"tuple[]\"}],\"name\":\"executeBatch1155\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum ConduitItemType\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"identifier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ConduitTransfer[]\",\"name\":\"standardTransfers\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ConduitBatch1155Transfer[]\",\"name\":\"batchTransfers\",\"type\":\"tuple[]\"}],\"name\":\"executeWithBatch1155\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"channel\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"}],\"name\":\"updateChannel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"0age\",\"errors\":{\"BadReturnValueFromERC20OnTransfer(address,address,address,uint256)\":[{\"details\":\"Revert with an error when an ERC20 token transfer returns a falsey      value.\",\"params\":{\"amount\":\"The amount for the attempted ERC20 transfer.\",\"from\":\"The source of the attempted ERC20 transfer.\",\"to\":\"The recipient of the attempted ERC20 transfer.\",\"token\":\"The token for which the ERC20 transfer was attempted.\"}}],\"ChannelClosed(address)\":[{\"details\":\"Revert with an error when attempting to execute transfers using a      caller that does not have an open channel.\"}],\"ChannelStatusAlreadySet(address,bool)\":[{\"details\":\"Revert with an error when attempting to update a channel to the      current status of that channel.\"}],\"ERC1155BatchTransferGenericFailure(address,address,address,uint256[],uint256[])\":[{\"details\":\"Revert with an error when a batch ERC1155 token transfer reverts.\",\"params\":{\"amounts\":\"The amounts for the attempted transfer.\",\"from\":\"The source of the attempted transfer.\",\"identifiers\":\"The identifiers for the attempted transfer.\",\"to\":\"The recipient of the attempted transfer.\",\"token\":\"The token for which the transfer was attempted.\"}}],\"Invalid1155BatchTransferEncoding()\":[{\"details\":\"Revert with an error when attempting to execute an 1155 batch      transfer using calldata not produced by default ABI encoding or with      different lengths for ids and amounts arrays.\"}],\"InvalidController()\":[{\"details\":\"Revert with an error when attempting to update the status of a      channel from a caller that is not the conduit controller.\"}],\"InvalidERC721TransferAmount(uint256)\":[{\"details\":\"Revert with an error when an ERC721 transfer with amount other than      one is attempted.\",\"params\":{\"amount\":\"The amount of the ERC721 tokens to transfer.\"}}],\"InvalidItemType()\":[{\"details\":\"Revert with an error when attempting to execute a transfer for an      item that does not have an ERC20/721/1155 item type.\"}],\"MissingItemAmount()\":[{\"details\":\"Revert with an error when attempting to fulfill an order where an      item has an amount of zero.\"}],\"NoContract(address)\":[{\"details\":\"Revert with an error when an account being called as an assumed      contract does not have code and returns no data.\",\"params\":{\"account\":\"The account that should contain code.\"}}],\"TokenTransferGenericFailure(address,address,address,uint256,uint256)\":[{\"details\":\"Revert with an error when an ERC20, ERC721, or ERC1155 token      transfer reverts.\",\"params\":{\"amount\":\"The amount for the attempted transfer.\",\"from\":\"The source of the attempted transfer.\",\"identifier\":\"The identifier for the attempted transfer.\",\"to\":\"The recipient of the attempted transfer.\",\"token\":\"The token for which the transfer was attempted.\"}}],\"UnusedItemParameters()\":[{\"details\":\"Revert with an error when attempting to fulfill an order where an      item has unused parameters. This includes both the token and the      identifier parameters for native transfers as well as the identifier      parameter for ERC20 transfers. Note that the conduit does not      perform this check, leaving it up to the calling channel to enforce      when desired.\"}]},\"kind\":\"dev\",\"methods\":{\"execute((uint8,address,address,address,uint256,uint256)[])\":{\"params\":{\"transfers\":\"The ERC20/721/1155 transfers to perform.\"},\"returns\":{\"magicValue\":\"A magic value indicating that the transfers were                    performed successfully.\"}},\"executeBatch1155((address,address,address,uint256[],uint256[])[])\":{\"params\":{\"batchTransfers\":\"The 1155 batch item transfers to perform.\"},\"returns\":{\"magicValue\":\"A magic value indicating that the item transfers were                    performed successfully.\"}},\"executeWithBatch1155((uint8,address,address,address,uint256,uint256)[],(address,address,address,uint256[],uint256[])[])\":{\"params\":{\"batchTransfers\":\"The 1155 batch item transfers to perform.\",\"standardTransfers\":\"The ERC20/721/1155 item transfers to perform.\"},\"returns\":{\"magicValue\":\"A magic value indicating that the item transfers were                    performed successfully.\"}},\"updateChannel(address,bool)\":{\"params\":{\"channel\":\"The channel to open or close.\",\"isOpen\":\"The status of the channel (either open or closed).\"}}},\"title\":\"Conduit\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"In the constructor, set the deployer as the controller.\"},\"execute((uint8,address,address,address,uint256,uint256)[])\":{\"notice\":\"Execute a sequence of ERC20/721/1155 transfers. Only a caller         with an open channel can call this function. Note that channels         are expected to implement reentrancy protection if desired, and         that cross-channel reentrancy may be possible if the conduit has         multiple open channels at once. Also note that channels are         expected to implement checks against transferring any zero-amount         items if that constraint is desired.\"},\"executeBatch1155((address,address,address,uint256[],uint256[])[])\":{\"notice\":\"Execute a sequence of batch 1155 item transfers. Only a caller         with an open channel can call this function. Note that channels         are expected to implement reentrancy protection if desired, and         that cross-channel reentrancy may be possible if the conduit has         multiple open channels at once. Also note that channels are         expected to implement checks against transferring any zero-amount         items if that constraint is desired.\"},\"executeWithBatch1155((uint8,address,address,address,uint256,uint256)[],(address,address,address,uint256[],uint256[])[])\":{\"notice\":\"Execute a sequence of transfers, both single ERC20/721/1155 item         transfers as well as batch 1155 item transfers. Only a caller         with an open channel can call this function. Note that channels         are expected to implement reentrancy protection if desired, and         that cross-channel reentrancy may be possible if the conduit has         multiple open channels at once. Also note that channels are         expected to implement checks against transferring any zero-amount         items if that constraint is desired.\"},\"updateChannel(address,bool)\":{\"notice\":\"Open or close a given channel. Only callable by the controller.\"}},\"notice\":\"This contract serves as an originator for \\\"proxied\\\" transfers. Each         conduit is deployed and controlled by a \\\"conduit controller\\\" that can         add and remove \\\"channels\\\" or contracts that can instruct the conduit         to transfer approved ERC20/721/1155 tokens. *IMPORTANT NOTE: each         conduit has an owner that can arbitrarily add or remove channels, and         a malicious or negligent owner can add a channel that allows for any         approved ERC20/721/1155 tokens to be taken immediately \\u2014 be extremely         cautious with what conduits you give token approvals to!*\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"seaport-core/src/conduit/Conduit.sol\":\"Conduit\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"seaport-core/src/conduit/Conduit.sol\":{\"keccak256\":\"0xec1cd6b6a0552c9d2a236fe1df562dc6795f2a35067120979ef299b13928ed75\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2d6255a857de2e49b15c01896f6e2b81c2bc8cae3d14562e3c8d42fb7949a098\",\"dweb:/ipfs/QmWLg6NE5gEEAPJR7UW21fzSFycapTSCEXdCr45FFuMr7q\"]},\"seaport-core/src/lib/TokenTransferrer.sol\":{\"keccak256\":\"0x02822d391094cc733a1215a9dcca933099592d4902e327832e7a4ddbfe910df1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7951093d038b3577c66febf10be0435b2c2093df55b03827406e130880dfa96b\",\"dweb:/ipfs/QmbjnYUwHbgU7jrbuLakh9FSkGcPNAxzH3TTRUoUEEFZdo\"]},\"seaport-types/src/conduit/lib/ConduitConstants.sol\":{\"keccak256\":\"0xf9d1a7d4c805e3851ddc7fb9329dab68745cd38833f20b473799f86df97b5c23\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8aa922f6e11d22005f4d61edc338b29177dae0fc50f86de226eca31969c1aa48\",\"dweb:/ipfs/QmT3gFEuLEZ4DYsAuhg4QVyG2iWLGmuT9cyreHYWnN7CfX\"]},\"seaport-types/src/conduit/lib/ConduitEnums.sol\":{\"keccak256\":\"0x1b24e84bbd29d52cebcb0bda26c8095c9d7a8e5719dd1b0e203315be0df4dcf7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://901be0c9ea392a69611b884985a772547e83ce78610a40e989216d842c8eb4b0\",\"dweb:/ipfs/QmPW1kDrkUEAvF6gy5FHsVmXNe2C1czAovXKL18T5jKiVx\"]},\"seaport-types/src/conduit/lib/ConduitStructs.sol\":{\"keccak256\":\"0xe765c83ddb65b13547db2914f7212689707fcd85c1bbe5c49dbe3e98c4942dd9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1318c90a615b9c2098c1f7435925c76913d2c54b79a53f8f64eae59d60ed5564\",\"dweb:/ipfs/QmXkTSAvkrMbrNLJjehm3JXeBoyW6dDYWRsdFkuDVb33sa\"]},\"seaport-types/src/interfaces/ConduitInterface.sol\":{\"keccak256\":\"0x5710e503e7550594cf98bade51646da1420d09c1b4758315484810df72d7cf64\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d3831fc9b36ce3760c39f60682487848f9678157794b995207f15d93ca1cc58a\",\"dweb:/ipfs/QmaapZB4DdYhUSkjySHJk9n7ajEfmX1hwWXWwEHAixYPQQ\"]},\"seaport-types/src/interfaces/TokenTransferrerErrors.sol\":{\"keccak256\":\"0x9ba38397a8b8e3c7d1119138ef452d1b801bdcf594699ba51a6b2858045b55e5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40919b9dfed2d2562ba8101bfc5e5333241dff9fc323b1cdb3d60a67820ebba4\",\"dweb:/ipfs/QmQTyJF7pkKpY1p3vrVpkQASbC8uYWKaEUMtRc5Y6UKZam\"]},\"seaport-types/src/lib/TokenTransferrerConstants.sol\":{\"keccak256\":\"0x0782f25dce0a09f772c39c41955ee1432d8a6a190100f3042c141c5d73c11905\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1f60c05c05862207f94f14c95d5973bd6d7e906f867b7cf1c3a0d42c492448c2\",\"dweb:/ipfs/QmPWnCPTPndMLHwjD69U58K7q6kKgQr9hxCXQ86X78vBNJ\"]}},\"version\":1}","zk_version":"1.3.16"},"evm":{"legacyAssembly":null,"assembly":"\t.text\n\t.file\t\"Conduit.sol:Conduit\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[14]\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r3, stack[@ptr_return_data]\n\tptr.add\tr1, r0, stack[@ptr_calldata]\n\tadd\t0, r0, stack[@returndatasize]\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_1\n\tadd\t128, r0, r2\n\tst.1\t64, r2\n\tsub.s!\t4, r3, r2\n\tjump.lt\t@.BB0_2\n\tld\tr1, r2\n\tshr.s\t224, r2, r2\n\tsub.s!\t@CPI0_2[0], r2, r4\n\tjump.gt\t@.BB0_8\n\tsub.s!\t@CPI0_5[0], r2, r4\n\tjump.eq\t@.BB0_10\n\tsub.s!\t@CPI0_6[0], r2, r2\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r3, r2\n\tsub.s!\t64, r2, r2\n\tjump.lt\t@.BB0_2\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r2\n\tsub.s!\t@CPI0_17[0], r2, r4\n\tjump.gt\t@.BB0_2\n\tadd\t35, r2, r4\n\tadd\t@CPI0_18[0], r0, r5\n\tsub!\tr4, r3, r6\n\tadd\tr0, r0, r6\n\tadd.ge\tr5, r0, r6\n\tand\t@CPI0_18[0], r4, r4\n\tsub!\tr4, r0, r7\n\tadd.ge\tr0, r0, r5\n\tsub.s!\t@CPI0_18[0], r4, r4\n\tadd\tr6, r0, r4\n\tadd.eq\tr5, r0, r4\n\tsub!\tr4, r0, r4\n\tjump.ne\t@.BB0_2\n\tadd\t4, r2, r4\n\tptr.add\tr1, r4, r4\n\tld\tr4, r4\n\tadd\tr4, r0, stack-[12]\n\tsub.s!\t@CPI0_17[0], r4, r4\n\tjump.gt\t@.BB0_2\n\tadd\t36, r2, stack-[11]\n\tadd\tstack-[12], r0, r2\n\tmul\t192, r2, r2, r4\n\tadd\tstack-[11], r2, r2\n\tsub!\tr2, r3, r2\n\tjump.gt\t@.BB0_2\n\tptr.add.s\t36, r1, r2\n\tld\tr2, r2\n\tsub.s!\t@CPI0_17[0], r2, r4\n\tjump.gt\t@.BB0_2\n\tadd\t35, r2, r4\n\tadd\t@CPI0_18[0], r0, r5\n\tsub!\tr4, r3, r6\n\tadd\tr0, r0, r6\n\tadd.ge\tr5, r0, r6\n\tand\t@CPI0_18[0], r4, r4\n\tsub!\tr4, r0, r7\n\tadd.ge\tr0, r0, r5\n\tsub.s!\t@CPI0_18[0], r4, r4\n\tadd\tr6, r0, r4\n\tadd.eq\tr5, r0, r4\n\tsub!\tr4, r0, r4\n\tjump.ne\t@.BB0_2\n\tadd\t4, r2, r4\n\tptr.add\tr1, r4, r1\n\tld\tr1, r1\n\tadd\tr1, r0, stack-[2]\n\tsub.s!\t@CPI0_17[0], r1, r1\n\tjump.gt\t@.BB0_2\n\tadd\t36, r2, stack-[1]\n\tadd\tstack-[2], r0, r1\n\tshl.s\t5, r1, r1\n\tadd\tstack-[1], r1, r1\n\tsub!\tr1, r3, r1\n\tjump.gt\t@.BB0_2\n\tcontext.caller\tr1\n\tadd\tr1, r0, stack-[14]\n\tst.1\t0, r1\n\tst.1\t32, r0\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.lt\tr2, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_12[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tsload\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_112\n\tjump\t@.BB0_21\n.BB0_1:\n\tadd\t160, r0, r1\n\tst.1\t64, r1\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tcontext.caller\tr1\n\tst.1\t128, r1\n\tst.2\t320, r0\n\tst.2\t352, r1\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tadd\t1, r0, r1\n\tst.2\t288, r1\n\tadd\t@CPI0_1[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_8:\n\tsub.s!\t@CPI0_3[0], r2, r4\n\tjump.eq\t@.BB0_187\n\tsub.s!\t@CPI0_4[0], r2, r2\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r3, r2\n\tsub.s!\t64, r2, r2\n\tjump.lt\t@.BB0_2\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r4\n\tsub.s!\t@CPI0_7[0], r4, r2\n\tjump.gt\t@.BB0_2\n\tptr.add.s\t36, r1, r1\n\tld\tr1, r2\n\tsub!\tr2, r0, r1\n\tadd\t0, r0, r1\n\tadd.ne\t1, r0, r1\n\tadd\tr2, r0, stack-[13]\n\tsub!\tr2, r1, r1\n\tjump.ne\t@.BB0_2\n\tadd\t@CPI0_8[0], r0, r1\n\tst.2\t0, r1\n\tcontext.code_source\tr1\n\tst.2\t4, r1\n\tst.2\t36, r0\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.lt\tr2, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_9[0], r1, r1\n\tadd\t32773, r0, r2\n\tadd\tr4, r0, stack-[14]\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[14], r0, r3\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tand\t@CPI0_7[0], r1, r1\n\tcontext.caller\tr2\n\tsub!\tr2, r1, r1\n\tjump.ne\t@.BB0_204\n\tst.1\t0, r3\n\tst.1\t32, r0\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.lt\tr2, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_12[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[14], r0, r3\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[13], r0, r4\n\tsub!\tr4, r0, r2\n\tadd\t0, r0, r2\n\tadd.ne\t1, r0, r2\n\tand\t1, r2, r2\n\tld\tr1, r1\n\tsload\tr1, r1\n\tand!\t255, r1, r1\n\tadd\t0, r0, r1\n\tadd.eq\t1, r0, r1\n\tand\t1, r1, r1\n\tsub!\tr2, r1, r1\n\tjump.eq\t@.BB0_208\n\tld.1\t64, r1\n\tadd\t36, r1, r2\n\tst.1\tr2, r4\n\tadd\t@CPI0_15[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t4, r1, r2\n\tst.1\tr2, r3\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI0_16[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_10:\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r3, r2\n\tsub.s!\t32, r2, r2\n\tjump.lt\t@.BB0_2\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r2\n\tsub.s!\t@CPI0_17[0], r2, r4\n\tjump.gt\t@.BB0_2\n\tadd\t35, r2, r4\n\tadd\t@CPI0_18[0], r0, r5\n\tsub!\tr4, r3, r6\n\tadd\tr0, r0, r6\n\tadd.ge\tr5, r0, r6\n\tand\t@CPI0_18[0], r4, r4\n\tsub!\tr4, r0, r7\n\tadd.ge\tr0, r0, r5\n\tsub.s!\t@CPI0_18[0], r4, r4\n\tadd\tr6, r0, r4\n\tadd.eq\tr5, r0, r4\n\tsub!\tr4, r0, r4\n\tjump.ne\t@.BB0_2\n\tadd\t4, r2, r4\n\tptr.add\tr1, r4, r1\n\tld\tr1, r1\n\tadd\tr1, r0, stack-[12]\n\tsub.s!\t@CPI0_17[0], r1, r1\n\tjump.gt\t@.BB0_2\n\tadd\t36, r2, stack-[11]\n\tadd\tstack-[12], r0, r1\n\tmul\t192, r1, r1, r2\n\tadd\tstack-[11], r1, r1\n\tsub!\tr1, r3, r1\n\tjump.gt\t@.BB0_2\n\tcontext.caller\tr1\n\tadd\tr1, r0, stack-[14]\n\tst.1\t0, r1\n\tst.1\t32, r0\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.lt\tr2, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_12[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tsload\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_18\n.BB0_21:\n\tadd\t@CPI0_21[0], r0, r1\n\tst.1\t0, r1\n\tadd\tstack-[14], r0, r1\n\tjump\t@.BB0_22\n.BB0_187:\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r3, r2\n\tsub.s!\t32, r2, r2\n\tjump.lt\t@.BB0_2\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r2\n\tsub.s!\t@CPI0_17[0], r2, r4\n\tjump.gt\t@.BB0_2\n\tadd\t35, r2, r4\n\tadd\t@CPI0_18[0], r0, r5\n\tsub!\tr4, r3, r6\n\tadd\tr0, r0, r6\n\tadd.ge\tr5, r0, r6\n\tand\t@CPI0_18[0], r4, r4\n\tsub!\tr4, r0, r7\n\tadd.ge\tr0, r0, r5\n\tsub.s!\t@CPI0_18[0], r4, r4\n\tadd\tr6, r0, r4\n\tadd.eq\tr5, r0, r4\n\tsub!\tr4, r0, r4\n\tjump.ne\t@.BB0_2\n\tadd\t4, r2, r4\n\tptr.add\tr1, r4, r1\n\tld\tr1, r4\n\tsub.s!\t@CPI0_17[0], r4, r1\n\tjump.gt\t@.BB0_2\n\tadd\t36, r2, r2\n\tshl.s\t5, r4, r1\n\tadd\tr1, r2, r1\n\tsub!\tr1, r3, r1\n\tjump.gt\t@.BB0_2\n\tcontext.caller\tr1\n\tadd\tr1, r0, stack-[12]\n\tst.1\t0, r1\n\tst.1\t32, r0\n\tadd\t@CPI0_0[0], r0, r1\n\tadd\tr2, r0, stack-[13]\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.lt\tr2, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_12[0], r1, r1\n\tadd\t32784, r0, r2\n\tadd\tr4, r0, stack-[14]\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[14], r0, r3\n\tand!\t1, r2, r2\n\tadd\tstack-[13], r0, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tsload\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_196\n\tadd\t@CPI0_21[0], r0, r1\n\tst.1\t0, r1\n\tadd\tstack-[12], r0, r1\n.BB0_22:\n\tst.1\t4, r1\n\tadd\t@CPI0_22[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_204:\n\tld.1\t64, r1\n\tadd\t@CPI0_10[0], r0, r2\n.BB0_28:\n\tst.1\tr1, r2\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI0_11[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_18:\n\tsub!\tstack-[12], r0, r1\n\tjump.ne\t@.BB0_19\n\tld.1\t64, r4\n.BB0_98:\n\tadd\t@CPI0_38[0], r0, r1\n\tst.1\tr4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r4, r2\n\tadd.lt\tr4, r0, r1\n\tjump\t@.BB0_99\n.BB0_196:\n\tadd\tr2, r0, r1\n\tadd\tr3, r0, r2\n\tnear_call\tr0, @fun_performERC1155BatchTransfers, @DEFAULT_UNWIND\n\tadd\t@CPI0_19[0], r0, r1\n.BB0_197:\n\tld.1\t64, r2\n\tst.1\tr2, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.lt\tr2, r0, r1\n.BB0_99:\n\tshl.s\t64, r1, r1\n\tor\t@CPI0_20[0], r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_208:\n\tst.1\t0, r3\n\tst.1\t32, r0\n\tadd\t@CPI0_0[0], r0, r3\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_12[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[14], r0, r5\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tsload\tr1, r2\n\tsub.s\t256, r0, r3\n\tand\tr2, r3, r2\n\tadd\tstack-[13], r0, r3\n\tor\tr2, r3, r2\n\tsstore\tr1, r2\n\tld.1\t64, r1\n\tst.1\tr1, r3\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd\t@CPI0_0[0], r0, r4\n\tadd.ge\tr4, r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr4, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_13[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t2, r0, r3\n\tadd\t@CPI0_14[0], r0, r4\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r1\n\tjump.eq\t@.BB0_2\n\tadd\t@CPI0_0[0], r0, r1\n\tld.1\t64, r2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.lt\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_19:\n\tadd\tr0, r0, r2\n\tjump\t@.BB0_23\n.BB0_47:\n\tst.1\t128, r7\n\tst.1\t160, r6\n\tst.1\t192, r5\n.BB0_97:\n\tst.1\t64, r4\n\tst.1\t96, r0\n\tadd\tstack-[14], r0, r2\n\tadd\t1, r2, r2\n\tsub.s!\tstack-[12], r2, r1\n\tjump.ge\t@.BB0_98\n.BB0_23:\n\tadd\tr2, r0, stack-[14]\n\tmul\t192, r2, r1, r2\n\tadd\tstack-[11], r1, r2\n\tptr.add\tstack[@ptr_calldata], r0, r1\n\tptr.add\tr1, r2, r3\n\tld\tr3, r3\n\tsub.s!\t3, r3, r4\n\tjump.gt\t@.BB0_2\n\tsub.s!\t1, r3, r4\n\tjump.ne\t@.BB0_25\n\tadd\t32, r2, r2\n\tptr.add\tr1, r2, r3\n\tld\tr3, r5\n\tsub.s!\t@CPI0_7[0], r5, r3\n\tjump.gt\t@.BB0_2\n\tadd\t32, r2, r2\n\tptr.add\tr1, r2, r3\n\tld\tr3, r6\n\tsub.s!\t@CPI0_7[0], r6, r3\n\tjump.gt\t@.BB0_2\n\tadd\t32, r2, r2\n\tptr.add\tr1, r2, r3\n\tld\tr3, r7\n\tsub.s!\t@CPI0_7[0], r7, r3\n\tjump.gt\t@.BB0_2\n\tadd\t64, r2, r2\n\tptr.add\tr1, r2, r1\n\tld\tr1, r2\n\tld.1\t64, r4\n\tadd\t@CPI0_32[0], r0, r1\n\tst.1\t0, r1\n\tst.1\t4, r6\n\tst.1\t36, r7\n\tadd\tr2, r0, stack-[7]\n\tst.1\t68, r2\n\tcontext.gas_left\tr1\n\tsub.s!\t4, r5, r2\n\tjump.ne\t@.BB0_73\n\tadd\t1, r0, r8\n\tadd\tstack[@returndatasize], r0, r3\n\tjump\t@.BB0_78\n.BB0_25:\n\tsub.s!\t2, r3, r4\n\tjump.ne\t@.BB0_26\n\tadd\t160, r2, r3\n\tptr.add\tr1, r3, r2\n\tld\tr2, r2\n\tsub.s!\t1, r2, r4\n\tjump.ne\t@.BB0_49\n\tsub.s\t128, r3, r2\n\tptr.add\tr1, r2, r3\n\tld\tr3, r4\n\tsub.s!\t@CPI0_7[0], r4, r3\n\tjump.gt\t@.BB0_2\n\tadd\t32, r2, r2\n\tptr.add\tr1, r2, r3\n\tld\tr3, r3\n\tadd\tr3, r0, stack-[9]\n\tsub.s!\t@CPI0_7[0], r3, r3\n\tjump.gt\t@.BB0_2\n\tadd\t32, r2, r2\n\tptr.add\tr1, r2, r3\n\tld\tr3, r3\n\tadd\tr3, r0, stack-[8]\n\tsub.s!\t@CPI0_7[0], r3, r3\n\tjump.gt\t@.BB0_2\n\tadd\t32, r2, r2\n\tptr.add\tr1, r2, r1\n\tld\tr1, r1\n\tadd\tr1, r0, stack-[7]\n\tadd\t@CPI0_23[0], r0, r1\n\tst.2\t0, r1\n\tst.2\t4, r4\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_24[0], r1, r1\n\tadd\t32770, r0, r2\n\tadd\tr4, r0, stack-[10]\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[10], r0, r3\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_55\n\tld.1\t64, r4\n\tadd\t@CPI0_32[0], r0, r1\n\tst.1\t0, r1\n\tadd\tstack-[9], r0, r1\n\tst.1\t4, r1\n\tadd\tstack-[8], r0, r1\n\tst.1\t36, r1\n\tadd\tstack-[7], r0, r1\n\tst.1\t68, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t4, r3, r2\n\tjump.eq\t@.BB0_97\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_33[0], r1, r1\n\tadd\tr3, r0, r2\n\tadd\tr4, r0, stack-[13]\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tstack-[13], r0, r4\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_97\n\tjump\t@.BB0_58\n.BB0_26:\n\tsub.s!\t3, r3, r3\n\tjump.ne\t@.BB0_27\n\tadd\t32, r2, r2\n\tptr.add\tr1, r2, r3\n\tld\tr3, r4\n\tsub.s!\t@CPI0_7[0], r4, r3\n\tjump.gt\t@.BB0_2\n\tadd\t32, r2, r2\n\tptr.add\tr1, r2, r3\n\tld\tr3, r3\n\tadd\tr3, r0, stack-[9]\n\tsub.s!\t@CPI0_7[0], r3, r3\n\tjump.gt\t@.BB0_2\n\tadd\t32, r2, r2\n\tptr.add\tr1, r2, r3\n\tld\tr3, r3\n\tadd\tr3, r0, stack-[8]\n\tsub.s!\t@CPI0_7[0], r3, r3\n\tjump.gt\t@.BB0_2\n\tadd\t64, r2, r3\n\tptr.add\tr1, r3, r3\n\tadd\t32, r2, r2\n\tptr.add\tr1, r2, r1\n\tld\tr1, r1\n\tadd\tr1, r0, stack-[6]\n\tld\tr3, r1\n\tadd\tr1, r0, stack-[7]\n\tadd\t@CPI0_23[0], r0, r1\n\tst.2\t0, r1\n\tst.2\t4, r4\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_24[0], r1, r1\n\tadd\t32770, r0, r2\n\tadd\tr4, r0, stack-[10]\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[10], r0, r3\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_34\n\tld.1\t192, r5\n\tld.1\t160, r6\n\tld.1\t128, r7\n\tld.1\t64, r4\n\tadd\t@CPI0_25[0], r0, r1\n\tst.1\t0, r1\n\tadd\tstack-[9], r0, r1\n\tst.1\t4, r1\n\tadd\tstack-[8], r0, r1\n\tst.1\t36, r1\n\tadd\tstack-[6], r0, r1\n\tst.1\t68, r1\n\tadd\tstack-[7], r0, r1\n\tst.1\t100, r1\n\tadd\t160, r0, r1\n\tst.1\t132, r1\n\tst.1\t164, r0\n\tcontext.gas_left\tr1\n\tsub.s!\t4, r3, r2\n\tjump.eq\t@.BB0_47\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_26[0], r1, r1\n\tadd\tr3, r0, r2\n\tadd\tr4, r0, stack-[13]\n\tadd\tr5, r0, stack-[5]\n\tadd\tr6, r0, stack-[4]\n\tadd\tr7, r0, stack-[3]\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tstack-[3], r0, r7\n\tadd\tstack-[4], r0, r6\n\tadd\tstack-[5], r0, r5\n\tadd\tstack-[13], r0, r4\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_47\n\tjump\t@.BB0_37\n.BB0_73:\n\tadd\tr7, r0, stack-[8]\n\tadd\tr6, r0, stack-[9]\n\tadd\tr4, r0, stack-[13]\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_33[0], r1, r1\n\tadd\tr5, r0, stack-[10]\n\tadd\tr5, r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t32, r3, r4\n\tadd\t32, r0, r5\n\tadd.lt\tr3, r0, r5\n\tshr.s!\t5, r5, r4\n\tjump.eq\t@.BB0_212\n\tadd\tr0, r0, r6\n.BB0_75:\n\tshl.s\t5, r6, r7\n\tptr.add\tr1, r7, r8\n\tld\tr8, r8\n\tst.1\tr7, r8\n\tadd\t1, r6, r6\n\tsub!\tr6, r4, r7\n\tjump.lt\t@.BB0_75\n.BB0_212:\n\tand!\t31, r5, r5\n\tjump.eq\t@.BB0_77\n\tshl.s\t3, r5, r5\n\tshl.s\t5, r4, r4\n\tld.1\tr4, r6\n\tshl\tr6, r5, r6\n\tshr\tr6, r5, r6\n\tptr.add\tr1, r4, r7\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r6, r5\n\tst.1\tr4, r5\n.BB0_77:\n\tand\t1, r2, r8\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tadd\tstack-[13], r0, r4\n\tadd\tstack-[10], r0, r5\n\tadd\tstack-[9], r0, r6\n\tadd\tstack-[8], r0, r7\n.BB0_78:\n\tld.1\t0, r1\n\tsub.s!\t1, r1, r1\n\tadd\t0, r0, r1\n\tadd.eq\t1, r0, r1\n\tsub.s!\t31, r3, r2\n\tadd\t0, r0, r2\n\tadd.gt\t1, r0, r2\n\tand\tr2, r1, r1\n\tsub!\tr3, r0, r2\n\tadd\t0, r0, r2\n\tadd.eq\t1, r0, r2\n\tor\tr2, r1, r1\n\tand\tr1, r8, r2\n\tadd\t0, r0, r1\n\tadd.ne\t1, r0, r1\n\tand!\tr2, r1, r1\n\tjump.ne\t@.BB0_97\n\tadd\tr2, r0, stack-[6]\n\tadd\tr8, r0, stack-[5]\n\tadd\tr4, r0, stack-[13]\n\tadd\t@CPI0_23[0], r0, r1\n\tst.2\t0, r1\n\tst.2\t4, r5\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_24[0], r1, r1\n\tadd\t32770, r0, r2\n\tadd\tr5, r0, stack-[10]\n\tadd\tr6, r0, stack-[9]\n\tadd\tr7, r0, stack-[8]\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tadd\t0, r0, r1\n\tadd.ne\t1, r0, r1\n\tadd\tstack-[6], r0, r2\n\tand!\tr2, r1, r1\n\tadd\tstack-[13], r0, r4\n\tjump.ne\t@.BB0_97\n\tsub!\tr2, r0, r1\n\tjump.ne\t@.BB0_83\n\tsub!\tstack-[5], r0, r1\n\tjump.ne\t@.BB0_85\n\tadd!\tstack[@returndatasize], r0, r1\n\tjump.eq\t@.BB0_87\n\tadd\t31, r1, r2\n\tshr.s\t5, r2, r3\n\tmul\t3, r3, r2, r4\n\tadd\tstack-[13], r0, r4\n\tshr.s\t5, r4, r4\n\tsub!\tr3, r4, r5\n\tjump.le\t@.BB0_91\n\tsub\tr3, r4, r5\n\tmul\t3, r5, r5, r6\n\tadd\tr5, r2, r2\n\tmul\tr4, r4, r4, r5\n\tmul\tr3, r3, r3, r5\n\tsub\tr3, r4, r3\n\tshr.s\t9, r3, r3\n\tadd\tr2, r3, r2\n.BB0_91:\n\tadd\t32, r2, r2\n\tcontext.gas_left\tr3\n\tsub!\tr2, r3, r2\n\tjump.ge\t@.BB0_87\n\tptr.add\tstack[@ptr_return_data], r0, r2\n\tand\t31, r1, r4\n\tshr.s!\t5, r1, r3\n\tjump.eq\t@.BB0_211\n\tadd\tr0, r0, r5\n.BB0_94:\n\tshl.s\t5, r5, r6\n\tptr.add\tr2, r6, r7\n\tld\tr7, r7\n\tst.1\tr6, r7\n\tadd\t1, r5, r5\n\tsub!\tr5, r3, r6\n\tjump.lt\t@.BB0_94\n.BB0_211:\n\tsub!\tr4, r0, r5\n\tjump.eq\t@.BB0_96\n\tshl.s\t3, r4, r4\n\tshl.s\t5, r3, r3\n\tld.1\tr3, r5\n\tshl\tr5, r4, r5\n\tshr\tr5, r4, r5\n\tptr.add\tr2, r3, r2\n\tld\tr2, r2\n\tsub\t256, r4, r4\n\tshr\tr2, r4, r2\n\tshl\tr2, r4, r2\n\tor\tr2, r5, r2\n\tst.1\tr3, r2\n\tjump\t@.BB0_96\n.BB0_112:\n\tsub!\tstack-[12], r0, r1\n\tjump.ne\t@.BB0_113\n.BB0_186:\n\tadd\tstack-[1], r0, r1\n\tadd\tstack-[2], r0, r2\n\tnear_call\tr0, @fun_performERC1155BatchTransfers, @DEFAULT_UNWIND\n\tadd\t@CPI0_36[0], r0, r1\n\tjump\t@.BB0_197\n.BB0_113:\n\tadd\tr0, r0, r2\n\tjump\t@.BB0_115\n.BB0_137:\n\tst.1\t128, r7\n\tst.1\t160, r6\n\tst.1\t192, r5\n.BB0_185:\n\tst.1\t64, r4\n\tst.1\t96, r0\n\tadd\tstack-[14], r0, r2\n\tadd\t1, r2, r2\n\tsub.s!\tstack-[12], r2, r1\n\tjump.ge\t@.BB0_186\n.BB0_115:\n\tadd\tr2, r0, stack-[14]\n\tmul\t192, r2, r1, r2\n\tadd\tstack-[11], r1, r2\n\tptr.add\tstack[@ptr_calldata], r0, r1\n\tptr.add\tr1, r2, r3\n\tld\tr3, r3\n\tsub.s!\t3, r3, r4\n\tjump.gt\t@.BB0_2\n\tsub.s!\t1, r3, r4\n\tjump.ne\t@.BB0_117\n\tadd\t32, r2, r2\n\tptr.add\tr1, r2, r3\n\tld\tr3, r5\n\tsub.s!\t@CPI0_7[0], r5, r3\n\tjump.gt\t@.BB0_2\n\tadd\t32, r2, r2\n\tptr.add\tr1, r2, r3\n\tld\tr3, r6\n\tsub.s!\t@CPI0_7[0], r6, r3\n\tjump.gt\t@.BB0_2\n\tadd\t32, r2, r2\n\tptr.add\tr1, r2, r3\n\tld\tr3, r7\n\tsub.s!\t@CPI0_7[0], r7, r3\n\tjump.gt\t@.BB0_2\n\tadd\t64, r2, r2\n\tptr.add\tr1, r2, r1\n\tld\tr1, r2\n\tld.1\t64, r4\n\tadd\t@CPI0_32[0], r0, r1\n\tst.1\t0, r1\n\tst.1\t4, r6\n\tst.1\t36, r7\n\tadd\tr2, r0, stack-[7]\n\tst.1\t68, r2\n\tcontext.gas_left\tr1\n\tsub.s!\t4, r5, r2\n\tjump.ne\t@.BB0_163\n\tadd\t1, r0, r8\n\tadd\tstack[@returndatasize], r0, r3\n\tjump\t@.BB0_168\n.BB0_117:\n\tsub.s!\t2, r3, r4\n\tjump.ne\t@.BB0_118\n\tadd\t160, r2, r3\n\tptr.add\tr1, r3, r2\n\tld\tr2, r2\n\tsub.s!\t1, r2, r4\n\tjump.ne\t@.BB0_139\n\tsub.s\t128, r3, r2\n\tptr.add\tr1, r2, r3\n\tld\tr3, r4\n\tsub.s!\t@CPI0_7[0], r4, r3\n\tjump.gt\t@.BB0_2\n\tadd\t32, r2, r2\n\tptr.add\tr1, r2, r3\n\tld\tr3, r3\n\tadd\tr3, r0, stack-[9]\n\tsub.s!\t@CPI0_7[0], r3, r3\n\tjump.gt\t@.BB0_2\n\tadd\t32, r2, r2\n\tptr.add\tr1, r2, r3\n\tld\tr3, r3\n\tadd\tr3, r0, stack-[8]\n\tsub.s!\t@CPI0_7[0], r3, r3\n\tjump.gt\t@.BB0_2\n\tadd\t32, r2, r2\n\tptr.add\tr1, r2, r1\n\tld\tr1, r1\n\tadd\tr1, r0, stack-[7]\n\tadd\t@CPI0_23[0], r0, r1\n\tst.2\t0, r1\n\tst.2\t4, r4\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_24[0], r1, r1\n\tadd\t32770, r0, r2\n\tadd\tr4, r0, stack-[10]\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[10], r0, r3\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_145\n\tld.1\t64, r4\n\tadd\t@CPI0_32[0], r0, r1\n\tst.1\t0, r1\n\tadd\tstack-[9], r0, r1\n\tst.1\t4, r1\n\tadd\tstack-[8], r0, r1\n\tst.1\t36, r1\n\tadd\tstack-[7], r0, r1\n\tst.1\t68, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t4, r3, r2\n\tjump.eq\t@.BB0_185\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_33[0], r1, r1\n\tadd\tr3, r0, r2\n\tadd\tr4, r0, stack-[13]\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tstack-[13], r0, r4\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_185\n\tjump\t@.BB0_148\n.BB0_118:\n\tsub.s!\t3, r3, r3\n\tjump.ne\t@.BB0_27\n\tadd\t32, r2, r2\n\tptr.add\tr1, r2, r3\n\tld\tr3, r4\n\tsub.s!\t@CPI0_7[0], r4, r3\n\tjump.gt\t@.BB0_2\n\tadd\t32, r2, r2\n\tptr.add\tr1, r2, r3\n\tld\tr3, r3\n\tadd\tr3, r0, stack-[9]\n\tsub.s!\t@CPI0_7[0], r3, r3\n\tjump.gt\t@.BB0_2\n\tadd\t32, r2, r2\n\tptr.add\tr1, r2, r3\n\tld\tr3, r3\n\tadd\tr3, r0, stack-[8]\n\tsub.s!\t@CPI0_7[0], r3, r3\n\tjump.gt\t@.BB0_2\n\tadd\t64, r2, r3\n\tptr.add\tr1, r3, r3\n\tadd\t32, r2, r2\n\tptr.add\tr1, r2, r1\n\tld\tr1, r1\n\tadd\tr1, r0, stack-[6]\n\tld\tr3, r1\n\tadd\tr1, r0, stack-[7]\n\tadd\t@CPI0_23[0], r0, r1\n\tst.2\t0, r1\n\tst.2\t4, r4\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_24[0], r1, r1\n\tadd\t32770, r0, r2\n\tadd\tr4, r0, stack-[10]\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[10], r0, r3\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_124\n\tld.1\t192, r5\n\tld.1\t160, r6\n\tld.1\t128, r7\n\tld.1\t64, r4\n\tadd\t@CPI0_25[0], r0, r1\n\tst.1\t0, r1\n\tadd\tstack-[9], r0, r1\n\tst.1\t4, r1\n\tadd\tstack-[8], r0, r1\n\tst.1\t36, r1\n\tadd\tstack-[6], r0, r1\n\tst.1\t68, r1\n\tadd\tstack-[7], r0, r1\n\tst.1\t100, r1\n\tadd\t160, r0, r1\n\tst.1\t132, r1\n\tst.1\t164, r0\n\tcontext.gas_left\tr1\n\tsub.s!\t4, r3, r2\n\tjump.eq\t@.BB0_137\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_26[0], r1, r1\n\tadd\tr3, r0, r2\n\tadd\tr4, r0, stack-[13]\n\tadd\tr5, r0, stack-[5]\n\tadd\tr6, r0, stack-[4]\n\tadd\tr7, r0, stack-[3]\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tstack-[3], r0, r7\n\tadd\tstack-[4], r0, r6\n\tadd\tstack-[5], r0, r5\n\tadd\tstack-[13], r0, r4\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_137\n\tjump\t@.BB0_127\n.BB0_163:\n\tadd\tr7, r0, stack-[8]\n\tadd\tr6, r0, stack-[9]\n\tadd\tr4, r0, stack-[13]\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_33[0], r1, r1\n\tadd\tr5, r0, stack-[10]\n\tadd\tr5, r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t32, r3, r4\n\tadd\t32, r0, r5\n\tadd.lt\tr3, r0, r5\n\tshr.s!\t5, r5, r4\n\tjump.eq\t@.BB0_216\n\tadd\tr0, r0, r6\n.BB0_165:\n\tshl.s\t5, r6, r7\n\tptr.add\tr1, r7, r8\n\tld\tr8, r8\n\tst.1\tr7, r8\n\tadd\t1, r6, r6\n\tsub!\tr6, r4, r7\n\tjump.lt\t@.BB0_165\n.BB0_216:\n\tand!\t31, r5, r5\n\tjump.eq\t@.BB0_167\n\tshl.s\t3, r5, r5\n\tshl.s\t5, r4, r4\n\tld.1\tr4, r6\n\tshl\tr6, r5, r6\n\tshr\tr6, r5, r6\n\tptr.add\tr1, r4, r7\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r6, r5\n\tst.1\tr4, r5\n.BB0_167:\n\tand\t1, r2, r8\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tadd\tstack-[13], r0, r4\n\tadd\tstack-[10], r0, r5\n\tadd\tstack-[9], r0, r6\n\tadd\tstack-[8], r0, r7\n.BB0_168:\n\tld.1\t0, r1\n\tsub.s!\t1, r1, r1\n\tadd\t0, r0, r1\n\tadd.eq\t1, r0, r1\n\tsub.s!\t31, r3, r2\n\tadd\t0, r0, r2\n\tadd.gt\t1, r0, r2\n\tand\tr2, r1, r1\n\tsub!\tr3, r0, r2\n\tadd\t0, r0, r2\n\tadd.eq\t1, r0, r2\n\tor\tr2, r1, r1\n\tand\tr1, r8, r2\n\tadd\t0, r0, r1\n\tadd.ne\t1, r0, r1\n\tand!\tr2, r1, r1\n\tjump.ne\t@.BB0_185\n\tadd\tr2, r0, stack-[6]\n\tadd\tr8, r0, stack-[5]\n\tadd\tr4, r0, stack-[13]\n\tadd\t@CPI0_23[0], r0, r1\n\tst.2\t0, r1\n\tst.2\t4, r5\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_24[0], r1, r1\n\tadd\t32770, r0, r2\n\tadd\tr5, r0, stack-[10]\n\tadd\tr6, r0, stack-[9]\n\tadd\tr7, r0, stack-[8]\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tadd\t0, r0, r1\n\tadd.ne\t1, r0, r1\n\tadd\tstack-[6], r0, r2\n\tand!\tr2, r1, r1\n\tadd\tstack-[13], r0, r4\n\tjump.ne\t@.BB0_185\n\tsub!\tr2, r0, r1\n\tjump.ne\t@.BB0_173\n\tsub!\tstack-[5], r0, r1\n\tjump.ne\t@.BB0_175\n\tadd!\tstack[@returndatasize], r0, r1\n\tjump.eq\t@.BB0_177\n\tadd\t31, r1, r2\n\tshr.s\t5, r2, r3\n\tmul\t3, r3, r2, r4\n\tadd\tstack-[13], r0, r4\n\tshr.s\t5, r4, r4\n\tsub!\tr3, r4, r5\n\tjump.le\t@.BB0_179\n\tsub\tr3, r4, r5\n\tmul\t3, r5, r5, r6\n\tadd\tr5, r2, r2\n\tmul\tr4, r4, r4, r5\n\tmul\tr3, r3, r3, r5\n\tsub\tr3, r4, r3\n\tshr.s\t9, r3, r3\n\tadd\tr2, r3, r2\n.BB0_179:\n\tadd\t32, r2, r2\n\tcontext.gas_left\tr3\n\tsub!\tr2, r3, r2\n\tjump.ge\t@.BB0_177\n\tptr.add\tstack[@ptr_return_data], r0, r2\n\tand\t31, r1, r4\n\tshr.s!\t5, r1, r3\n\tjump.eq\t@.BB0_215\n\tadd\tr0, r0, r5\n.BB0_182:\n\tshl.s\t5, r5, r6\n\tptr.add\tr2, r6, r7\n\tld\tr7, r7\n\tst.1\tr6, r7\n\tadd\t1, r5, r5\n\tsub!\tr5, r3, r6\n\tjump.lt\t@.BB0_182\n.BB0_215:\n\tsub!\tr4, r0, r5\n\tjump.eq\t@.BB0_184\n\tshl.s\t3, r4, r4\n\tshl.s\t5, r3, r3\n\tld.1\tr3, r5\n\tshl\tr5, r4, r5\n\tshr\tr5, r4, r5\n\tptr.add\tr2, r3, r2\n\tld\tr2, r2\n\tsub\t256, r4, r4\n\tshr\tr2, r4, r2\n\tshl\tr2, r4, r2\n\tor\tr2, r5, r2\n\tst.1\tr3, r2\n.BB0_184:\n.BB0_96:\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t96, r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_27:\n\tld.1\t64, r1\n\tadd\t@CPI0_37[0], r0, r2\n\tjump\t@.BB0_28\n.BB0_55:\n.BB0_34:\n\tadd\t@CPI0_29[0], r0, r1\n\tst.1\t0, r1\n\tst.1\t32, r3\n\tadd\t@CPI0_30[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_58:\n\tsub!\tr3, r0, r2\n\tjump.eq\t@.BB0_60\n\tadd\t31, r3, r2\n\tshr.s\t5, r2, r4\n\tmul\t3, r4, r2, r5\n\tadd\tstack-[13], r0, r5\n\tshr.s\t5, r5, r5\n\tsub!\tr4, r5, r6\n\tjump.le\t@.BB0_62\n\tsub\tr4, r5, r6\n\tmul\t3, r6, r6, r7\n\tadd\tr6, r2, r2\n\tmul\tr5, r5, r5, r6\n\tmul\tr4, r4, r4, r6\n\tsub\tr4, r5, r4\n\tshr.s\t9, r4, r4\n\tadd\tr2, r4, r2\n.BB0_62:\n\tadd\t32, r2, r2\n\tcontext.gas_left\tr4\n\tsub!\tr2, r4, r2\n\tjump.ge\t@.BB0_60\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r2\n\tjump.eq\t@.BB0_213\n\tadd\tr0, r0, r5\n.BB0_65:\n\tshl.s\t5, r5, r6\n\tptr.add\tr1, r6, r7\n\tld\tr7, r7\n\tst.1\tr6, r7\n\tadd\t1, r5, r5\n\tsub!\tr5, r2, r6\n\tjump.lt\t@.BB0_65\n.BB0_213:\n\tsub!\tr4, r0, r5\n\tjump.eq\t@.BB0_67\n\tshl.s\t3, r4, r4\n\tshl.s\t5, r2, r2\n\tld.1\tr2, r5\n\tshl\tr5, r4, r5\n\tshr\tr5, r4, r5\n\tptr.add\tr1, r2, r1\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r5, r1\n\tst.1\tr2, r1\n.BB0_67:\n\tshl.s\t96, r3, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_37:\n\tsub!\tr3, r0, r2\n\tjump.eq\t@.BB0_39\n\tadd\t31, r3, r2\n\tshr.s\t5, r2, r4\n\tmul\t3, r4, r2, r5\n\tadd\tstack-[13], r0, r5\n\tshr.s\t5, r5, r5\n\tsub!\tr4, r5, r6\n\tjump.le\t@.BB0_41\n\tsub\tr4, r5, r6\n\tmul\t3, r6, r6, r7\n\tadd\tr6, r2, r2\n\tmul\tr5, r5, r5, r6\n\tmul\tr4, r4, r4, r6\n\tsub\tr4, r5, r4\n\tshr.s\t9, r4, r4\n\tadd\tr2, r4, r2\n.BB0_41:\n\tadd\t32, r2, r2\n\tcontext.gas_left\tr4\n\tsub!\tr2, r4, r2\n\tjump.ge\t@.BB0_39\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r2\n\tjump.eq\t@.BB0_214\n\tadd\tr0, r0, r5\n.BB0_44:\n\tshl.s\t5, r5, r6\n\tptr.add\tr1, r6, r7\n\tld\tr7, r7\n\tst.1\tr6, r7\n\tadd\t1, r5, r5\n\tsub!\tr5, r2, r6\n\tjump.lt\t@.BB0_44\n.BB0_214:\n\tsub!\tr4, r0, r5\n\tjump.eq\t@.BB0_46\n\tshl.s\t3, r4, r4\n\tshl.s\t5, r2, r2\n\tld.1\tr2, r5\n\tshl\tr5, r4, r5\n\tshr\tr5, r4, r5\n\tptr.add\tr1, r2, r1\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r5, r1\n\tst.1\tr2, r1\n.BB0_46:\n\tshl.s\t96, r3, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_139:\n.BB0_49:\n\tld.1\t64, r1\n\tadd\t@CPI0_31[0], r0, r3\n\tst.1\tr1, r3\n\tadd\t4, r1, r3\n\tst.1\tr3, r2\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI0_22[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_145:\n\tjump\t@.BB0_34\n.BB0_124:\n\tjump\t@.BB0_34\n.BB0_148:\n\tsub!\tr3, r0, r2\n\tjump.eq\t@.BB0_150\n\tadd\t31, r3, r2\n\tshr.s\t5, r2, r4\n\tmul\t3, r4, r2, r5\n\tadd\tstack-[13], r0, r5\n\tshr.s\t5, r5, r5\n\tsub!\tr4, r5, r6\n\tjump.le\t@.BB0_152\n\tsub\tr4, r5, r6\n\tmul\t3, r6, r6, r7\n\tadd\tr6, r2, r2\n\tmul\tr5, r5, r5, r6\n\tmul\tr4, r4, r4, r6\n\tsub\tr4, r5, r4\n\tshr.s\t9, r4, r4\n\tadd\tr2, r4, r2\n.BB0_152:\n\tadd\t32, r2, r2\n\tcontext.gas_left\tr4\n\tsub!\tr2, r4, r2\n\tjump.ge\t@.BB0_150\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r2\n\tjump.eq\t@.BB0_217\n\tadd\tr0, r0, r5\n.BB0_155:\n\tshl.s\t5, r5, r6\n\tptr.add\tr1, r6, r7\n\tld\tr7, r7\n\tst.1\tr6, r7\n\tadd\t1, r5, r5\n\tsub!\tr5, r2, r6\n\tjump.lt\t@.BB0_155\n.BB0_217:\n\tsub!\tr4, r0, r5\n\tjump.eq\t@.BB0_157\n\tshl.s\t3, r4, r4\n\tshl.s\t5, r2, r2\n\tld.1\tr2, r5\n\tshl\tr5, r4, r5\n\tshr\tr5, r4, r5\n\tptr.add\tr1, r2, r1\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r5, r1\n\tst.1\tr2, r1\n.BB0_157:\n\tshl.s\t96, r3, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_127:\n\tsub!\tr3, r0, r2\n\tjump.eq\t@.BB0_129\n\tadd\t31, r3, r2\n\tshr.s\t5, r2, r4\n\tmul\t3, r4, r2, r5\n\tadd\tstack-[13], r0, r5\n\tshr.s\t5, r5, r5\n\tsub!\tr4, r5, r6\n\tjump.le\t@.BB0_131\n\tsub\tr4, r5, r6\n\tmul\t3, r6, r6, r7\n\tadd\tr6, r2, r2\n\tmul\tr5, r5, r5, r6\n\tmul\tr4, r4, r4, r6\n\tsub\tr4, r5, r4\n\tshr.s\t9, r4, r4\n\tadd\tr2, r4, r2\n.BB0_131:\n\tadd\t32, r2, r2\n\tcontext.gas_left\tr4\n\tsub!\tr2, r4, r2\n\tjump.ge\t@.BB0_129\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r2\n\tjump.eq\t@.BB0_218\n\tadd\tr0, r0, r5\n.BB0_134:\n\tshl.s\t5, r5, r6\n\tptr.add\tr1, r6, r7\n\tld\tr7, r7\n\tst.1\tr6, r7\n\tadd\t1, r5, r5\n\tsub!\tr5, r2, r6\n\tjump.lt\t@.BB0_134\n.BB0_218:\n\tsub!\tr4, r0, r5\n\tjump.eq\t@.BB0_136\n\tshl.s\t3, r4, r4\n\tshl.s\t5, r2, r2\n\tld.1\tr2, r5\n\tshl\tr5, r4, r5\n\tshr\tr5, r4, r5\n\tptr.add\tr1, r2, r1\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r5, r1\n\tst.1\tr2, r1\n.BB0_136:\n\tshl.s\t96, r3, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_173:\n.BB0_83:\n\tadd\t@CPI0_29[0], r0, r1\n\tst.1\t0, r1\n\tadd\tstack-[10], r0, r1\n\tst.1\t32, r1\n\tadd\t@CPI0_30[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_150:\n.BB0_60:\n\tadd\t@CPI0_27[0], r0, r1\n\tst.1\t0, r1\n\tadd\tstack-[10], r0, r1\n\tst.1\t32, r1\n\tadd\tstack-[9], r0, r1\n\tst.1\t64, r1\n\tadd\tstack-[8], r0, r1\n\tst.1\t96, r1\n\tadd\tstack-[7], r0, r1\n\tst.1\t128, r1\n\tadd\t1, r0, r1\n\tjump\t@.BB0_89\n.BB0_129:\n.BB0_39:\n\tadd\t@CPI0_27[0], r0, r1\n\tst.1\t0, r1\n\tadd\tstack-[10], r0, r1\n\tst.1\t32, r1\n\tadd\tstack-[9], r0, r1\n\tst.1\t64, r1\n\tadd\tstack-[8], r0, r1\n\tst.1\t96, r1\n\tadd\tstack-[6], r0, r1\n\tst.1\t128, r1\n\tjump\t@.BB0_88\n.BB0_175:\n.BB0_85:\n\tadd\t@CPI0_34[0], r0, r1\n\tst.1\t0, r1\n\tadd\tstack-[10], r0, r1\n\tst.1\t32, r1\n\tadd\tstack-[9], r0, r1\n\tst.1\t64, r1\n\tadd\tstack-[8], r0, r1\n\tst.1\t96, r1\n\tadd\tstack-[7], r0, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_35[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_177:\n.BB0_87:\n\tadd\t@CPI0_27[0], r0, r1\n\tst.1\t0, r1\n\tadd\tstack-[10], r0, r1\n\tst.1\t32, r1\n\tadd\tstack-[9], r0, r1\n\tst.1\t64, r1\n\tadd\tstack-[8], r0, r1\n\tst.1\t96, r1\n\tst.1\t128, r0\n.BB0_88:\n\tadd\tstack-[7], r0, r1\n.BB0_89:\n\tst.1\t160, r1\n\tadd\t@CPI0_28[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end0:\n\nfun_performERC1155BatchTransfers:\n.func_begin1:\n\tnop\tstack+=[8]\n\tadd\tr1, r0, stack-[4]\n\tadd\t@CPI1_0[0], r0, r1\n\tst.1\t32, r1\n\tadd\tr2, r0, stack-[3]\n\tsub!\tr2, r0, r1\n\tjump.eq\t@.BB1_5\n\tptr.add\tstack[@ptr_calldata], r0, r3\n\tadd\t32770, r0, stack-[2]\n\tadd\tr0, r0, r2\n\tadd\tstack-[4], r0, r8\n\tjump\t@.BB1_2\n.BB1_20:\n\tadd\tstack-[5], r0, r2\n\tadd\t1, r2, r2\n\tsub.s!\tstack-[3], r2, r1\n\tjump.ge\t@.BB1_5\n.BB1_2:\n\tadd\tr2, r0, stack-[5]\n\tadd\tr8, r0, stack-[8]\n\tptr.add\tr3, r8, r1\n\tld\tr1, r1\n\tadd\tstack-[4], r1, stack-[6]\n\tptr.add.s\tstack-[6], r3, r1\n\tld\tr1, r1\n\tadd\t@CPI1_1[0], r0, r2\n\tst.2\t0, r2\n\tadd\tr1, r0, stack-[7]\n\tst.2\t4, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI1_2[0], r1, r2\n\tadd.ge\t@CPI1_2[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI1_3[0], r1, r1\n\tadd\tstack-[2], r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB1_3\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB1_6\n\tadd\tstack-[6], r0, r7\n\tadd\t160, r7, r1\n\tptr.add\tstack[@ptr_calldata], r0, r3\n\tptr.add\tr3, r1, r1\n\tld\tr1, r2\n\tshl.s\t5, r2, r4\n\tadd\t192, r4, r5\n\tadd\tr5, r7, r6\n\tadd\t96, r7, r4\n\tadd\t128, r7, r7\n\tptr.add\tr3, r6, r8\n\tptr.add\tr3, r7, r6\n\tptr.add\tr3, r4, r7\n\tld\tr6, r6\n\tld\tr7, r7\n\tld\tr8, r8\n\tsub!\tr2, r8, r8\n\tjump.ne\t@.BB1_10\n\tsub.s!\t160, r7, r7\n\tjump.ne\t@.BB1_10\n\tsub!\tr6, r5, r5\n\tjump.ne\t@.BB1_10\n\tsub.s\t64, r4, r4\n\tptr.add\tr3, r4, r4\n\tadd\t36, r0, r5\n\tadd\tstack-[8], r0, r8\n\tadd\t32, r8, r8\n\tadd\tr0, r0, r6\n.BB1_12:\n\tshl.s\t5, r6, r7\n\tptr.add\tr4, r7, r7\n\tld\tr7, r7\n\tst.1.inc\tr5, r7, r5\n\tadd\t1, r6, r6\n\tsub.s!\t4, r6, r7\n\tjump.lt\t@.BB1_12\n\tshl.s\t6, r2, r2\n\tadd\t224, r2, r4\n\tst.1\t164, r4\n\tadd\t260, r2, r7\n\tst.1\tr7, r0\n\tadd\t64, r2, r2\n\tshr.s!\t5, r2, r2\n\tjump.eq\t@.BB1_31\n\tadd\tr0, r0, r4\n.BB1_15:\n\tshl.s\t5, r4, r5\n\tptr.add\tr1, r5, r6\n\tld\tr6, r6\n\tadd\t196, r5, r5\n\tst.1\tr5, r6\n\tadd\t1, r4, r4\n\tsub!\tr4, r2, r5\n\tjump.lt\t@.BB1_15\n.BB1_31:\n\tsub!\tr0, r0, r1\n\tjump.eq\t@.BB1_17\n.BB1_17:\n\tcontext.gas_left\tr1\n\tadd\tstack-[7], r0, r2\n\tsub.s!\t4, r2, r4\n\tjump.eq\t@.BB1_20\n\tsub.s!\t@CPI1_2[0], r1, r3\n\tadd\t@CPI1_2[0], r0, r4\n\tadd.ge\tr4, r0, r1\n\tsub.s!\t@CPI1_2[0], r7, r3\n\tadd\tr4, r0, r3\n\tadd.lt\tr7, r0, r3\n\tshl.s\t96, r3, stack-[6]\n\tshl.s\t192, r1, r1\n\tor\tstack-[6], r1, r1\n\tor\t@CPI1_6[0], r1, r1\n\tadd\tr8, r0, stack-[8]\n\tadd\tr7, r0, stack-[1]\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tstack-[8], r0, r8\n\tptr.add\tstack[@ptr_calldata], r0, r3\n\tadd\tr1, r0, r4\n\tshr.s\t96, r4, r4\n\tand\t@CPI1_2[0], r4, stack[@returndatasize]\n\tand\t@CPI1_2[0], r4, r4\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB1_20\n\tadd\tstack-[6], r0, r8\n\tsub!\tr4, r0, r2\n\tjump.eq\t@.BB1_22\n\tadd\t31, r4, r2\n\tshr.s\t5, r2, r3\n\tmul\t3, r3, r2, r5\n\tadd\tstack-[1], r0, r5\n\tshr.s\t5, r5, r5\n\tsub!\tr3, r5, r6\n\tjump.le\t@.BB1_24\n\tsub\tr3, r5, r6\n\tmul\t3, r6, r6, r7\n\tadd\tr6, r2, r2\n\tmul\tr5, r5, r5, r6\n\tmul\tr3, r3, r3, r6\n\tsub\tr3, r5, r3\n\tshr.s\t9, r3, r3\n\tadd\tr2, r3, r2\n.BB1_24:\n\tadd\t32, r2, r2\n\tcontext.gas_left\tr3\n\tsub!\tr2, r3, r2\n\tjump.ge\t@.BB1_22\n\tand\t31, r4, r3\n\tshr.s!\t5, r4, r2\n\tjump.eq\t@.BB1_30\n\tadd\tr0, r0, r5\n.BB1_27:\n\tshl.s\t5, r5, r6\n\tptr.add\tr1, r6, r7\n\tld\tr7, r7\n\tst.1\tr6, r7\n\tadd\t1, r5, r5\n\tsub!\tr5, r2, r6\n\tjump.lt\t@.BB1_27\n.BB1_30:\n\tsub!\tr3, r0, r5\n\tjump.eq\t@.BB1_29\n\tshl.s\t3, r3, r3\n\tshl.s\t5, r2, r2\n\tld.1\tr2, r5\n\tshl\tr5, r3, r5\n\tshr\tr5, r3, r5\n\tptr.add\tr1, r2, r1\n\tld\tr1, r1\n\tsub\t256, r3, r3\n\tshr\tr1, r3, r1\n\tshl\tr1, r3, r1\n\tor\tr1, r5, r1\n\tst.1\tr2, r1\n.BB1_29:\n\tshl.s\t96, r4, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB1_5:\n\tadd\t128, r0, r1\n\tst.1\t64, r1\n\tret\n.BB1_3:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB1_6:\n\tadd\t@CPI1_8[0], r0, r1\n\tst.1\t0, r1\n\tadd\tstack-[7], r0, r1\n\tst.1\t32, r1\n\tadd\t@CPI1_9[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB1_10:\n\tadd\t@CPI1_4[0], r0, r1\n\tst.1\t0, r1\n\tadd\t@CPI1_5[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB1_22:\n\tadd\t@CPI1_7[0], r0, r1\n\tst.1\t0, r1\n\tadd\tstack-[7], r0, r1\n\tst.1\t4, r1\n\tadd\t192, r0, r1\n\tst.1\t100, r1\n\tld.1\t132, r1\n\tadd\t32, r1, r1\n\tst.1\t132, r1\n\tadd\tr8, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end1:\n\n__farcall:\n.func_begin2:\n.tmp0:\n\tfar_call\tr1, r2, @.BB2_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB2_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end2:\n\n__staticcall:\n.func_begin3:\n.tmp3:\n\tfar_call.static\tr1, r2, @.BB3_2\n.tmp4:\n\tadd\t1, r0, r2\n\tret\n.BB3_2:\n.tmp5:\n\tadd\tr0, r0, r2\n\tret\n.func_end3:\n\n\t.data\n\t.p2align\t5\nreturndatasize:\n\t.cell 0\n\n\t.p2align\t5\nptr_calldata:\n.cell\t0\n\n\t.p2align\t5\nptr_return_data:\n.cell\t0\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\nCPI1_2:\n\t.cell 4294967295\nCPI0_1:\n\t.cell 53919893334301279589334030174039261357415493651629346657050491355136\nCPI0_2:\n\t.cell 2381471121\nCPI0_3:\n\t.cell 2381471122\nCPI0_4:\n\t.cell 3303603381\nCPI0_5:\n\t.cell 1289964194\nCPI0_6:\n\t.cell 2308837452\nCPI0_7:\n\t.cell 1461501637330902918203684832716283019655932542975\nCPI0_8:\n\t.cell 22182216476136578060272566318850604970565072242024486780356928325126096266030\nCPI0_9:\n\t.cell 904625751086426111047927909714404454142933107862120802609382293630030446592\nCPI0_10:\n\t.cell 49456545995968035537185321979393437797929437114944968430078942655111166427136\nCPI0_11:\nCPI1_5:\n\t.cell 316912650057057350374175801344\nCPI0_12:\n\t.cell 904625697166532776746648320380374280103671760270919307471179981048634146816\nCPI0_13:\n\t.cell 904625697166532776746648320380374280103671757735618107014721178055227736064\nCPI0_14:\n\t.cell -36914690936816677633157119960166450095343903410701864482853326691777208764446\nCPI0_15:\n\t.cell -49616239573498155619522019968547346745554955125280246045652902460331403509760\nCPI0_16:\n\t.cell 5387515050969974956360988622848\nCPI0_17:\n\t.cell 18446744073709551615\nCPI0_18:\n\t.cell -57896044618658097711785492504343953926634992332820282019728792003956564819968\nCPI0_19:\n\t.cell -51587754798836800728747478973012340356897718516816824802361445509462002499584\nCPI0_20:\n\t.cell 2535301200456458802993406410752\nCPI0_21:\n\t.cell -48915727309029260330853118083386617045045822106857250742862205745223073529856\nCPI0_22:\n\t.cell 2852213850513516153367582212096\nCPI0_23:\nCPI1_1:\n\t.cell 10867283408178898638301172343726954674910073630256871736220740970449699113859\nCPI0_24:\nCPI1_3:\n\t.cell 904625751086426111047927909714404454142933105326819602152923490636624035840\nCPI0_25:\n\t.cell -6215304424567361083373411102956181123151285832147226332068570520672811352064\nCPI0_26:\n\t.cell 15528719852795810168334614265856\nCPI0_27:\n\t.cell 4102470791\nCPI0_28:\n\t.cell 12993418652855860199405075300352\nCPI0_29:\nCPI1_8:\n\t.cell 1595266674\nCPI0_30:\nCPI1_9:\n\t.cell 2852213851030024987431449657344\nCPI0_31:\n\t.cell 47933402425489226065753524148184105187889222607776850187980235700039975960576\nCPI0_32:\n\t.cell 16156842317565293874272834530371880720966471053262404558597773956279093428224\nCPI0_33:\n\t.cell 7922816251426433759354395033600\nCPI0_34:\n\t.cell 2559121699\nCPI0_35:\n\t.cell 10458117452399401396411668889600\nCPI0_36:\n\t.cell -53545954668276220139882190706727945494768556564545977305565006372112175202304\nCPI0_37:\n\t.cell 54819867146590288857485388290300400564144485858285641338065013407752539602944\nCPI0_38:\n\t.cell 34777365872773961339311961615113117744096016053484145012885398825620056571904\nCPI1_0:\n\t.cell 21122234520580670415450416725259358303340482176740656504059893016123987197952\nCPI1_4:\n\t.cell -9212283332827774866488389296133532311828950233014723771470104869471550177280\nCPI1_6:\n\t.cell 590295810358705651712\nCPI1_7:\n\t.cell -36290556397102138804695004072359639533903767873311494148976104430963051724800\n","bytecode":{"object":""},"methodIdentifiers":{"execute((uint8,address,address,address,uint256,uint256)[])":"4ce34aa2","executeBatch1155((address,address,address,uint256[],uint256[])[])":"8df25d92","executeWithBatch1155((uint8,address,address,address,uint256,uint256)[],(address,address,address,uint256[],uint256[])[])":"899e104c","updateChannel(address,bool)":"c4e8fcb5"}},"irOptimized":"/// @use-src 1:\"seaport-core/src/conduit/Conduit.sol\", 2:\"seaport-core/src/lib/TokenTransferrer.sol\", 6:\"seaport-types/src/interfaces/ConduitInterface.sol\", 7:\"seaport-types/src/interfaces/TokenTransferrerErrors.sol\"\nobject \"Conduit_295\" {\n    code {\n        {\n            /// @src 1:1341:10470  \"contract Conduit is ConduitInterface, TokenTransferrer {...\"\n            let _1 := memoryguard(0xa0)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            /// @src 1:3220:3244  \"_controller = msg.sender\"\n            mstore(128, /** @src 1:3234:3244  \"msg.sender\" */ caller())\n            /// @src 1:1341:10470  \"contract Conduit is ConduitInterface, TokenTransferrer {...\"\n            let _2 := datasize(\"Conduit_295_deployed\")\n            codecopy(_1, dataoffset(\"Conduit_295_deployed\"), _2)\n            setimmutable(_1, \"33\", mload(/** @src 1:3220:3244  \"_controller = msg.sender\" */ 128))\n            /// @src 1:1341:10470  \"contract Conduit is ConduitInterface, TokenTransferrer {...\"\n            return(_1, _2)\n        }\n    }\n    /// @use-src 1:\"seaport-core/src/conduit/Conduit.sol\", 2:\"seaport-core/src/lib/TokenTransferrer.sol\"\n    object \"Conduit_295_deployed\" {\n        code {\n            {\n                /// @src 1:1341:10470  \"contract Conduit is ConduitInterface, TokenTransferrer {...\"\n                mstore(64, 128)\n                if iszero(lt(calldatasize(), 4))\n                {\n                    let _1 := 0\n                    switch shr(224, calldataload(_1))\n                    case 0x4ce34aa2 {\n                        if callvalue() { revert(_1, _1) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_1, _1) }\n                        let offset := calldataload(4)\n                        if gt(offset, 0xffffffffffffffff) { revert(_1, _1) }\n                        let value0, value1 := abi_decode_array_struct_ConduitTransfer_calldata_dyn_calldata(add(4, offset), calldatasize())\n                        /// @src 1:1854:2993  \"assembly {...\"\n                        mstore(/** @src 1:1341:10470  \"contract Conduit is ConduitInterface, TokenTransferrer {...\" */ _1, /** @src 1:1854:2993  \"assembly {...\" */ caller())\n                        mstore(/** @src 1:1341:10470  \"contract Conduit is ConduitInterface, TokenTransferrer {...\" */ 32, _1)\n                        /// @src 1:1854:2993  \"assembly {...\"\n                        if iszero(sload(keccak256(/** @src 1:1341:10470  \"contract Conduit is ConduitInterface, TokenTransferrer {...\" */ _1, 64)))\n                        /// @src 1:1854:2993  \"assembly {...\"\n                        {\n                            mstore(/** @src 1:1341:10470  \"contract Conduit is ConduitInterface, TokenTransferrer {...\" */ _1, /** @src 1:1854:2993  \"assembly {...\" */ shl(225, 0x49ed56f9))\n                            mstore(/** @src 1:1341:10470  \"contract Conduit is ConduitInterface, TokenTransferrer {...\" */ 4, /** @src 1:1854:2993  \"assembly {...\" */ caller())\n                            revert(/** @src 1:1341:10470  \"contract Conduit is ConduitInterface, TokenTransferrer {...\" */ _1, /** @src 1:1854:2993  \"assembly {...\" */ 36)\n                        }\n                        /// @src 1:4341:4354  \"uint256 i = 0\"\n                        let var_i := /** @src 1:1341:10470  \"contract Conduit is ConduitInterface, TokenTransferrer {...\" */ _1\n                        /// @src 1:4336:4644  \"for (uint256 i = 0; i < totalStandardTransfers;) {...\"\n                        for { }\n                        /** @src 1:4356:4382  \"i < totalStandardTransfers\" */ lt(var_i, value1)\n                        /// @src 1:4341:4354  \"uint256 i = 0\"\n                        { }\n                        {\n                            /// @src 1:4484:4496  \"transfers[i]\"\n                            fun_transfer(calldata_array_index_access_struct_ConduitTransfer_calldata_dyn_calldata(value0, value1, var_i))\n                            /// @src 1:4616:4619  \"++i\"\n                            var_i := /** @src 1:1341:10470  \"contract Conduit is ConduitInterface, TokenTransferrer {...\" */ add(/** @src 1:4616:4619  \"++i\" */ var_i, /** @src 1:1341:10470  \"contract Conduit is ConduitInterface, TokenTransferrer {...\" */ 1)\n                        }\n                        let memPos := mload(64)\n                        return(memPos, sub(abi_encode_bytes4(memPos), memPos))\n                    }\n                    case 0x899e104c {\n                        external_fun_executeWithBatch1155()\n                    }\n                    case 0x8df25d92 {\n                        external_fun_executeBatch1155()\n                    }\n                    case 0xc4e8fcb5 { external_fun_updateChannel() }\n                }\n                revert(0, 0)\n            }\n            function abi_decode_array_struct_ConduitTransfer_calldata_dyn_calldata(offset, end) -> arrayPos, length\n            {\n                if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n                length := calldataload(offset)\n                if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n                arrayPos := add(offset, 0x20)\n                if gt(add(add(offset, mul(length, 0xc0)), 0x20), end) { revert(0, 0) }\n            }\n            function abi_encode_bytes4(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(headStart, shl(225, 0x2671a551))\n            }\n            function abi_encode_tuple_bytes4(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(headStart, shl(226, 0x22678413))\n            }\n            function abi_decode_array_struct_ConduitBatch1155Transfer_calldata_dyn_calldata(offset, end) -> arrayPos, length\n            {\n                if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n                length := calldataload(offset)\n                if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n                arrayPos := add(offset, 0x20)\n                if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n            }\n            function external_fun_executeWithBatch1155()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 64)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 1:1341:10470  \"contract Conduit is ConduitInterface, TokenTransferrer {...\"\n                let offset := calldataload(4)\n                let _1 := 0xffffffffffffffff\n                if gt(offset, _1)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 1:1341:10470  \"contract Conduit is ConduitInterface, TokenTransferrer {...\"\n                let value0, value1 := abi_decode_array_struct_ConduitTransfer_calldata_dyn_calldata(add(4, offset), calldatasize())\n                let offset_1 := calldataload(36)\n                if gt(offset_1, _1)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 1:1341:10470  \"contract Conduit is ConduitInterface, TokenTransferrer {...\"\n                let value2, value3 := abi_decode_array_struct_ConduitBatch1155Transfer_calldata_dyn_calldata(add(4, offset_1), calldatasize())\n                /// @src -1:-1:-1\n                let _2 := 0\n                /// @src 1:1854:2993  \"assembly {...\"\n                mstore(/** @src -1:-1:-1 */ _2, /** @src 1:1854:2993  \"assembly {...\" */ caller())\n                mstore(/** @src 1:1341:10470  \"contract Conduit is ConduitInterface, TokenTransferrer {...\" */ 32, /** @src -1:-1:-1 */ _2)\n                /// @src 1:1854:2993  \"assembly {...\"\n                if iszero(sload(keccak256(/** @src -1:-1:-1 */ _2, /** @src 1:1341:10470  \"contract Conduit is ConduitInterface, TokenTransferrer {...\" */ 64)))\n                /// @src 1:1854:2993  \"assembly {...\"\n                {\n                    mstore(/** @src -1:-1:-1 */ _2, /** @src 1:1854:2993  \"assembly {...\" */ shl(225, 0x49ed56f9))\n                    mstore(/** @src 1:1341:10470  \"contract Conduit is ConduitInterface, TokenTransferrer {...\" */ 4, /** @src 1:1854:2993  \"assembly {...\" */ caller())\n                    revert(/** @src -1:-1:-1 */ _2, /** @src 1:1341:10470  \"contract Conduit is ConduitInterface, TokenTransferrer {...\" */ 36)\n                }\n                /// @src 1:7376:7389  \"uint256 i = 0\"\n                let var_i := /** @src -1:-1:-1 */ _2\n                /// @src 1:7371:7687  \"for (uint256 i = 0; i < totalStandardTransfers;) {...\"\n                for { }\n                /** @src 1:7391:7417  \"i < totalStandardTransfers\" */ lt(var_i, value1)\n                /// @src 1:7376:7389  \"uint256 i = 0\"\n                { }\n                {\n                    /// @src 1:7519:7539  \"standardTransfers[i]\"\n                    fun_transfer(calldata_array_index_access_struct_ConduitTransfer_calldata_dyn_calldata(value0, value1, var_i))\n                    /// @src 1:7659:7662  \"++i\"\n                    var_i := /** @src 1:1341:10470  \"contract Conduit is ConduitInterface, TokenTransferrer {...\" */ add(/** @src 1:7659:7662  \"++i\" */ var_i, /** @src 1:1341:10470  \"contract Conduit is ConduitInterface, TokenTransferrer {...\" */ 1)\n                }\n                /// @src 1:7932:7946  \"batchTransfers\"\n                fun_performERC1155BatchTransfers(value2, value3)\n                /// @src 1:1341:10470  \"contract Conduit is ConduitInterface, TokenTransferrer {...\"\n                let memPos := mload(64)\n                return(memPos, sub(abi_encode_tuple_bytes4(memPos), memPos))\n            }\n            function external_fun_executeBatch1155()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 32)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 1:1341:10470  \"contract Conduit is ConduitInterface, TokenTransferrer {...\"\n                let offset := calldataload(4)\n                if gt(offset, 0xffffffffffffffff)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 1:1341:10470  \"contract Conduit is ConduitInterface, TokenTransferrer {...\"\n                let value0, value1 := abi_decode_array_struct_ConduitBatch1155Transfer_calldata_dyn_calldata(add(4, offset), calldatasize())\n                /// @src 1:1854:2993  \"assembly {...\"\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 1:1854:2993  \"assembly {...\" */ caller())\n                mstore(/** @src 1:1341:10470  \"contract Conduit is ConduitInterface, TokenTransferrer {...\" */ 32, /** @src -1:-1:-1 */ 0)\n                /// @src 1:1854:2993  \"assembly {...\"\n                if iszero(sload(keccak256(/** @src -1:-1:-1 */ 0, /** @src 1:1854:2993  \"assembly {...\" */ 64)))\n                {\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 1:1854:2993  \"assembly {...\" */ shl(225, 0x49ed56f9))\n                    mstore(/** @src 1:1341:10470  \"contract Conduit is ConduitInterface, TokenTransferrer {...\" */ 4, /** @src 1:1854:2993  \"assembly {...\" */ caller())\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 1:1854:2993  \"assembly {...\" */ 36)\n                }\n                /// @src 1:5884:5898  \"batchTransfers\"\n                fun_performERC1155BatchTransfers(value0, value1)\n                /// @src 1:1341:10470  \"contract Conduit is ConduitInterface, TokenTransferrer {...\"\n                let memPos := mload(/** @src 1:1854:2993  \"assembly {...\" */ 64)\n                /// @src 1:1341:10470  \"contract Conduit is ConduitInterface, TokenTransferrer {...\"\n                mstore(memPos, shl(225, 0x46f92ec9))\n                return(memPos, 32)\n            }\n            function validator_revert_address(value)\n            {\n                if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n            }\n            function external_fun_updateChannel()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 64)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 1:1341:10470  \"contract Conduit is ConduitInterface, TokenTransferrer {...\"\n                let value := calldataload(4)\n                validator_revert_address(value)\n                let value_1 := calldataload(36)\n                let _1 := iszero(iszero(value_1))\n                if iszero(eq(value_1, _1))\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 1:1341:10470  \"contract Conduit is ConduitInterface, TokenTransferrer {...\"\n                let _2 := sub(shl(160, 1), 1)\n                /// @src 1:8474:8556  \"if (msg.sender != _controller) {...\"\n                if /** @src 1:8478:8503  \"msg.sender != _controller\" */ iszero(eq(/** @src 1:8478:8488  \"msg.sender\" */ caller(), /** @src 1:1341:10470  \"contract Conduit is ConduitInterface, TokenTransferrer {...\" */ and(/** @src 1:8492:8503  \"_controller\" */ loadimmutable(\"33\"), /** @src 1:1341:10470  \"contract Conduit is ConduitInterface, TokenTransferrer {...\" */ _2)))\n                /// @src 1:8474:8556  \"if (msg.sender != _controller) {...\"\n                {\n                    /// @src 1:8526:8545  \"InvalidController()\"\n                    let _3 := /** @src 1:1341:10470  \"contract Conduit is ConduitInterface, TokenTransferrer {...\" */ mload(64)\n                    /// @src 1:8526:8545  \"InvalidController()\"\n                    mstore(_3, shl(225, 0x36abb4df))\n                    revert(_3, /** @src 1:1341:10470  \"contract Conduit is ConduitInterface, TokenTransferrer {...\" */ 4)\n                }\n                /// @src 1:8645:8751  \"if (_channels[channel] == isOpen) {...\"\n                if /** @src 1:8649:8677  \"_channels[channel] == isOpen\" */ eq(/** @src 1:1341:10470  \"contract Conduit is ConduitInterface, TokenTransferrer {...\" */ iszero(iszero(/** @src 1:8649:8667  \"_channels[channel]\" */ read_from_storage_split_offset_bool(mapping_index_access_mapping_address_bool_of_address(value)))), /** @src 1:1341:10470  \"contract Conduit is ConduitInterface, TokenTransferrer {...\" */ _1)\n                /// @src 1:8645:8751  \"if (_channels[channel] == isOpen) {...\"\n                {\n                    /// @src 1:8700:8740  \"ChannelStatusAlreadySet(channel, isOpen)\"\n                    let _4 := /** @src 1:1341:10470  \"contract Conduit is ConduitInterface, TokenTransferrer {...\" */ mload(64)\n                    /// @src 1:8700:8740  \"ChannelStatusAlreadySet(channel, isOpen)\"\n                    mstore(_4, shl(225, 0x49271a0f))\n                    revert(_4, sub(abi_encode_address_bool(add(_4, /** @src 1:1341:10470  \"contract Conduit is ConduitInterface, TokenTransferrer {...\" */ 4), /** @src 1:8700:8740  \"ChannelStatusAlreadySet(channel, isOpen)\" */ value, value_1), _4))\n                }\n                /// @src 1:8806:8833  \"_channels[channel] = isOpen\"\n                update_storage_value_offsett_bool_to_bool(/** @src 1:8806:8824  \"_channels[channel]\" */ mapping_index_access_mapping_address_bool_of_address(value), /** @src 1:8806:8833  \"_channels[channel] = isOpen\" */ value_1)\n                /// @src 1:8888:8919  \"ChannelUpdated(channel, isOpen)\"\n                let _5 := /** @src 1:1341:10470  \"contract Conduit is ConduitInterface, TokenTransferrer {...\" */ mload(64)\n                /// @src 1:8888:8919  \"ChannelUpdated(channel, isOpen)\"\n                log2(_5, sub(abi_encode_bool(_5, value_1), _5), 0xae63067d43ac07563b7eb8db6595635fc77f1578a2a5ea06ba91b63e2afa37e2, /** @src 1:1341:10470  \"contract Conduit is ConduitInterface, TokenTransferrer {...\" */ and(/** @src 1:8888:8919  \"ChannelUpdated(channel, isOpen)\" */ value, /** @src 1:1341:10470  \"contract Conduit is ConduitInterface, TokenTransferrer {...\" */ _2))\n                return(mload(64), /** @src -1:-1:-1 */ 0)\n            }\n            /// @src 1:1341:10470  \"contract Conduit is ConduitInterface, TokenTransferrer {...\"\n            function calldata_array_index_access_struct_ConduitTransfer_calldata_dyn_calldata(base_ref, length, index) -> addr\n            {\n                if iszero(lt(index, length))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x32)\n                    revert(0, 0x24)\n                }\n                addr := add(base_ref, mul(index, 192))\n            }\n            function mapping_index_access_mapping_address_bool_of_address(key) -> dataSlot\n            {\n                mstore(/** @src 1:8649:8658  \"_channels\" */ 0x00, /** @src 1:1341:10470  \"contract Conduit is ConduitInterface, TokenTransferrer {...\" */ and(key, sub(shl(160, 1), 1)))\n                mstore(0x20, /** @src 1:8649:8658  \"_channels\" */ 0x00)\n                /// @src 1:1341:10470  \"contract Conduit is ConduitInterface, TokenTransferrer {...\"\n                dataSlot := keccak256(/** @src 1:8649:8658  \"_channels\" */ 0x00, /** @src 1:1341:10470  \"contract Conduit is ConduitInterface, TokenTransferrer {...\" */ 0x40)\n            }\n            function read_from_storage_split_offset_bool(slot) -> value\n            {\n                value := and(sload(slot), 0xff)\n            }\n            function abi_encode_address_bool(headStart, value0, value1) -> tail\n            {\n                tail := add(headStart, 64)\n                mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n                mstore(add(headStart, 32), iszero(iszero(value1)))\n            }\n            function update_storage_value_offsett_bool_to_bool(slot, value)\n            {\n                let value_1 := and(sload(slot), not(255))\n                sstore(slot, or(value_1, and(iszero(iszero(value)), 255)))\n            }\n            function abi_encode_bool(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(headStart, iszero(iszero(value0)))\n            }\n            function validator_assert_enum_ConduitItemType(value)\n            {\n                if iszero(lt(value, 4))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x21)\n                    revert(0, 0x24)\n                }\n            }\n            function read_from_calldatat_enum_ConduitItemType(ptr) -> returnValue\n            {\n                let value := calldataload(ptr)\n                if iszero(lt(value, 4)) { revert(0, 0) }\n                returnValue := value\n            }\n            function read_from_calldatat_address(ptr) -> returnValue\n            {\n                let value := calldataload(ptr)\n                validator_revert_address(value)\n                returnValue := value\n            }\n            function abi_encode_uint256(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(headStart, value0)\n            }\n            /// @ast-id 294 @src 1:9232:10468  \"function _transfer(ConduitTransfer calldata item) internal {...\"\n            function fun_transfer(var_item_offset)\n            {\n                /// @src 1:9381:9394  \"item.itemType\"\n                let expr := read_from_calldatat_enum_ConduitItemType(var_item_offset)\n                /// @src 1:1341:10470  \"contract Conduit is ConduitInterface, TokenTransferrer {...\"\n                validator_assert_enum_ConduitItemType(expr)\n                /// @src 1:9377:10462  \"if (item.itemType == ConduitItemType.ERC20) {...\"\n                switch /** @src 1:9381:9419  \"item.itemType == ConduitItemType.ERC20\" */ eq(expr, /** @src 1:9398:9419  \"ConduitItemType.ERC20\" */ 1)\n                case /** @src 1:9377:10462  \"if (item.itemType == ConduitItemType.ERC20) {...\" */ 0 {\n                    /// @src 1:9809:9822  \"item.itemType\"\n                    let expr_1 := read_from_calldatat_enum_ConduitItemType(var_item_offset)\n                    /// @src 1:1341:10470  \"contract Conduit is ConduitInterface, TokenTransferrer {...\"\n                    validator_assert_enum_ConduitItemType(expr_1)\n                    /// @src 1:9805:10462  \"if (item.itemType == ConduitItemType.ERC721) {...\"\n                    switch /** @src 1:9809:9848  \"item.itemType == ConduitItemType.ERC721\" */ eq(expr_1, /** @src 1:9826:9848  \"ConduitItemType.ERC721\" */ 2)\n                    case /** @src 1:9805:10462  \"if (item.itemType == ConduitItemType.ERC721) {...\" */ 0 {\n                        /// @src 1:10180:10193  \"item.itemType\"\n                        let expr_2 := read_from_calldatat_enum_ConduitItemType(var_item_offset)\n                        /// @src 1:1341:10470  \"contract Conduit is ConduitInterface, TokenTransferrer {...\"\n                        validator_assert_enum_ConduitItemType(expr_2)\n                        /// @src 1:10176:10462  \"if (item.itemType == ConduitItemType.ERC1155) {...\"\n                        switch /** @src 1:10180:10220  \"item.itemType == ConduitItemType.ERC1155\" */ eq(expr_2, /** @src 1:10197:10220  \"ConduitItemType.ERC1155\" */ 3)\n                        case /** @src 1:10176:10462  \"if (item.itemType == ConduitItemType.ERC1155) {...\" */ 0 {\n                            /// @src 1:10434:10451  \"InvalidItemType()\"\n                            let _1 := /** @src 1:1341:10470  \"contract Conduit is ConduitInterface, TokenTransferrer {...\" */ mload(64)\n                            /// @src 1:10434:10451  \"InvalidItemType()\"\n                            mstore(_1, shl(226, 0x1e4cbc7f))\n                            revert(_1, 4)\n                        }\n                        default /// @src 1:10176:10462  \"if (item.itemType == ConduitItemType.ERC1155) {...\"\n                        {\n                            /// @src 1:10299:10309  \"item.token\"\n                            let expr_3 := read_from_calldatat_address(add(var_item_offset, 32))\n                            /// @src 1:10311:10320  \"item.from\"\n                            let expr_4 := read_from_calldatat_address(add(var_item_offset, 64))\n                            /// @src 1:10322:10329  \"item.to\"\n                            let expr_5 := read_from_calldatat_address(add(var_item_offset, 96))\n                            /// @src 1:10348:10359  \"item.amount\"\n                            fun_performERC1155Transfer(expr_3, expr_4, expr_5, /** @src 1:1341:10470  \"contract Conduit is ConduitInterface, TokenTransferrer {...\" */ calldataload(/** @src 1:10331:10346  \"item.identifier\" */ add(var_item_offset, 128)), /** @src 1:1341:10470  \"contract Conduit is ConduitInterface, TokenTransferrer {...\" */ calldataload(/** @src 1:10348:10359  \"item.amount\" */ add(var_item_offset, 160)))\n                        }\n                    }\n                    default /// @src 1:9805:10462  \"if (item.itemType == ConduitItemType.ERC721) {...\"\n                    {\n                        /// @src 1:9938:9949  \"item.amount\"\n                        let expr_6 := /** @src 1:1341:10470  \"contract Conduit is ConduitInterface, TokenTransferrer {...\" */ calldataload(/** @src 1:9938:9949  \"item.amount\" */ add(var_item_offset, 160))\n                        /// @src 1:9934:10036  \"if (item.amount != 1) {...\"\n                        if /** @src 1:9938:9954  \"item.amount != 1\" */ iszero(eq(expr_6, /** @src 1:9398:9419  \"ConduitItemType.ERC20\" */ 1))\n                        /// @src 1:9934:10036  \"if (item.amount != 1) {...\"\n                        {\n                            /// @src 1:9981:10021  \"InvalidERC721TransferAmount(item.amount)\"\n                            let _2 := /** @src 1:1341:10470  \"contract Conduit is ConduitInterface, TokenTransferrer {...\" */ mload(64)\n                            /// @src 1:9981:10021  \"InvalidERC721TransferAmount(item.amount)\"\n                            mstore(_2, shl(224, 0x69f95827))\n                            revert(_2, sub(abi_encode_uint256(add(_2, 4), expr_6), _2))\n                        }\n                        /// @src 1:10111:10121  \"item.token\"\n                        let expr_7 := read_from_calldatat_address(add(var_item_offset, 32))\n                        /// @src 1:10123:10132  \"item.from\"\n                        let expr_8 := read_from_calldatat_address(add(var_item_offset, 64))\n                        /// @src 1:10134:10141  \"item.to\"\n                        let expr_9 := read_from_calldatat_address(add(var_item_offset, 96))\n                        /// @src 1:10143:10158  \"item.identifier\"\n                        fun_performERC721Transfer(expr_7, expr_8, expr_9, /** @src 1:1341:10470  \"contract Conduit is ConduitInterface, TokenTransferrer {...\" */ calldataload(/** @src 1:10143:10158  \"item.identifier\" */ add(var_item_offset, 128)))\n                    }\n                }\n                default /// @src 1:9377:10462  \"if (item.itemType == ConduitItemType.ERC20) {...\"\n                {\n                    /// @src 1:9744:9754  \"item.token\"\n                    let expr_10 := read_from_calldatat_address(add(var_item_offset, 32))\n                    /// @src 1:9756:9765  \"item.from\"\n                    let expr_11 := read_from_calldatat_address(add(var_item_offset, 64))\n                    /// @src 1:9767:9774  \"item.to\"\n                    let expr_12 := read_from_calldatat_address(add(var_item_offset, 96))\n                    /// @src 1:9776:9787  \"item.amount\"\n                    fun_performERC20Transfer(expr_10, expr_11, expr_12, /** @src 1:1341:10470  \"contract Conduit is ConduitInterface, TokenTransferrer {...\" */ calldataload(/** @src 1:9776:9787  \"item.amount\" */ add(var_item_offset, 160)))\n                }\n            }\n            /// @ast-id 394 @src 2:4268:12875  \"function _performERC20Transfer(address token, address from, address to, uint256 amount) internal {...\"\n            function fun_performERC20Transfer(var_token, var_from, var_to, var_amount)\n            {\n                /// @src 2:4449:12869  \"assembly {...\"\n                let usr$memPointer := mload(64)\n                let _1 := 0\n                mstore(_1, shl(224, 0x23b872dd))\n                mstore(4, var_from)\n                mstore(36, var_to)\n                mstore(68, var_amount)\n                let usr$callStatus := call(gas(), var_token, _1, _1, 100, _1, 32)\n                let usr$success := and(or(and(eq(mload(_1), 1), gt(returndatasize(), 31)), iszero(returndatasize())), usr$callStatus)\n                if iszero(and(usr$success, iszero(iszero(returndatasize()))))\n                {\n                    if iszero(and(iszero(iszero(extcodesize(var_token))), usr$success))\n                    {\n                        if iszero(usr$success)\n                        {\n                            if iszero(usr$callStatus)\n                            {\n                                if returndatasize()\n                                {\n                                    let usr$returnDataWords := shr(5, add(returndatasize(), 31))\n                                    let usr$msizeWords := shr(5, usr$memPointer)\n                                    let usr$cost := mul(3, usr$returnDataWords)\n                                    if gt(usr$returnDataWords, usr$msizeWords)\n                                    {\n                                        usr$cost := add(usr$cost, add(mul(sub(usr$returnDataWords, usr$msizeWords), 3), shr(9, sub(mul(usr$returnDataWords, usr$returnDataWords), mul(usr$msizeWords, usr$msizeWords)))))\n                                    }\n                                    if lt(add(usr$cost, 32), gas())\n                                    {\n                                        returndatacopy(_1, _1, returndatasize())\n                                        revert(_1, returndatasize())\n                                    }\n                                }\n                                mstore(_1, 4102470791)\n                                mstore(32, var_token)\n                                mstore(64, var_from)\n                                mstore(96, var_to)\n                                mstore(128, _1)\n                                mstore(160, var_amount)\n                                revert(28, 164)\n                            }\n                            mstore(_1, 2559121699)\n                            mstore(32, var_token)\n                            mstore(64, var_from)\n                            mstore(96, var_to)\n                            mstore(128, var_amount)\n                            revert(28, 132)\n                        }\n                        mstore(_1, 1595266674)\n                        mstore(32, var_token)\n                        revert(28, 36)\n                    }\n                }\n                mstore(64, usr$memPointer)\n                mstore(96, _1)\n            }\n            /// @ast-id 408 @src 2:13479:18382  \"function _performERC721Transfer(address token, address from, address to, uint256 identifier) internal {...\"\n            function fun_performERC721Transfer(var_token, var_from, var_to, var_identifier)\n            {\n                /// @src 2:13666:18376  \"assembly {...\"\n                if iszero(extcodesize(var_token))\n                {\n                    mstore(0, 1595266674)\n                    mstore(32, var_token)\n                    revert(28, 36)\n                }\n                let usr$memPointer := mload(64)\n                let _1 := 0\n                mstore(_1, /** @src 2:4449:12869  \"assembly {...\" */ shl(224, 0x23b872dd))\n                /// @src 2:13666:18376  \"assembly {...\"\n                mstore(4, var_from)\n                mstore(36, var_to)\n                mstore(68, var_identifier)\n                if iszero(call(gas(), var_token, _1, _1, 100, _1, _1))\n                {\n                    if returndatasize()\n                    {\n                        let usr$returnDataWords := shr(5, add(returndatasize(), 31))\n                        let usr$msizeWords := shr(5, usr$memPointer)\n                        let usr$cost := mul(3, usr$returnDataWords)\n                        if gt(usr$returnDataWords, usr$msizeWords)\n                        {\n                            usr$cost := add(usr$cost, add(mul(sub(usr$returnDataWords, usr$msizeWords), 3), shr(9, sub(mul(usr$returnDataWords, usr$returnDataWords), mul(usr$msizeWords, usr$msizeWords)))))\n                        }\n                        if lt(add(usr$cost, 32), gas())\n                        {\n                            returndatacopy(_1, _1, returndatasize())\n                            revert(_1, returndatasize())\n                        }\n                    }\n                    mstore(_1, 4102470791)\n                    mstore(32, var_token)\n                    mstore(64, var_from)\n                    mstore(96, var_to)\n                    mstore(128, var_identifier)\n                    mstore(160, 1)\n                    revert(28, 164)\n                }\n                mstore(64, usr$memPointer)\n                mstore(96, _1)\n            }\n            /// @ast-id 424 @src 2:19030:24568  \"function _performERC1155Transfer(address token, address from, address to, uint256 identifier, uint256 amount)...\"\n            function fun_performERC1155Transfer(var_token, var_from, var_to, var_identifier, var_amount)\n            {\n                /// @src 2:19247:24562  \"assembly {...\"\n                if iszero(extcodesize(var_token))\n                {\n                    mstore(0, 1595266674)\n                    mstore(32, var_token)\n                    revert(28, 36)\n                }\n                let usr$memPointer := mload(64)\n                let usr$slot0x80 := mload(128)\n                let usr$slot0xA0 := mload(160)\n                let usr$slot0xC0 := mload(192)\n                let _1 := 0\n                mstore(_1, shl(225, 0x79212195))\n                mstore(4, var_from)\n                mstore(36, var_to)\n                mstore(68, var_identifier)\n                mstore(100, var_amount)\n                mstore(132, 160)\n                mstore(164, _1)\n                if iszero(call(gas(), var_token, _1, _1, 196, _1, _1))\n                {\n                    if returndatasize()\n                    {\n                        let usr$returnDataWords := shr(5, add(returndatasize(), 31))\n                        let usr$msizeWords := shr(5, usr$memPointer)\n                        let usr$cost := mul(3, usr$returnDataWords)\n                        if gt(usr$returnDataWords, usr$msizeWords)\n                        {\n                            usr$cost := add(usr$cost, add(mul(sub(usr$returnDataWords, usr$msizeWords), 3), shr(9, sub(mul(usr$returnDataWords, usr$returnDataWords), mul(usr$msizeWords, usr$msizeWords)))))\n                        }\n                        if lt(add(usr$cost, 32), gas())\n                        {\n                            returndatacopy(_1, _1, returndatasize())\n                            revert(_1, returndatasize())\n                        }\n                    }\n                    mstore(_1, 4102470791)\n                    mstore(32, var_token)\n                    mstore(64, var_from)\n                    mstore(96, var_to)\n                    mstore(128, var_identifier)\n                    mstore(160, var_amount)\n                    revert(28, 164)\n                }\n                mstore(128, usr$slot0x80)\n                mstore(160, usr$slot0xA0)\n                mstore(192, usr$slot0xC0)\n                mstore(64, usr$memPointer)\n                mstore(96, _1)\n            }\n            /// @ast-id 434 @src 2:25519:35853  \"function _performERC1155BatchTransfers(ConduitBatch1155Transfer[] calldata batchTransfers) internal {...\"\n            function fun_performERC1155BatchTransfers(var_batchTransfers_offset, var_batchTransfers_length)\n            {\n                /// @src 2:25700:35847  \"assembly {...\"\n                let usr$nextElementHeadPtr := var_batchTransfers_offset\n                let _1 := 32\n                mstore(_1, shl(225, 0x1759616b))\n                let usr$i := 0\n                for { }\n                lt(usr$i, var_batchTransfers_length)\n                { usr$i := add(usr$i, 1) }\n                {\n                    let usr$elementPtr := add(var_batchTransfers_offset, calldataload(usr$nextElementHeadPtr))\n                    let usr$token := calldataload(usr$elementPtr)\n                    if iszero(extcodesize(usr$token))\n                    {\n                        mstore(0, 1595266674)\n                        mstore(_1, usr$token)\n                        revert(28, 36)\n                    }\n                    let _2 := 160\n                    let _3 := add(usr$elementPtr, _2)\n                    let usr$idsLength := calldataload(_3)\n                    let _4 := 5\n                    let _5 := shl(_4, usr$idsLength)\n                    let _6 := 192\n                    let _7 := 128\n                    if iszero(and(eq(usr$idsLength, calldataload(add(add(usr$elementPtr, _5), _6))), and(eq(calldataload(add(usr$elementPtr, 96)), _2), eq(calldataload(add(usr$elementPtr, _7)), add(_6, _5)))))\n                    {\n                        mstore(0, shl(226, 0x3ae88213))\n                        revert(0, 4)\n                    }\n                    usr$nextElementHeadPtr := add(usr$nextElementHeadPtr, _1)\n                    calldatacopy(36, add(usr$elementPtr, _1), _7)\n                    let _8 := shl(6, usr$idsLength)\n                    mstore(164, add(_8, 224))\n                    let _9 := add(_8, 260)\n                    mstore(_9, 0)\n                    calldatacopy(196, _3, add(64, _8))\n                    if iszero(call(gas(), usr$token, 0, _1, _9, 0, 0))\n                    {\n                        if returndatasize()\n                        {\n                            let usr$returnDataWords := shr(_4, add(returndatasize(), 31))\n                            let usr$msizeWords := shr(_4, _9)\n                            let _10 := 3\n                            let usr$cost := mul(_10, usr$returnDataWords)\n                            if gt(usr$returnDataWords, usr$msizeWords)\n                            {\n                                usr$cost := add(usr$cost, add(mul(sub(usr$returnDataWords, usr$msizeWords), _10), shr(9, sub(mul(usr$returnDataWords, usr$returnDataWords), mul(usr$msizeWords, usr$msizeWords)))))\n                            }\n                            if lt(add(usr$cost, _1), gas())\n                            {\n                                returndatacopy(0, 0, returndatasize())\n                                revert(0, returndatasize())\n                            }\n                        }\n                        mstore(0, shl(225, 0x57e222f1))\n                        mstore(4, usr$token)\n                        mstore(100, _6)\n                        let _11 := 132\n                        mstore(_11, add(_1, mload(_11)))\n                        revert(0, _9)\n                    }\n                }\n                mstore(64, 128)\n            }\n        }\n        data \".metadata\" hex\"a264697066735822122044755ea1bbd243fc8a66f512aca14a55b1580ad912b823d183aa697430ac426e64736f6c634300080e0033\"\n    }\n}\n","hash":"010001bb5a1593d4a283621cf6a47830511ee68549148402c4ff98671823a03c","factoryDependencies":{}}},"seaport-core/src/lib/TokenTransferrer.sol":{"TokenTransferrer":{"abi":[{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"BadReturnValueFromERC20OnTransfer","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"identifiers","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"ERC1155BatchTransferGenericFailure","type":"error"},{"inputs":[],"name":"Invalid1155BatchTransferEncoding","type":"error"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"InvalidERC721TransferAmount","type":"error"},{"inputs":[],"name":"MissingItemAmount","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NoContract","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"identifier","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"TokenTransferGenericFailure","type":"error"},{"inputs":[],"name":"UnusedItemParameters","type":"error"}],"metadata":{"optimizer_settings":"M3B3","solc_metadata":"{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BadReturnValueFromERC20OnTransfer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"identifiers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"ERC1155BatchTransferGenericFailure\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Invalid1155BatchTransferEncoding\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InvalidERC721TransferAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MissingItemAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NoContract\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"identifier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenTransferGenericFailure\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnusedItemParameters\",\"type\":\"error\"}],\"devdoc\":{\"author\":\"0age\",\"custom:coauthor\":\"d1ll0ntransmissions11\",\"errors\":{\"BadReturnValueFromERC20OnTransfer(address,address,address,uint256)\":[{\"details\":\"Revert with an error when an ERC20 token transfer returns a falsey      value.\",\"params\":{\"amount\":\"The amount for the attempted ERC20 transfer.\",\"from\":\"The source of the attempted ERC20 transfer.\",\"to\":\"The recipient of the attempted ERC20 transfer.\",\"token\":\"The token for which the ERC20 transfer was attempted.\"}}],\"ERC1155BatchTransferGenericFailure(address,address,address,uint256[],uint256[])\":[{\"details\":\"Revert with an error when a batch ERC1155 token transfer reverts.\",\"params\":{\"amounts\":\"The amounts for the attempted transfer.\",\"from\":\"The source of the attempted transfer.\",\"identifiers\":\"The identifiers for the attempted transfer.\",\"to\":\"The recipient of the attempted transfer.\",\"token\":\"The token for which the transfer was attempted.\"}}],\"Invalid1155BatchTransferEncoding()\":[{\"details\":\"Revert with an error when attempting to execute an 1155 batch      transfer using calldata not produced by default ABI encoding or with      different lengths for ids and amounts arrays.\"}],\"InvalidERC721TransferAmount(uint256)\":[{\"details\":\"Revert with an error when an ERC721 transfer with amount other than      one is attempted.\",\"params\":{\"amount\":\"The amount of the ERC721 tokens to transfer.\"}}],\"MissingItemAmount()\":[{\"details\":\"Revert with an error when attempting to fulfill an order where an      item has an amount of zero.\"}],\"NoContract(address)\":[{\"details\":\"Revert with an error when an account being called as an assumed      contract does not have code and returns no data.\",\"params\":{\"account\":\"The account that should contain code.\"}}],\"TokenTransferGenericFailure(address,address,address,uint256,uint256)\":[{\"details\":\"Revert with an error when an ERC20, ERC721, or ERC1155 token      transfer reverts.\",\"params\":{\"amount\":\"The amount for the attempted transfer.\",\"from\":\"The source of the attempted transfer.\",\"identifier\":\"The identifier for the attempted transfer.\",\"to\":\"The recipient of the attempted transfer.\",\"token\":\"The token for which the transfer was attempted.\"}}],\"UnusedItemParameters()\":[{\"details\":\"Revert with an error when attempting to fulfill an order where an      item has unused parameters. This includes both the token and the      identifier parameters for native transfers as well as the identifier      parameter for ERC20 transfers. Note that the conduit does not      perform this check, leaving it up to the calling channel to enforce      when desired.\"}]},\"kind\":\"dev\",\"methods\":{},\"title\":\"TokenTransferrer\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"TokenTransferrer is a library for performing optimized ERC20, ERC721,         ERC1155, and batch ERC1155 transfers, used by both Seaport as well as         by conduits deployed by the ConduitController. Use great caution when         considering these functions for use in other codebases, as there are         significant side effects and edge cases that need to be thoroughly         understood and carefully addressed.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"seaport-core/src/lib/TokenTransferrer.sol\":\"TokenTransferrer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"seaport-core/src/lib/TokenTransferrer.sol\":{\"keccak256\":\"0x02822d391094cc733a1215a9dcca933099592d4902e327832e7a4ddbfe910df1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7951093d038b3577c66febf10be0435b2c2093df55b03827406e130880dfa96b\",\"dweb:/ipfs/QmbjnYUwHbgU7jrbuLakh9FSkGcPNAxzH3TTRUoUEEFZdo\"]},\"seaport-types/src/conduit/lib/ConduitEnums.sol\":{\"keccak256\":\"0x1b24e84bbd29d52cebcb0bda26c8095c9d7a8e5719dd1b0e203315be0df4dcf7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://901be0c9ea392a69611b884985a772547e83ce78610a40e989216d842c8eb4b0\",\"dweb:/ipfs/QmPW1kDrkUEAvF6gy5FHsVmXNe2C1czAovXKL18T5jKiVx\"]},\"seaport-types/src/conduit/lib/ConduitStructs.sol\":{\"keccak256\":\"0xe765c83ddb65b13547db2914f7212689707fcd85c1bbe5c49dbe3e98c4942dd9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1318c90a615b9c2098c1f7435925c76913d2c54b79a53f8f64eae59d60ed5564\",\"dweb:/ipfs/QmXkTSAvkrMbrNLJjehm3JXeBoyW6dDYWRsdFkuDVb33sa\"]},\"seaport-types/src/interfaces/TokenTransferrerErrors.sol\":{\"keccak256\":\"0x9ba38397a8b8e3c7d1119138ef452d1b801bdcf594699ba51a6b2858045b55e5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40919b9dfed2d2562ba8101bfc5e5333241dff9fc323b1cdb3d60a67820ebba4\",\"dweb:/ipfs/QmQTyJF7pkKpY1p3vrVpkQASbC8uYWKaEUMtRc5Y6UKZam\"]},\"seaport-types/src/lib/TokenTransferrerConstants.sol\":{\"keccak256\":\"0x0782f25dce0a09f772c39c41955ee1432d8a6a190100f3042c141c5d73c11905\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1f60c05c05862207f94f14c95d5973bd6d7e906f867b7cf1c3a0d42c492448c2\",\"dweb:/ipfs/QmPWnCPTPndMLHwjD69U58K7q6kKgQr9hxCXQ86X78vBNJ\"]}},\"version\":1}","zk_version":"1.3.16"},"evm":{"legacyAssembly":null,"assembly":"\t.text\n\t.file\t\"TokenTransferrer.sol:TokenTransferrer\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tand!\t1, r2, r1\n\tjump.eq\t@.BB0_2\n\tadd\t128, r0, r1\n\tst.1\t64, r1\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_0[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end0:\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\n","bytecode":{"object":"00000001012001900000000c0000613d0000008001000039000000400010043f0000000001000416000000000101004b0000000c0000c13d00000020010000390000010000100443000001200000044300000005010000410000000f0001042e000000000100001900000010000104300000000e000004320000000f0001042e000000100001043000000000000000000000000000000000000000000000000000000002000000000000000000000000000000400000010000000000000000003130487488f503c38d5548c6a2b63882c7787f96c1ed69150387b0a92ccdc8d9"},"methodIdentifiers":{}},"irOptimized":"/// @use-src 2:\"seaport-core/src/lib/TokenTransferrer.sol\", 7:\"seaport-types/src/interfaces/TokenTransferrerErrors.sol\"\nobject \"TokenTransferrer_435\" {\n    code {\n        {\n            /// @src 2:3772:35855  \"contract TokenTransferrer is TokenTransferrerErrors {...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            let _2 := datasize(\"TokenTransferrer_435_deployed\")\n            codecopy(_1, dataoffset(\"TokenTransferrer_435_deployed\"), _2)\n            return(_1, _2)\n        }\n    }\n    /// @use-src 2:\"seaport-core/src/lib/TokenTransferrer.sol\"\n    object \"TokenTransferrer_435_deployed\" {\n        code {\n            {\n                /// @src 2:3772:35855  \"contract TokenTransferrer is TokenTransferrerErrors {...\"\n                revert(0, 0)\n            }\n        }\n        data \".metadata\" hex\"a26469706673582212204fcbdc5dd52747fc285ea3424f6c244f1b71b5e914b2c60a3a733fda485ab4df64736f6c634300080e0033\"\n    }\n}\n","hash":"0100000747ed15d8764ef6bf49df32a34aa70484e6afb2853b6f3589cbf7d73a","factoryDependencies":{}}},"seaport-types/src/interfaces/ConduitInterface.sol":{"ConduitInterface":{"abi":[{"inputs":[{"internalType":"address","name":"channel","type":"address"}],"name":"ChannelClosed","type":"error"},{"inputs":[{"internalType":"address","name":"channel","type":"address"},{"internalType":"bool","name":"isOpen","type":"bool"}],"name":"ChannelStatusAlreadySet","type":"error"},{"inputs":[],"name":"InvalidController","type":"error"},{"inputs":[],"name":"InvalidItemType","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"channel","type":"address"},{"indexed":false,"internalType":"bool","name":"open","type":"bool"}],"name":"ChannelUpdated","type":"event"},{"inputs":[{"components":[{"internalType":"enum ConduitItemType","name":"itemType","type":"uint8"},{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"identifier","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct ConduitTransfer[]","name":"transfers","type":"tuple[]"}],"name":"execute","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"internalType":"struct ConduitBatch1155Transfer[]","name":"batch1155Transfers","type":"tuple[]"}],"name":"executeBatch1155","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"enum ConduitItemType","name":"itemType","type":"uint8"},{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"identifier","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct ConduitTransfer[]","name":"standardTransfers","type":"tuple[]"},{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"internalType":"struct ConduitBatch1155Transfer[]","name":"batch1155Transfers","type":"tuple[]"}],"name":"executeWithBatch1155","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"channel","type":"address"},{"internalType":"bool","name":"isOpen","type":"bool"}],"name":"updateChannel","outputs":[],"stateMutability":"nonpayable","type":"function"}],"metadata":"{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"channel\",\"type\":\"address\"}],\"name\":\"ChannelClosed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"channel\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"}],\"name\":\"ChannelStatusAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidController\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidItemType\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"channel\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"}],\"name\":\"ChannelUpdated\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum ConduitItemType\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"identifier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ConduitTransfer[]\",\"name\":\"transfers\",\"type\":\"tuple[]\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ConduitBatch1155Transfer[]\",\"name\":\"batch1155Transfers\",\"type\":\"tuple[]\"}],\"name\":\"executeBatch1155\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum ConduitItemType\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"identifier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ConduitTransfer[]\",\"name\":\"standardTransfers\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ConduitBatch1155Transfer[]\",\"name\":\"batch1155Transfers\",\"type\":\"tuple[]\"}],\"name\":\"executeWithBatch1155\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"channel\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"}],\"name\":\"updateChannel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"0age\",\"errors\":{\"ChannelClosed(address)\":[{\"details\":\"Revert with an error when attempting to execute transfers using a      caller that does not have an open channel.\"}],\"ChannelStatusAlreadySet(address,bool)\":[{\"details\":\"Revert with an error when attempting to update a channel to the      current status of that channel.\"}],\"InvalidController()\":[{\"details\":\"Revert with an error when attempting to update the status of a      channel from a caller that is not the conduit controller.\"}],\"InvalidItemType()\":[{\"details\":\"Revert with an error when attempting to execute a transfer for an      item that does not have an ERC20/721/1155 item type.\"}]},\"events\":{\"ChannelUpdated(address,bool)\":{\"details\":\"Emit an event whenever a channel is opened or closed.\",\"params\":{\"channel\":\"The channel that has been updated.\",\"open\":\"A boolean indicating whether the conduit is open or not.\"}}},\"kind\":\"dev\",\"methods\":{\"execute((uint8,address,address,address,uint256,uint256)[])\":{\"params\":{\"transfers\":\"The ERC20/721/1155 transfers to perform.\"},\"returns\":{\"magicValue\":\"A magic value indicating that the transfers were                    performed successfully.\"}},\"executeBatch1155((address,address,address,uint256[],uint256[])[])\":{\"params\":{\"batch1155Transfers\":\"The 1155 batch transfers to perform.\"},\"returns\":{\"magicValue\":\"A magic value indicating that the transfers were                    performed successfully.\"}},\"executeWithBatch1155((uint8,address,address,address,uint256,uint256)[],(address,address,address,uint256[],uint256[])[])\":{\"params\":{\"batch1155Transfers\":\"The 1155 batch transfers to perform.\",\"standardTransfers\":\"The ERC20/721/1155 transfers to perform.\"},\"returns\":{\"magicValue\":\"A magic value indicating that the transfers were                    performed successfully.\"}},\"updateChannel(address,bool)\":{\"params\":{\"channel\":\"The channel to open or close.\",\"isOpen\":\"The status of the channel (either open or closed).\"}}},\"title\":\"ConduitInterface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"execute((uint8,address,address,address,uint256,uint256)[])\":{\"notice\":\"Execute a sequence of ERC20/721/1155 transfers. Only a caller         with an open channel can call this function.\"},\"executeBatch1155((address,address,address,uint256[],uint256[])[])\":{\"notice\":\"Execute a sequence of batch 1155 transfers. Only a caller with an         open channel can call this function.\"},\"executeWithBatch1155((uint8,address,address,address,uint256,uint256)[],(address,address,address,uint256[],uint256[])[])\":{\"notice\":\"Execute a sequence of transfers, both single and batch 1155. Only         a caller with an open channel can call this function.\"},\"updateChannel(address,bool)\":{\"notice\":\"Open or close a given channel. Only callable by the controller.\"}},\"notice\":\"ConduitInterface contains all external function interfaces, events,         and errors for conduit contracts.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"seaport-types/src/interfaces/ConduitInterface.sol\":\"ConduitInterface\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"seaport-types/src/conduit/lib/ConduitEnums.sol\":{\"keccak256\":\"0x1b24e84bbd29d52cebcb0bda26c8095c9d7a8e5719dd1b0e203315be0df4dcf7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://901be0c9ea392a69611b884985a772547e83ce78610a40e989216d842c8eb4b0\",\"dweb:/ipfs/QmPW1kDrkUEAvF6gy5FHsVmXNe2C1czAovXKL18T5jKiVx\"]},\"seaport-types/src/conduit/lib/ConduitStructs.sol\":{\"keccak256\":\"0xe765c83ddb65b13547db2914f7212689707fcd85c1bbe5c49dbe3e98c4942dd9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1318c90a615b9c2098c1f7435925c76913d2c54b79a53f8f64eae59d60ed5564\",\"dweb:/ipfs/QmXkTSAvkrMbrNLJjehm3JXeBoyW6dDYWRsdFkuDVb33sa\"]},\"seaport-types/src/interfaces/ConduitInterface.sol\":{\"keccak256\":\"0x5710e503e7550594cf98bade51646da1420d09c1b4758315484810df72d7cf64\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d3831fc9b36ce3760c39f60682487848f9678157794b995207f15d93ca1cc58a\",\"dweb:/ipfs/QmaapZB4DdYhUSkjySHJk9n7ajEfmX1hwWXWwEHAixYPQQ\"]}},\"version\":1}","evm":{"legacyAssembly":null,"assembly":null,"bytecode":null,"methodIdentifiers":{"execute((uint8,address,address,address,uint256,uint256)[])":"4ce34aa2","executeBatch1155((address,address,address,uint256[],uint256[])[])":"8df25d92","executeWithBatch1155((uint8,address,address,address,uint256,uint256)[],(address,address,address,uint256[],uint256[])[])":"899e104c","updateChannel(address,bool)":"c4e8fcb5"}},"irOptimized":""}},"seaport-types/src/interfaces/TokenTransferrerErrors.sol":{"TokenTransferrerErrors":{"abi":[{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"BadReturnValueFromERC20OnTransfer","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"identifiers","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"ERC1155BatchTransferGenericFailure","type":"error"},{"inputs":[],"name":"Invalid1155BatchTransferEncoding","type":"error"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"InvalidERC721TransferAmount","type":"error"},{"inputs":[],"name":"MissingItemAmount","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NoContract","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"identifier","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"TokenTransferGenericFailure","type":"error"},{"inputs":[],"name":"UnusedItemParameters","type":"error"}],"metadata":"{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BadReturnValueFromERC20OnTransfer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"identifiers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"ERC1155BatchTransferGenericFailure\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Invalid1155BatchTransferEncoding\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InvalidERC721TransferAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MissingItemAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NoContract\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"identifier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenTransferGenericFailure\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnusedItemParameters\",\"type\":\"error\"}],\"devdoc\":{\"errors\":{\"BadReturnValueFromERC20OnTransfer(address,address,address,uint256)\":[{\"details\":\"Revert with an error when an ERC20 token transfer returns a falsey      value.\",\"params\":{\"amount\":\"The amount for the attempted ERC20 transfer.\",\"from\":\"The source of the attempted ERC20 transfer.\",\"to\":\"The recipient of the attempted ERC20 transfer.\",\"token\":\"The token for which the ERC20 transfer was attempted.\"}}],\"ERC1155BatchTransferGenericFailure(address,address,address,uint256[],uint256[])\":[{\"details\":\"Revert with an error when a batch ERC1155 token transfer reverts.\",\"params\":{\"amounts\":\"The amounts for the attempted transfer.\",\"from\":\"The source of the attempted transfer.\",\"identifiers\":\"The identifiers for the attempted transfer.\",\"to\":\"The recipient of the attempted transfer.\",\"token\":\"The token for which the transfer was attempted.\"}}],\"Invalid1155BatchTransferEncoding()\":[{\"details\":\"Revert with an error when attempting to execute an 1155 batch      transfer using calldata not produced by default ABI encoding or with      different lengths for ids and amounts arrays.\"}],\"InvalidERC721TransferAmount(uint256)\":[{\"details\":\"Revert with an error when an ERC721 transfer with amount other than      one is attempted.\",\"params\":{\"amount\":\"The amount of the ERC721 tokens to transfer.\"}}],\"MissingItemAmount()\":[{\"details\":\"Revert with an error when attempting to fulfill an order where an      item has an amount of zero.\"}],\"NoContract(address)\":[{\"details\":\"Revert with an error when an account being called as an assumed      contract does not have code and returns no data.\",\"params\":{\"account\":\"The account that should contain code.\"}}],\"TokenTransferGenericFailure(address,address,address,uint256,uint256)\":[{\"details\":\"Revert with an error when an ERC20, ERC721, or ERC1155 token      transfer reverts.\",\"params\":{\"amount\":\"The amount for the attempted transfer.\",\"from\":\"The source of the attempted transfer.\",\"identifier\":\"The identifier for the attempted transfer.\",\"to\":\"The recipient of the attempted transfer.\",\"token\":\"The token for which the transfer was attempted.\"}}],\"UnusedItemParameters()\":[{\"details\":\"Revert with an error when attempting to fulfill an order where an      item has unused parameters. This includes both the token and the      identifier parameters for native transfers as well as the identifier      parameter for ERC20 transfers. Note that the conduit does not      perform this check, leaving it up to the calling channel to enforce      when desired.\"}]},\"kind\":\"dev\",\"methods\":{},\"title\":\"TokenTransferrerErrors\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"seaport-types/src/interfaces/TokenTransferrerErrors.sol\":\"TokenTransferrerErrors\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"seaport-types/src/interfaces/TokenTransferrerErrors.sol\":{\"keccak256\":\"0x9ba38397a8b8e3c7d1119138ef452d1b801bdcf594699ba51a6b2858045b55e5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40919b9dfed2d2562ba8101bfc5e5333241dff9fc323b1cdb3d60a67820ebba4\",\"dweb:/ipfs/QmQTyJF7pkKpY1p3vrVpkQASbC8uYWKaEUMtRc5Y6UKZam\"]}},\"version\":1}","evm":{"legacyAssembly":null,"assembly":null,"bytecode":null,"methodIdentifiers":{}},"irOptimized":""}}}}}